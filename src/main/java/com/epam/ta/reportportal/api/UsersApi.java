/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.epam.ta.reportportal.api;

import com.epam.ta.reportportal.api.model.InlineResponse2002;
import com.epam.ta.reportportal.api.model.InlineResponse2003;
import com.epam.ta.reportportal.api.model.InlineResponse201;
import com.epam.ta.reportportal.api.model.Multistatus;
import com.epam.ta.reportportal.api.model.OrganizationUserAssignment;
import com.epam.ta.reportportal.api.model.OrganizationUserDefinition;
import com.epam.ta.reportportal.api.model.OrganizationUserProfile;
import com.epam.ta.reportportal.api.model.OrganizationUsersPage;
import com.epam.ta.reportportal.api.model.Problem;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import java.io.IOException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


@Validated
public interface UsersApi {

    Logger log = LoggerFactory.getLogger(UsersApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Unassigned organization user", description = "Unassigned user from an organization and all organization projects.  ### Authority:  - `ADMINISTRATOR` - `MANAGER`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Users", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/users/{user_id}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOrganizationsOrgIdUsersUserId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.PATH, description = "User identifier", required=true, schema=@Schema()) @PathVariable("user_id") Long userId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get organization's users", description = "Provides a list of organization's users.  ### Authority:  - `ADMINISTRATOR` - `MANAGER`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Users", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationUsersPage.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/users",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrganizationUsersPage> getOrganizationsOrgIdUsers(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.QUERY, description = "The limit used for this page of results. This will be the same as the limit query parameter unless it exceeded the maximum value allowed for this API endpoint" ,schema=@Schema( defaultValue="300")) @Valid @RequestParam(value = "limit", required = false, defaultValue="300") Integer limit
, @Parameter(in = ParameterIn.QUERY, description = "The offset used for this page of results" ,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset
, @Parameter(in = ParameterIn.QUERY, description = "Indicate sort by field" ,schema=@Schema()) @Valid @RequestParam(value = "sort", required = false) String sort
, @Parameter(in = ParameterIn.QUERY, description = "Indicate sorting direction" ,schema=@Schema(allowableValues={ "ASC", "DESC" }
, defaultValue="ASC")) @Valid @RequestParam(value = "order", required = false, defaultValue="ASC") String order
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationUsersPage.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get organization user profile", description = "Get organization user profile.  ### Authority:  - `ADMINISTRATOR` - `MANAGER` - `MEMBER`  A user with `MEMBER` role can get only his profile.  ### Member authority:  - `EDITOR` - `VIEWER`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Users", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationUserProfile.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/users/{user_id}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrganizationUserProfile> getOrganizationsOrgIdUsersUserId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.PATH, description = "User identifier", required=true, schema=@Schema()) @PathVariable("user_id") Long userId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationUserProfile.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Partial organization user update", description = "Partial organization user update.  You can provide a project list as an additional option for assigning or unassigned a user from projects.  ### Organization authority:  - `ADMINISTRATOR` - `MANAGER` - `MEMBER`  ### Project authority:  - `EDITOR`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Users", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2003.class))),
        
        @ApiResponse(responseCode = "207", description = "Multi-Status (WebDAV)  Response for a user assignment with projects.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Multistatus.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/users/{user_id}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/merge-patch+json" }, 
        method = RequestMethod.PATCH)
    default ResponseEntity<InlineResponse2003> patchOrganizationsOrgIdUsersUserId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.PATH, description = "User identifier", required=true, schema=@Schema()) @PathVariable("user_id") Long userId
, @Parameter(in = ParameterIn.DEFAULT, description = "Use PATCH with JSON Merge Patch standard, a specialized media type application/merge-patch+json for partial resource representation to update parts of resource objects.", schema=@Schema()) @Valid @RequestBody OrganizationUserDefinition body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"The user's role in the organization has been updated.\"\n}", InlineResponse2003.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Assignment user to organization", description = "This is a complex endpoint that provides a flow for assigning a user to the organization. It can be used as a bulk endpoint if you provide a list of projects for assignment.  ### Authority:  - `ADMINISTRATOR` - `MANAGER` - `MEMBER`  ### Project authority:  - `ADMINISTRATOR` - `MANAGER` - `EDITOR`  ### Assignment rules  #### For assignment user to the organization:  A user with the `MEMBER` role can assign only users with the `MEMBER` role.  #### For assignment user to the organization's projects:  A users with the `ADMINISTRATOR`, `MANAGER`, and `MEMBER` with `EDITOR` roles can assign users to the organization's projects.  ### Response event statuses  You will get different statuses for project assignments according to which user you want to assign to the organization:  - `PENDING` or `FAILURE` for non-existing users. - `SUCCESS` or `FAILURE` for existing users.  Items contain statuses for each event. Inside the event, you can find the `id` that links to the identifier you provided in the request.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Users", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "207", description = "Multi-Status (WebDAV)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Multistatus.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/users",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse201> postOrganizationsOrgIdUsers(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.DEFAULT, description = "Definition for a user assignment.", schema=@Schema()) @Valid @RequestBody OrganizationUserAssignment body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"The user has been created in the organization.\"\n}", InlineResponse201.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Update organization user details", description = "Update organization user details.  Organization user details for update.  You can provide a project list as an additional option for assigning or unassigned a user from projects.  ### Organization authority:  - `ADMINISTRATOR` - `MANAGER` - `MEMBER`  ### Project authority:  - `EDITOR`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Users", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2002.class))),
        
        @ApiResponse(responseCode = "207", description = "Multi-Status (WebDAV)  Response for a user assignment with projects.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Multistatus.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/users/{user_id}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<InlineResponse2002> putOrganizationsOrgIdUsersUserId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.PATH, description = "User identifier", required=true, schema=@Schema()) @PathVariable("user_id") Long userId
, @Parameter(in = ParameterIn.DEFAULT, description = "Provide organization's user information for update.", schema=@Schema()) @Valid @RequestBody OrganizationUserDefinition body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"The user's role in the organization has been updated.\"\n}", InlineResponse2002.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default UsersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

