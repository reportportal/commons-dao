/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.epam.ta.reportportal.api;

import com.epam.ta.reportportal.api.model.InlineResponse200;
import com.epam.ta.reportportal.api.model.InlineResponse2001;
import com.epam.ta.reportportal.api.model.OrganizationDetails;
import com.epam.ta.reportportal.api.model.OrganizationInfo;
import com.epam.ta.reportportal.api.model.OrganizationProfile;
import com.epam.ta.reportportal.api.model.OrganizationProfilesList;
import com.epam.ta.reportportal.api.model.OrganizationSearchCriteria;
import com.epam.ta.reportportal.api.model.Problem;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import java.io.IOException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.Pattern;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


@Validated
public interface OrganizationsApi {

    Logger log = LoggerFactory.getLogger(OrganizationsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Delete organization", description = "> **Enterprise edition feature**  > > Available only if an Organization plugin is enabled.  Delete organization by identifier.  ### Authority:  - `ADMINISTRATOR`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Organizations", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "402", description = "Payment Required", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOrganizationsOrgId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrganizationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get a list of organizations", description = "Get a list of existing organizations.  ### Authority  - `ADMINISTRATOR` - `MANAGER` - `MEMBER`  ### Access level  - `ADMINISTRATOR` - no restrictions. - `MANAGER` - limited to viewing only their assigned organizations. - `MEMBER` - limited to viewing only their assigned organizations.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Organizations", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationProfilesList.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrganizationProfilesList> getOrganizations(@Parameter(in = ParameterIn.QUERY, description = "The offset used for this page of results" ,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "offset", required = false, defaultValue="0") Integer offset
, @Parameter(in = ParameterIn.QUERY, description = "The limit used for this page of results. This will be the same as the limit query parameter unless it exceeded the maximum value allowed for this API endpoint" ,schema=@Schema( defaultValue="300")) @Valid @RequestParam(value = "limit", required = false, defaultValue="300") Integer limit
, @Parameter(in = ParameterIn.QUERY, description = "Indicate sorting direction" ,schema=@Schema(allowableValues={ "ASC", "DESC" }
, defaultValue="ASC")) @Valid @RequestParam(value = "order", required = false, defaultValue="ASC") String order
, @Parameter(in = ParameterIn.QUERY, description = "Filter organizations by name by substring" ,schema=@Schema()) @Valid @RequestParam(value = "name", required = false) String name
, @Pattern(regexp="^[a-z0-9]+(?:-[a-z0-9]+)*$") @Parameter(in = ParameterIn.QUERY, description = "Filter organizations by slug" ,schema=@Schema()) @Valid @RequestParam(value = "slug", required = false) String slug
, @Parameter(in = ParameterIn.QUERY, description = "Indicate sort by field" ,schema=@Schema( defaultValue="name")) @Valid @RequestParam(value = "sort", required = false, defaultValue="name") String sort
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationProfilesList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrganizationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get organization information", description = "Provide organization information.  ### Authority:  - `ADMINISTRATOR` - `MANAGER` - `MEMBER`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Organizations", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationProfile.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrganizationProfile> getOrganizationsOrgId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationProfile.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrganizationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Partial organization update", description = "> **Enterprise edition feature**  > > Available only if an Organization plugin is enabled.  Particular organization fields update via the [JSON Merge Patch standard](https://datatracker.ietf.org/doc/html/rfc7386).  ### Authority:  - `ADMINISTRATOR` - `MANAGER`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Organizations", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "402", description = "Payment Required", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/merge-patch+json" }, 
        method = RequestMethod.PATCH)
    default ResponseEntity<InlineResponse2001> patchOrganizationsOrgId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.DEFAULT, description = "Use PATCH with JSON Merge Patch standard, a specialized media type application/merge-patch+json for partial resource representation to update parts of resource objects.", schema=@Schema()) @Valid @RequestBody OrganizationDetails body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"The organization update was completed successfully.\"\n}", InlineResponse2001.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrganizationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Create a new organization", description = "> **Enterprise edition feature**  > > Available only if an Organization plugin is enabled.  Create a new organization. Provide name and slug.  ### Authority:   - `ADMINISTRATOR` ", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Organizations", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationInfo.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "402", description = "Payment Required", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrganizationInfo> postOrganizations(@Parameter(in = ParameterIn.DEFAULT, description = "You can create an organization provide name and slug. If the `slug` is not provided, it will be generated from the `name`.", schema=@Schema()) @Valid @RequestBody OrganizationDetails body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrganizationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Create search request for organizations", description = "Create search request for organizations by provided criteria.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Organizations", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationProfilesList.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/searches",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrganizationProfilesList> postOrganizationsSearches(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody OrganizationSearchCriteria body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationProfilesList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrganizationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Update organization", description = "> **Enterprise edition feature**  > > Available only if an Organization plugin is enabled.  Update organization information with the provided data.  ### Authority:  - `ADMINISTRATOR` - `MANAGER`", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Organizations", "Ready for implementation" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "402", description = "Payment Required", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<InlineResponse200> putOrganizationsOrgId(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.DEFAULT, description = "Provide organization information for update.", schema=@Schema()) @Valid @RequestBody OrganizationDetails body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"The organization update was completed successfully.\"\n}", InlineResponse200.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OrganizationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

