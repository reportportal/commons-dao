/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.57).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.epam.ta.reportportal.api;

import com.epam.ta.reportportal.api.model.InlineResponse2004;
import com.epam.ta.reportportal.api.model.InlineResponse2005;
import com.epam.ta.reportportal.api.model.InlineResponse2006;
import com.epam.ta.reportportal.api.model.InlineResponse2007;
import com.epam.ta.reportportal.api.model.InlineResponse2008;
import com.epam.ta.reportportal.api.model.InlineResponse2009;
import com.epam.ta.reportportal.api.model.OrganizationNotifyRule;
import com.epam.ta.reportportal.api.model.OrganizationNotifyRuleDefinition;
import com.epam.ta.reportportal.api.model.OrganizationNotifyRulesList;
import com.epam.ta.reportportal.api.model.Problem;
import com.epam.ta.reportportal.api.model.SettingsSettingNameBody;
import com.epam.ta.reportportal.api.model.SettingsSettingNameBody2;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import java.io.IOException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


@Validated
public interface TodoApi {

    Logger log = LoggerFactory.getLogger(TodoApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content") })
    @RequestMapping(value = "/organizations/{org_id}/notification-rules/{notify_rule_id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteOrganizationsOrgIdNotificationRulesNotifyRuleId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("org_id") String orgId
, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("notify_rule_id") String notifyRuleId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Your GET endpoint", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationNotifyRulesList.class))) })
    @RequestMapping(value = "/organizations/{org_id}/notification-rules",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrganizationNotifyRulesList> getOrganizationsOrgIdNotificationRules(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("org_id") String orgId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationNotifyRulesList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationNotifyRule.class))) })
    @RequestMapping(value = "/organizations/{org_id}/notification-rules/{notify_rule_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<OrganizationNotifyRule> getOrganizationsOrgIdNotificationsRulesRuleId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("org_id") String orgId
, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("notify_rule_id") String notifyRuleId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationNotifyRule.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2004.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found: Organization not found.", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/settings",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2004> getOrganizationsOrgIdSettings(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"retention_policy\" : {\n    \"attachment_retention_period\" : \"attachment_retention_period\",\n    \"log_retention_period\" : \"log_retention_period\",\n    \"launch_retention_period\" : \"launch_retention_period\"\n  },\n  \"notification_policy\" : {\n    \"auto_notification\" : true\n  }\n}", InlineResponse2004.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2005.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found: Organization or setting not found.", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/settings/{setting_name}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2005> getOrganizationsOrgIdSettingsSettingName(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.PATH, description = "Specific setting name", required=true, schema=@Schema(allowableValues={ "retention-policy", "notification-policy" }
)) @PathVariable("setting_name") String settingName
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", InlineResponse2005.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2009.class))) })
    @RequestMapping(value = "/organizations/{org_id}/notification-rules/{notify_rule_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    default ResponseEntity<InlineResponse2009> patchOrganizationsOrgIdNotificationRulesNotifyRuleId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("org_id") String orgId
, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("notify_rule_id") String notifyRuleId
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody OrganizationNotifyRuleDefinition body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"message\"\n}", InlineResponse2009.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2007.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/organizations/{org_id}/settings/{setting_name}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    default ResponseEntity<InlineResponse2007> patchOrganizationsOrgIdSettingsSettingName(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.PATH, description = "Specific setting name", required=true, schema=@Schema(allowableValues={ "retention-policy", "notification-policy" }
)) @PathVariable("setting_name") String settingName
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SettingsSettingNameBody2 body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"message\"\n}", InlineResponse2007.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrganizationNotifyRule.class))) })
    @RequestMapping(value = "/organizations/{org_id}/notification-rules",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<OrganizationNotifyRule> postOrganizationsOrgIdNotificationRules(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("org_id") String orgId
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody OrganizationNotifyRuleDefinition body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", OrganizationNotifyRule.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2008.class))) })
    @RequestMapping(value = "/organizations/{org_id}/notification-rules/{notify_rule_id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<InlineResponse2008> putOrganizationsOrgIdNotificationRulesNotifyRuleId(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("org_id") String orgId
, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("notify_rule_id") String notifyRuleId
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody OrganizationNotifyRuleDefinition body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"message\"\n}", InlineResponse2008.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "#TODO", description = "#TODO", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "TODO" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2006.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))) })
    @RequestMapping(value = "/organizations/{org_id}/settings/{setting_name}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<InlineResponse2006> putOrganizationsOrgIdSettingsSettingName(@Parameter(in = ParameterIn.PATH, description = "Organization identifier", required=true, schema=@Schema()) @PathVariable("org_id") Long orgId
, @Parameter(in = ParameterIn.PATH, description = "Specific setting name", required=true, schema=@Schema(allowableValues={ "retention-policy", "notification-policy" }
)) @PathVariable("setting_name") String settingName
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody SettingsSettingNameBody body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"message\" : \"message\"\n}", InlineResponse2006.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default TodoApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

