/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq;


import com.epam.ta.reportportal.jooq.tables.JActivity;
import com.epam.ta.reportportal.jooq.tables.JAnalyticsData;
import com.epam.ta.reportportal.jooq.tables.JApiKeys;
import com.epam.ta.reportportal.jooq.tables.JAttachment;
import com.epam.ta.reportportal.jooq.tables.JAttachmentDeletion;
import com.epam.ta.reportportal.jooq.tables.JAttribute;
import com.epam.ta.reportportal.jooq.tables.JClusters;
import com.epam.ta.reportportal.jooq.tables.JClustersTestItem;
import com.epam.ta.reportportal.jooq.tables.JContentField;
import com.epam.ta.reportportal.jooq.tables.JDashboard;
import com.epam.ta.reportportal.jooq.tables.JDashboardWidget;
import com.epam.ta.reportportal.jooq.tables.JFilter;
import com.epam.ta.reportportal.jooq.tables.JFilterCondition;
import com.epam.ta.reportportal.jooq.tables.JFilterSort;
import com.epam.ta.reportportal.jooq.tables.JGroups;
import com.epam.ta.reportportal.jooq.tables.JGroupsProjects;
import com.epam.ta.reportportal.jooq.tables.JGroupsUsers;
import com.epam.ta.reportportal.jooq.tables.JIntegration;
import com.epam.ta.reportportal.jooq.tables.JIntegrationType;
import com.epam.ta.reportportal.jooq.tables.JIssue;
import com.epam.ta.reportportal.jooq.tables.JIssueGroup;
import com.epam.ta.reportportal.jooq.tables.JIssueTicket;
import com.epam.ta.reportportal.jooq.tables.JIssueType;
import com.epam.ta.reportportal.jooq.tables.JIssueTypeProject;
import com.epam.ta.reportportal.jooq.tables.JItemAttribute;
import com.epam.ta.reportportal.jooq.tables.JLaunch;
import com.epam.ta.reportportal.jooq.tables.JLaunchAttributeRules;
import com.epam.ta.reportportal.jooq.tables.JLaunchNames;
import com.epam.ta.reportportal.jooq.tables.JLaunchNumber;
import com.epam.ta.reportportal.jooq.tables.JLog;
import com.epam.ta.reportportal.jooq.tables.JOauthRegistration;
import com.epam.ta.reportportal.jooq.tables.JOauthRegistrationRestriction;
import com.epam.ta.reportportal.jooq.tables.JOauthRegistrationScope;
import com.epam.ta.reportportal.jooq.tables.JOrganization;
import com.epam.ta.reportportal.jooq.tables.JOrganizationUser;
import com.epam.ta.reportportal.jooq.tables.JOwnedEntity;
import com.epam.ta.reportportal.jooq.tables.JParameter;
import com.epam.ta.reportportal.jooq.tables.JPatternTemplate;
import com.epam.ta.reportportal.jooq.tables.JPatternTemplateTestItem;
import com.epam.ta.reportportal.jooq.tables.JProject;
import com.epam.ta.reportportal.jooq.tables.JProjectAttribute;
import com.epam.ta.reportportal.jooq.tables.JProjectUser;
import com.epam.ta.reportportal.jooq.tables.JRecipients;
import com.epam.ta.reportportal.jooq.tables.JRestorePasswordBid;
import com.epam.ta.reportportal.jooq.tables.JSenderCase;
import com.epam.ta.reportportal.jooq.tables.JServerSettings;
import com.epam.ta.reportportal.jooq.tables.JShedlock;
import com.epam.ta.reportportal.jooq.tables.JStaleMaterializedView;
import com.epam.ta.reportportal.jooq.tables.JStatistics;
import com.epam.ta.reportportal.jooq.tables.JStatisticsField;
import com.epam.ta.reportportal.jooq.tables.JTestItem;
import com.epam.ta.reportportal.jooq.tables.JTestItemResults;
import com.epam.ta.reportportal.jooq.tables.JTicket;
import com.epam.ta.reportportal.jooq.tables.JUserCreationBid;
import com.epam.ta.reportportal.jooq.tables.JUserPreference;
import com.epam.ta.reportportal.jooq.tables.JUsers;
import com.epam.ta.reportportal.jooq.tables.JWidget;
import com.epam.ta.reportportal.jooq.tables.JWidgetFilter;
import com.epam.ta.reportportal.jooq.tables.records.JActivityRecord;
import com.epam.ta.reportportal.jooq.tables.records.JAnalyticsDataRecord;
import com.epam.ta.reportportal.jooq.tables.records.JApiKeysRecord;
import com.epam.ta.reportportal.jooq.tables.records.JAttachmentDeletionRecord;
import com.epam.ta.reportportal.jooq.tables.records.JAttachmentRecord;
import com.epam.ta.reportportal.jooq.tables.records.JAttributeRecord;
import com.epam.ta.reportportal.jooq.tables.records.JClustersRecord;
import com.epam.ta.reportportal.jooq.tables.records.JClustersTestItemRecord;
import com.epam.ta.reportportal.jooq.tables.records.JContentFieldRecord;
import com.epam.ta.reportportal.jooq.tables.records.JDashboardRecord;
import com.epam.ta.reportportal.jooq.tables.records.JDashboardWidgetRecord;
import com.epam.ta.reportportal.jooq.tables.records.JFilterConditionRecord;
import com.epam.ta.reportportal.jooq.tables.records.JFilterRecord;
import com.epam.ta.reportportal.jooq.tables.records.JFilterSortRecord;
import com.epam.ta.reportportal.jooq.tables.records.JGroupsProjectsRecord;
import com.epam.ta.reportportal.jooq.tables.records.JGroupsRecord;
import com.epam.ta.reportportal.jooq.tables.records.JGroupsUsersRecord;
import com.epam.ta.reportportal.jooq.tables.records.JIntegrationRecord;
import com.epam.ta.reportportal.jooq.tables.records.JIntegrationTypeRecord;
import com.epam.ta.reportportal.jooq.tables.records.JIssueGroupRecord;
import com.epam.ta.reportportal.jooq.tables.records.JIssueRecord;
import com.epam.ta.reportportal.jooq.tables.records.JIssueTicketRecord;
import com.epam.ta.reportportal.jooq.tables.records.JIssueTypeProjectRecord;
import com.epam.ta.reportportal.jooq.tables.records.JIssueTypeRecord;
import com.epam.ta.reportportal.jooq.tables.records.JItemAttributeRecord;
import com.epam.ta.reportportal.jooq.tables.records.JLaunchAttributeRulesRecord;
import com.epam.ta.reportportal.jooq.tables.records.JLaunchNamesRecord;
import com.epam.ta.reportportal.jooq.tables.records.JLaunchNumberRecord;
import com.epam.ta.reportportal.jooq.tables.records.JLaunchRecord;
import com.epam.ta.reportportal.jooq.tables.records.JLogRecord;
import com.epam.ta.reportportal.jooq.tables.records.JOauthRegistrationRecord;
import com.epam.ta.reportportal.jooq.tables.records.JOauthRegistrationRestrictionRecord;
import com.epam.ta.reportportal.jooq.tables.records.JOauthRegistrationScopeRecord;
import com.epam.ta.reportportal.jooq.tables.records.JOrganizationRecord;
import com.epam.ta.reportportal.jooq.tables.records.JOrganizationUserRecord;
import com.epam.ta.reportportal.jooq.tables.records.JOwnedEntityRecord;
import com.epam.ta.reportportal.jooq.tables.records.JParameterRecord;
import com.epam.ta.reportportal.jooq.tables.records.JPatternTemplateRecord;
import com.epam.ta.reportportal.jooq.tables.records.JPatternTemplateTestItemRecord;
import com.epam.ta.reportportal.jooq.tables.records.JProjectAttributeRecord;
import com.epam.ta.reportportal.jooq.tables.records.JProjectRecord;
import com.epam.ta.reportportal.jooq.tables.records.JProjectUserRecord;
import com.epam.ta.reportportal.jooq.tables.records.JRecipientsRecord;
import com.epam.ta.reportportal.jooq.tables.records.JRestorePasswordBidRecord;
import com.epam.ta.reportportal.jooq.tables.records.JSenderCaseRecord;
import com.epam.ta.reportportal.jooq.tables.records.JServerSettingsRecord;
import com.epam.ta.reportportal.jooq.tables.records.JShedlockRecord;
import com.epam.ta.reportportal.jooq.tables.records.JStaleMaterializedViewRecord;
import com.epam.ta.reportportal.jooq.tables.records.JStatisticsFieldRecord;
import com.epam.ta.reportportal.jooq.tables.records.JStatisticsRecord;
import com.epam.ta.reportportal.jooq.tables.records.JTestItemRecord;
import com.epam.ta.reportportal.jooq.tables.records.JTestItemResultsRecord;
import com.epam.ta.reportportal.jooq.tables.records.JTicketRecord;
import com.epam.ta.reportportal.jooq.tables.records.JUserCreationBidRecord;
import com.epam.ta.reportportal.jooq.tables.records.JUserPreferenceRecord;
import com.epam.ta.reportportal.jooq.tables.records.JUsersRecord;
import com.epam.ta.reportportal.jooq.tables.records.JWidgetFilterRecord;
import com.epam.ta.reportportal.jooq.tables.records.JWidgetRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<JActivityRecord> ACTIVITY_PK = Internal.createUniqueKey(JActivity.ACTIVITY, DSL.name("activity_pk"), new TableField[] { JActivity.ACTIVITY.ID }, true);
    public static final UniqueKey<JAnalyticsDataRecord> ANALYTICS_DATA_PKEY = Internal.createUniqueKey(JAnalyticsData.ANALYTICS_DATA, DSL.name("analytics_data_pkey"), new TableField[] { JAnalyticsData.ANALYTICS_DATA.ID }, true);
    public static final UniqueKey<JApiKeysRecord> API_KEYS_PKEY = Internal.createUniqueKey(JApiKeys.API_KEYS, DSL.name("api_keys_pkey"), new TableField[] { JApiKeys.API_KEYS.ID }, true);
    public static final UniqueKey<JApiKeysRecord> USERS_API_KEYS_UNIQUE = Internal.createUniqueKey(JApiKeys.API_KEYS, DSL.name("users_api_keys_unique"), new TableField[] { JApiKeys.API_KEYS.NAME, JApiKeys.API_KEYS.USER_ID }, true);
    public static final UniqueKey<JAttachmentRecord> ATTACHMENT_PK = Internal.createUniqueKey(JAttachment.ATTACHMENT, DSL.name("attachment_pk"), new TableField[] { JAttachment.ATTACHMENT.ID }, true);
    public static final UniqueKey<JAttachmentDeletionRecord> ATTACHMENT_DELETION_PKEY = Internal.createUniqueKey(JAttachmentDeletion.ATTACHMENT_DELETION, DSL.name("attachment_deletion_pkey"), new TableField[] { JAttachmentDeletion.ATTACHMENT_DELETION.ID }, true);
    public static final UniqueKey<JAttributeRecord> ATTRIBUTE_PK = Internal.createUniqueKey(JAttribute.ATTRIBUTE, DSL.name("attribute_pk"), new TableField[] { JAttribute.ATTRIBUTE.ID }, true);
    public static final UniqueKey<JClustersRecord> CLUSTERS_PK = Internal.createUniqueKey(JClusters.CLUSTERS, DSL.name("clusters_pk"), new TableField[] { JClusters.CLUSTERS.ID }, true);
    public static final UniqueKey<JClustersRecord> INDEX_ID_LAUNCH_ID_UNQ = Internal.createUniqueKey(JClusters.CLUSTERS, DSL.name("index_id_launch_id_unq"), new TableField[] { JClusters.CLUSTERS.INDEX_ID, JClusters.CLUSTERS.LAUNCH_ID }, true);
    public static final UniqueKey<JClustersTestItemRecord> CLUSTER_ITEM_UNQ = Internal.createUniqueKey(JClustersTestItem.CLUSTERS_TEST_ITEM, DSL.name("cluster_item_unq"), new TableField[] { JClustersTestItem.CLUSTERS_TEST_ITEM.CLUSTER_ID, JClustersTestItem.CLUSTERS_TEST_ITEM.ITEM_ID }, true);
    public static final UniqueKey<JDashboardRecord> DASHBOARD_PKEY = Internal.createUniqueKey(JDashboard.DASHBOARD, DSL.name("dashboard_pkey"), new TableField[] { JDashboard.DASHBOARD.ID }, true);
    public static final UniqueKey<JDashboardWidgetRecord> DASHBOARD_WIDGET_PK = Internal.createUniqueKey(JDashboardWidget.DASHBOARD_WIDGET, DSL.name("dashboard_widget_pk"), new TableField[] { JDashboardWidget.DASHBOARD_WIDGET.DASHBOARD_ID, JDashboardWidget.DASHBOARD_WIDGET.WIDGET_ID }, true);
    public static final UniqueKey<JDashboardWidgetRecord> WIDGET_ON_DASHBOARD_UNQ = Internal.createUniqueKey(JDashboardWidget.DASHBOARD_WIDGET, DSL.name("widget_on_dashboard_unq"), new TableField[] { JDashboardWidget.DASHBOARD_WIDGET.DASHBOARD_ID, JDashboardWidget.DASHBOARD_WIDGET.WIDGET_NAME, JDashboardWidget.DASHBOARD_WIDGET.WIDGET_OWNER }, true);
    public static final UniqueKey<JFilterRecord> FILTER_PKEY = Internal.createUniqueKey(JFilter.FILTER, DSL.name("filter_pkey"), new TableField[] { JFilter.FILTER.ID }, true);
    public static final UniqueKey<JFilterConditionRecord> FILTER_CONDITION_PK = Internal.createUniqueKey(JFilterCondition.FILTER_CONDITION, DSL.name("filter_condition_pk"), new TableField[] { JFilterCondition.FILTER_CONDITION.ID }, true);
    public static final UniqueKey<JFilterSortRecord> FILTER_SORT_PK = Internal.createUniqueKey(JFilterSort.FILTER_SORT, DSL.name("filter_sort_pk"), new TableField[] { JFilterSort.FILTER_SORT.ID }, true);
    public static final UniqueKey<JGroupsRecord> GROUPS_PKEY = Internal.createUniqueKey(JGroups.GROUPS, DSL.name("groups_pkey"), new TableField[] { JGroups.GROUPS.ID }, true);
    public static final UniqueKey<JGroupsRecord> GROUPS_SLUG_ORG_ID_KEY = Internal.createUniqueKey(JGroups.GROUPS, DSL.name("groups_slug_org_id_key"), new TableField[] { JGroups.GROUPS.SLUG, JGroups.GROUPS.ORG_ID }, true);
    public static final UniqueKey<JGroupsRecord> GROUPS_UUID_KEY = Internal.createUniqueKey(JGroups.GROUPS, DSL.name("groups_uuid_key"), new TableField[] { JGroups.GROUPS.UUID }, true);
    public static final UniqueKey<JGroupsProjectsRecord> GROUPS_PROJECTS_PKEY = Internal.createUniqueKey(JGroupsProjects.GROUPS_PROJECTS, DSL.name("groups_projects_pkey"), new TableField[] { JGroupsProjects.GROUPS_PROJECTS.GROUP_ID, JGroupsProjects.GROUPS_PROJECTS.PROJECT_ID }, true);
    public static final UniqueKey<JGroupsUsersRecord> GROUPS_USERS_PKEY = Internal.createUniqueKey(JGroupsUsers.GROUPS_USERS, DSL.name("groups_users_pkey"), new TableField[] { JGroupsUsers.GROUPS_USERS.GROUP_ID, JGroupsUsers.GROUPS_USERS.USER_ID }, true);
    public static final UniqueKey<JIntegrationRecord> INTEGRATION_PK = Internal.createUniqueKey(JIntegration.INTEGRATION, DSL.name("integration_pk"), new TableField[] { JIntegration.INTEGRATION.ID }, true);
    public static final UniqueKey<JIntegrationTypeRecord> INTEGRATION_TYPE_NAME_KEY = Internal.createUniqueKey(JIntegrationType.INTEGRATION_TYPE, DSL.name("integration_type_name_key"), new TableField[] { JIntegrationType.INTEGRATION_TYPE.NAME }, true);
    public static final UniqueKey<JIntegrationTypeRecord> INTEGRATION_TYPE_PK = Internal.createUniqueKey(JIntegrationType.INTEGRATION_TYPE, DSL.name("integration_type_pk"), new TableField[] { JIntegrationType.INTEGRATION_TYPE.ID }, true);
    public static final UniqueKey<JIssueRecord> ISSUE_PK = Internal.createUniqueKey(JIssue.ISSUE, DSL.name("issue_pk"), new TableField[] { JIssue.ISSUE.ISSUE_ID }, true);
    public static final UniqueKey<JIssueGroupRecord> ISSUE_GROUP_PK = Internal.createUniqueKey(JIssueGroup.ISSUE_GROUP, DSL.name("issue_group_pk"), new TableField[] { JIssueGroup.ISSUE_GROUP.ISSUE_GROUP_ID }, true);
    public static final UniqueKey<JIssueTicketRecord> ISSUE_TICKET_PK = Internal.createUniqueKey(JIssueTicket.ISSUE_TICKET, DSL.name("issue_ticket_pk"), new TableField[] { JIssueTicket.ISSUE_TICKET.ISSUE_ID, JIssueTicket.ISSUE_TICKET.TICKET_ID }, true);
    public static final UniqueKey<JIssueTypeRecord> ISSUE_TYPE_LOCATOR_KEY = Internal.createUniqueKey(JIssueType.ISSUE_TYPE, DSL.name("issue_type_locator_key"), new TableField[] { JIssueType.ISSUE_TYPE.LOCATOR }, true);
    public static final UniqueKey<JIssueTypeRecord> ISSUE_TYPE_PK = Internal.createUniqueKey(JIssueType.ISSUE_TYPE, DSL.name("issue_type_pk"), new TableField[] { JIssueType.ISSUE_TYPE.ID }, true);
    public static final UniqueKey<JIssueTypeProjectRecord> ISSUE_TYPE_PROJECT_PK = Internal.createUniqueKey(JIssueTypeProject.ISSUE_TYPE_PROJECT, DSL.name("issue_type_project_pk"), new TableField[] { JIssueTypeProject.ISSUE_TYPE_PROJECT.PROJECT_ID, JIssueTypeProject.ISSUE_TYPE_PROJECT.ISSUE_TYPE_ID }, true);
    public static final UniqueKey<JItemAttributeRecord> ITEM_ATTRIBUTE_PK = Internal.createUniqueKey(JItemAttribute.ITEM_ATTRIBUTE, DSL.name("item_attribute_pk"), new TableField[] { JItemAttribute.ITEM_ATTRIBUTE.ID }, true);
    public static final UniqueKey<JLaunchRecord> LAUNCH_PK = Internal.createUniqueKey(JLaunch.LAUNCH, DSL.name("launch_pk"), new TableField[] { JLaunch.LAUNCH.ID }, true);
    public static final UniqueKey<JLaunchRecord> LAUNCH_UUID_KEY = Internal.createUniqueKey(JLaunch.LAUNCH, DSL.name("launch_uuid_key"), new TableField[] { JLaunch.LAUNCH.UUID }, true);
    public static final UniqueKey<JLaunchRecord> UNQ_NAME_NUMBER = Internal.createUniqueKey(JLaunch.LAUNCH, DSL.name("unq_name_number"), new TableField[] { JLaunch.LAUNCH.NAME, JLaunch.LAUNCH.NUMBER, JLaunch.LAUNCH.PROJECT_ID }, true);
    public static final UniqueKey<JLaunchAttributeRulesRecord> LAUNCH_ATTRIBUTE_RULES_PK = Internal.createUniqueKey(JLaunchAttributeRules.LAUNCH_ATTRIBUTE_RULES, DSL.name("launch_attribute_rules_pk"), new TableField[] { JLaunchAttributeRules.LAUNCH_ATTRIBUTE_RULES.ID }, true);
    public static final UniqueKey<JLaunchNumberRecord> LAUNCH_NUMBER_PK = Internal.createUniqueKey(JLaunchNumber.LAUNCH_NUMBER, DSL.name("launch_number_pk"), new TableField[] { JLaunchNumber.LAUNCH_NUMBER.ID }, true);
    public static final UniqueKey<JLaunchNumberRecord> UNQ_PROJECT_NAME = Internal.createUniqueKey(JLaunchNumber.LAUNCH_NUMBER, DSL.name("unq_project_name"), new TableField[] { JLaunchNumber.LAUNCH_NUMBER.PROJECT_ID, JLaunchNumber.LAUNCH_NUMBER.LAUNCH_NAME }, true);
    public static final UniqueKey<JLogRecord> LOG_PK = Internal.createUniqueKey(JLog.LOG, DSL.name("log_pk"), new TableField[] { JLog.LOG.ID }, true);
    public static final UniqueKey<JOauthRegistrationRecord> OAUTH_REGISTRATION_CLIENT_ID_KEY = Internal.createUniqueKey(JOauthRegistration.OAUTH_REGISTRATION, DSL.name("oauth_registration_client_id_key"), new TableField[] { JOauthRegistration.OAUTH_REGISTRATION.CLIENT_ID }, true);
    public static final UniqueKey<JOauthRegistrationRecord> OAUTH_REGISTRATION_PKEY = Internal.createUniqueKey(JOauthRegistration.OAUTH_REGISTRATION, DSL.name("oauth_registration_pkey"), new TableField[] { JOauthRegistration.OAUTH_REGISTRATION.ID }, true);
    public static final UniqueKey<JOauthRegistrationRestrictionRecord> OAUTH_REGISTRATION_RESTRICTION_PK = Internal.createUniqueKey(JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION, DSL.name("oauth_registration_restriction_pk"), new TableField[] { JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION.ID }, true);
    public static final UniqueKey<JOauthRegistrationRestrictionRecord> OAUTH_REGISTRATION_RESTRICTION_UNIQUE = Internal.createUniqueKey(JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION, DSL.name("oauth_registration_restriction_unique"), new TableField[] { JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION.TYPE, JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION.VALUE, JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION.OAUTH_REGISTRATION_FK }, true);
    public static final UniqueKey<JOauthRegistrationScopeRecord> OAUTH_REGISTRATION_SCOPE_PK = Internal.createUniqueKey(JOauthRegistrationScope.OAUTH_REGISTRATION_SCOPE, DSL.name("oauth_registration_scope_pk"), new TableField[] { JOauthRegistrationScope.OAUTH_REGISTRATION_SCOPE.ID }, true);
    public static final UniqueKey<JOauthRegistrationScopeRecord> OAUTH_REGISTRATION_SCOPE_UNIQUE = Internal.createUniqueKey(JOauthRegistrationScope.OAUTH_REGISTRATION_SCOPE, DSL.name("oauth_registration_scope_unique"), new TableField[] { JOauthRegistrationScope.OAUTH_REGISTRATION_SCOPE.SCOPE, JOauthRegistrationScope.OAUTH_REGISTRATION_SCOPE.OAUTH_REGISTRATION_FK }, true);
    public static final UniqueKey<JOrganizationRecord> ORGANIZATION_EXTERNAL_ID_KEY = Internal.createUniqueKey(JOrganization.ORGANIZATION, DSL.name("organization_external_id_key"), new TableField[] { JOrganization.ORGANIZATION.EXTERNAL_ID }, true);
    public static final UniqueKey<JOrganizationRecord> ORGANIZATION_NAME_KEY = Internal.createUniqueKey(JOrganization.ORGANIZATION, DSL.name("organization_name_key"), new TableField[] { JOrganization.ORGANIZATION.NAME }, true);
    public static final UniqueKey<JOrganizationRecord> ORGANIZATION_PKEY = Internal.createUniqueKey(JOrganization.ORGANIZATION, DSL.name("organization_pkey"), new TableField[] { JOrganization.ORGANIZATION.ID }, true);
    public static final UniqueKey<JOrganizationRecord> ORGANIZATION_SLUG_KEY = Internal.createUniqueKey(JOrganization.ORGANIZATION, DSL.name("organization_slug_key"), new TableField[] { JOrganization.ORGANIZATION.SLUG }, true);
    public static final UniqueKey<JOrganizationUserRecord> ORGANIZATION_USER_PK = Internal.createUniqueKey(JOrganizationUser.ORGANIZATION_USER, DSL.name("organization_user_pk"), new TableField[] { JOrganizationUser.ORGANIZATION_USER.USER_ID, JOrganizationUser.ORGANIZATION_USER.ORGANIZATION_ID }, true);
    public static final UniqueKey<JOwnedEntityRecord> SHAREABLE_PK = Internal.createUniqueKey(JOwnedEntity.OWNED_ENTITY, DSL.name("shareable_pk"), new TableField[] { JOwnedEntity.OWNED_ENTITY.ID }, true);
    public static final UniqueKey<JPatternTemplateRecord> PATTERN_TEMPLATE_PK = Internal.createUniqueKey(JPatternTemplate.PATTERN_TEMPLATE, DSL.name("pattern_template_pk"), new TableField[] { JPatternTemplate.PATTERN_TEMPLATE.ID }, true);
    public static final UniqueKey<JPatternTemplateRecord> UNQ_NAME_PROJECTID = Internal.createUniqueKey(JPatternTemplate.PATTERN_TEMPLATE, DSL.name("unq_name_projectid"), new TableField[] { JPatternTemplate.PATTERN_TEMPLATE.NAME, JPatternTemplate.PATTERN_TEMPLATE.PROJECT_ID }, true);
    public static final UniqueKey<JPatternTemplateTestItemRecord> PATTERN_ITEM_UNQ = Internal.createUniqueKey(JPatternTemplateTestItem.PATTERN_TEMPLATE_TEST_ITEM, DSL.name("pattern_item_unq"), new TableField[] { JPatternTemplateTestItem.PATTERN_TEMPLATE_TEST_ITEM.PATTERN_ID, JPatternTemplateTestItem.PATTERN_TEMPLATE_TEST_ITEM.ITEM_ID }, true);
    public static final UniqueKey<JProjectRecord> PROJECT_KEY_KEY = Internal.createUniqueKey(JProject.PROJECT, DSL.name("project_key_key"), new TableField[] { JProject.PROJECT.KEY }, true);
    public static final UniqueKey<JProjectRecord> PROJECT_PK = Internal.createUniqueKey(JProject.PROJECT, DSL.name("project_pk"), new TableField[] { JProject.PROJECT.ID }, true);
    public static final UniqueKey<JProjectAttributeRecord> UNIQUE_ATTRIBUTE_PER_PROJECT = Internal.createUniqueKey(JProjectAttribute.PROJECT_ATTRIBUTE, DSL.name("unique_attribute_per_project"), new TableField[] { JProjectAttribute.PROJECT_ATTRIBUTE.ATTRIBUTE_ID, JProjectAttribute.PROJECT_ATTRIBUTE.PROJECT_ID }, true);
    public static final UniqueKey<JProjectUserRecord> USERS_PROJECT_PK = Internal.createUniqueKey(JProjectUser.PROJECT_USER, DSL.name("users_project_pk"), new TableField[] { JProjectUser.PROJECT_USER.USER_ID, JProjectUser.PROJECT_USER.PROJECT_ID }, true);
    public static final UniqueKey<JRestorePasswordBidRecord> RESTORE_PASSWORD_BID_EMAIL_KEY = Internal.createUniqueKey(JRestorePasswordBid.RESTORE_PASSWORD_BID, DSL.name("restore_password_bid_email_key"), new TableField[] { JRestorePasswordBid.RESTORE_PASSWORD_BID.EMAIL }, true);
    public static final UniqueKey<JRestorePasswordBidRecord> RESTORE_PASSWORD_BID_PK = Internal.createUniqueKey(JRestorePasswordBid.RESTORE_PASSWORD_BID, DSL.name("restore_password_bid_pk"), new TableField[] { JRestorePasswordBid.RESTORE_PASSWORD_BID.UUID }, true);
    public static final UniqueKey<JSenderCaseRecord> SENDER_CASE_PK = Internal.createUniqueKey(JSenderCase.SENDER_CASE, DSL.name("sender_case_pk"), new TableField[] { JSenderCase.SENDER_CASE.ID }, true);
    public static final UniqueKey<JServerSettingsRecord> SERVER_SETTINGS_ID = Internal.createUniqueKey(JServerSettings.SERVER_SETTINGS, DSL.name("server_settings_id"), new TableField[] { JServerSettings.SERVER_SETTINGS.ID }, true);
    public static final UniqueKey<JServerSettingsRecord> SERVER_SETTINGS_KEY_KEY = Internal.createUniqueKey(JServerSettings.SERVER_SETTINGS, DSL.name("server_settings_key_key"), new TableField[] { JServerSettings.SERVER_SETTINGS.KEY }, true);
    public static final UniqueKey<JShedlockRecord> SHEDLOCK_PKEY = Internal.createUniqueKey(JShedlock.SHEDLOCK, DSL.name("shedlock_pkey"), new TableField[] { JShedlock.SHEDLOCK.NAME }, true);
    public static final UniqueKey<JStaleMaterializedViewRecord> STALE_MATERIALIZED_VIEW_NAME_KEY = Internal.createUniqueKey(JStaleMaterializedView.STALE_MATERIALIZED_VIEW, DSL.name("stale_materialized_view_name_key"), new TableField[] { JStaleMaterializedView.STALE_MATERIALIZED_VIEW.NAME }, true);
    public static final UniqueKey<JStaleMaterializedViewRecord> STALE_MATERIALIZED_VIEW_PKEY = Internal.createUniqueKey(JStaleMaterializedView.STALE_MATERIALIZED_VIEW, DSL.name("stale_materialized_view_pkey"), new TableField[] { JStaleMaterializedView.STALE_MATERIALIZED_VIEW.ID }, true);
    public static final UniqueKey<JStatisticsRecord> STATISTICS_PK = Internal.createUniqueKey(JStatistics.STATISTICS, DSL.name("statistics_pk"), new TableField[] { JStatistics.STATISTICS.S_ID }, true);
    public static final UniqueKey<JStatisticsRecord> UNIQUE_STATS_ITEM = Internal.createUniqueKey(JStatistics.STATISTICS, DSL.name("unique_stats_item"), new TableField[] { JStatistics.STATISTICS.STATISTICS_FIELD_ID, JStatistics.STATISTICS.ITEM_ID }, true);
    public static final UniqueKey<JStatisticsRecord> UNIQUE_STATS_LAUNCH = Internal.createUniqueKey(JStatistics.STATISTICS, DSL.name("unique_stats_launch"), new TableField[] { JStatistics.STATISTICS.STATISTICS_FIELD_ID, JStatistics.STATISTICS.LAUNCH_ID }, true);
    public static final UniqueKey<JStatisticsFieldRecord> STATISTICS_FIELD_NAME_KEY = Internal.createUniqueKey(JStatisticsField.STATISTICS_FIELD, DSL.name("statistics_field_name_key"), new TableField[] { JStatisticsField.STATISTICS_FIELD.NAME }, true);
    public static final UniqueKey<JStatisticsFieldRecord> STATISTICS_FIELD_PK = Internal.createUniqueKey(JStatisticsField.STATISTICS_FIELD, DSL.name("statistics_field_pk"), new TableField[] { JStatisticsField.STATISTICS_FIELD.SF_ID }, true);
    public static final UniqueKey<JTestItemRecord> TEST_ITEM_PK = Internal.createUniqueKey(JTestItem.TEST_ITEM, DSL.name("test_item_pk"), new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final UniqueKey<JTestItemRecord> TEST_ITEM_UUID_KEY = Internal.createUniqueKey(JTestItem.TEST_ITEM, DSL.name("test_item_uuid_key"), new TableField[] { JTestItem.TEST_ITEM.UUID }, true);
    public static final UniqueKey<JTestItemResultsRecord> TEST_ITEM_RESULTS_PK = Internal.createUniqueKey(JTestItemResults.TEST_ITEM_RESULTS, DSL.name("test_item_results_pk"), new TableField[] { JTestItemResults.TEST_ITEM_RESULTS.RESULT_ID }, true);
    public static final UniqueKey<JTicketRecord> TICKET_PK = Internal.createUniqueKey(JTicket.TICKET, DSL.name("ticket_pk"), new TableField[] { JTicket.TICKET.ID }, true);
    public static final UniqueKey<JUserCreationBidRecord> USER_CREATION_BID_PK = Internal.createUniqueKey(JUserCreationBid.USER_CREATION_BID, DSL.name("user_creation_bid_pk"), new TableField[] { JUserCreationBid.USER_CREATION_BID.UUID }, true);
    public static final UniqueKey<JUserPreferenceRecord> USER_PREFERENCE_PK = Internal.createUniqueKey(JUserPreference.USER_PREFERENCE, DSL.name("user_preference_pk"), new TableField[] { JUserPreference.USER_PREFERENCE.ID }, true);
    public static final UniqueKey<JUserPreferenceRecord> USER_PREFERENCE_UQ = Internal.createUniqueKey(JUserPreference.USER_PREFERENCE, DSL.name("user_preference_uq"), new TableField[] { JUserPreference.USER_PREFERENCE.PROJECT_ID, JUserPreference.USER_PREFERENCE.USER_ID, JUserPreference.USER_PREFERENCE.FILTER_ID }, true);
    public static final UniqueKey<JUsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(JUsers.USERS, DSL.name("users_email_key"), new TableField[] { JUsers.USERS.EMAIL }, true);
    public static final UniqueKey<JUsersRecord> USERS_LOGIN_KEY = Internal.createUniqueKey(JUsers.USERS, DSL.name("users_login_key"), new TableField[] { JUsers.USERS.LOGIN }, true);
    public static final UniqueKey<JUsersRecord> USERS_PK = Internal.createUniqueKey(JUsers.USERS, DSL.name("users_pk"), new TableField[] { JUsers.USERS.ID }, true);
    public static final UniqueKey<JWidgetRecord> WIDGET_PKEY = Internal.createUniqueKey(JWidget.WIDGET, DSL.name("widget_pkey"), new TableField[] { JWidget.WIDGET.ID }, true);
    public static final UniqueKey<JWidgetFilterRecord> WIDGET_FILTER_PK = Internal.createUniqueKey(JWidgetFilter.WIDGET_FILTER, DSL.name("widget_filter_pk"), new TableField[] { JWidgetFilter.WIDGET_FILTER.WIDGET_ID, JWidgetFilter.WIDGET_FILTER.FILTER_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<JActivityRecord, JOrganizationRecord> ACTIVITY__ACTIVITY_ORGANIZATION_ID_FKEY = Internal.createForeignKey(JActivity.ACTIVITY, DSL.name("activity_organization_id_fkey"), new TableField[] { JActivity.ACTIVITY.ORGANIZATION_ID }, Keys.ORGANIZATION_PKEY, new TableField[] { JOrganization.ORGANIZATION.ID }, true);
    public static final ForeignKey<JActivityRecord, JProjectRecord> ACTIVITY__ACTIVITY_PROJECT_ID_FKEY = Internal.createForeignKey(JActivity.ACTIVITY, DSL.name("activity_project_id_fkey"), new TableField[] { JActivity.ACTIVITY.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JApiKeysRecord, JUsersRecord> API_KEYS__API_KEYS_USER_ID_FKEY = Internal.createForeignKey(JApiKeys.API_KEYS, DSL.name("api_keys_user_id_fkey"), new TableField[] { JApiKeys.API_KEYS.USER_ID }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JContentFieldRecord, JWidgetRecord> CONTENT_FIELD__CONTENT_FIELD_ID_FKEY = Internal.createForeignKey(JContentField.CONTENT_FIELD, DSL.name("content_field_id_fkey"), new TableField[] { JContentField.CONTENT_FIELD.ID }, Keys.WIDGET_PKEY, new TableField[] { JWidget.WIDGET.ID }, true);
    public static final ForeignKey<JDashboardRecord, JOwnedEntityRecord> DASHBOARD__DASHBOARD_ID_FK = Internal.createForeignKey(JDashboard.DASHBOARD, DSL.name("dashboard_id_fk"), new TableField[] { JDashboard.DASHBOARD.ID }, Keys.SHAREABLE_PK, new TableField[] { JOwnedEntity.OWNED_ENTITY.ID }, true);
    public static final ForeignKey<JDashboardWidgetRecord, JDashboardRecord> DASHBOARD_WIDGET__DASHBOARD_WIDGET_DASHBOARD_ID_FKEY = Internal.createForeignKey(JDashboardWidget.DASHBOARD_WIDGET, DSL.name("dashboard_widget_dashboard_id_fkey"), new TableField[] { JDashboardWidget.DASHBOARD_WIDGET.DASHBOARD_ID }, Keys.DASHBOARD_PKEY, new TableField[] { JDashboard.DASHBOARD.ID }, true);
    public static final ForeignKey<JDashboardWidgetRecord, JWidgetRecord> DASHBOARD_WIDGET__DASHBOARD_WIDGET_WIDGET_ID_FKEY = Internal.createForeignKey(JDashboardWidget.DASHBOARD_WIDGET, DSL.name("dashboard_widget_widget_id_fkey"), new TableField[] { JDashboardWidget.DASHBOARD_WIDGET.WIDGET_ID }, Keys.WIDGET_PKEY, new TableField[] { JWidget.WIDGET.ID }, true);
    public static final ForeignKey<JFilterRecord, JOwnedEntityRecord> FILTER__FILTER_ID_FK = Internal.createForeignKey(JFilter.FILTER, DSL.name("filter_id_fk"), new TableField[] { JFilter.FILTER.ID }, Keys.SHAREABLE_PK, new TableField[] { JOwnedEntity.OWNED_ENTITY.ID }, true);
    public static final ForeignKey<JFilterConditionRecord, JFilterRecord> FILTER_CONDITION__FILTER_CONDITION_FILTER_ID_FKEY = Internal.createForeignKey(JFilterCondition.FILTER_CONDITION, DSL.name("filter_condition_filter_id_fkey"), new TableField[] { JFilterCondition.FILTER_CONDITION.FILTER_ID }, Keys.FILTER_PKEY, new TableField[] { JFilter.FILTER.ID }, true);
    public static final ForeignKey<JFilterSortRecord, JFilterRecord> FILTER_SORT__FILTER_SORT_FILTER_ID_FKEY = Internal.createForeignKey(JFilterSort.FILTER_SORT, DSL.name("filter_sort_filter_id_fkey"), new TableField[] { JFilterSort.FILTER_SORT.FILTER_ID }, Keys.FILTER_PKEY, new TableField[] { JFilter.FILTER.ID }, true);
    public static final ForeignKey<JGroupsRecord, JUsersRecord> GROUPS__GROUPS_CREATED_BY_FKEY = Internal.createForeignKey(JGroups.GROUPS, DSL.name("groups_created_by_fkey"), new TableField[] { JGroups.GROUPS.CREATED_BY }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JGroupsRecord, JOrganizationRecord> GROUPS__GROUPS_ORG_ID_FKEY = Internal.createForeignKey(JGroups.GROUPS, DSL.name("groups_org_id_fkey"), new TableField[] { JGroups.GROUPS.ORG_ID }, Keys.ORGANIZATION_PKEY, new TableField[] { JOrganization.ORGANIZATION.ID }, true);
    public static final ForeignKey<JGroupsProjectsRecord, JGroupsRecord> GROUPS_PROJECTS__GROUPS_PROJECTS_GROUP_ID_FKEY = Internal.createForeignKey(JGroupsProjects.GROUPS_PROJECTS, DSL.name("groups_projects_group_id_fkey"), new TableField[] { JGroupsProjects.GROUPS_PROJECTS.GROUP_ID }, Keys.GROUPS_PKEY, new TableField[] { JGroups.GROUPS.ID }, true);
    public static final ForeignKey<JGroupsProjectsRecord, JProjectRecord> GROUPS_PROJECTS__GROUPS_PROJECTS_PROJECT_ID_FKEY = Internal.createForeignKey(JGroupsProjects.GROUPS_PROJECTS, DSL.name("groups_projects_project_id_fkey"), new TableField[] { JGroupsProjects.GROUPS_PROJECTS.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JGroupsUsersRecord, JGroupsRecord> GROUPS_USERS__GROUPS_USERS_GROUP_ID_FKEY = Internal.createForeignKey(JGroupsUsers.GROUPS_USERS, DSL.name("groups_users_group_id_fkey"), new TableField[] { JGroupsUsers.GROUPS_USERS.GROUP_ID }, Keys.GROUPS_PKEY, new TableField[] { JGroups.GROUPS.ID }, true);
    public static final ForeignKey<JGroupsUsersRecord, JUsersRecord> GROUPS_USERS__GROUPS_USERS_USER_ID_FKEY = Internal.createForeignKey(JGroupsUsers.GROUPS_USERS, DSL.name("groups_users_user_id_fkey"), new TableField[] { JGroupsUsers.GROUPS_USERS.USER_ID }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JIntegrationRecord, JProjectRecord> INTEGRATION__INTEGRATION_PROJECT_ID_FKEY = Internal.createForeignKey(JIntegration.INTEGRATION, DSL.name("integration_project_id_fkey"), new TableField[] { JIntegration.INTEGRATION.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JIntegrationRecord, JIntegrationTypeRecord> INTEGRATION__INTEGRATION_TYPE_FKEY = Internal.createForeignKey(JIntegration.INTEGRATION, DSL.name("integration_type_fkey"), new TableField[] { JIntegration.INTEGRATION.TYPE }, Keys.INTEGRATION_TYPE_PK, new TableField[] { JIntegrationType.INTEGRATION_TYPE.ID }, true);
    public static final ForeignKey<JIssueRecord, JTestItemResultsRecord> ISSUE__ISSUE_ISSUE_ID_FKEY = Internal.createForeignKey(JIssue.ISSUE, DSL.name("issue_issue_id_fkey"), new TableField[] { JIssue.ISSUE.ISSUE_ID }, Keys.TEST_ITEM_RESULTS_PK, new TableField[] { JTestItemResults.TEST_ITEM_RESULTS.RESULT_ID }, true);
    public static final ForeignKey<JIssueRecord, JIssueTypeRecord> ISSUE__ISSUE_ISSUE_TYPE_FKEY = Internal.createForeignKey(JIssue.ISSUE, DSL.name("issue_issue_type_fkey"), new TableField[] { JIssue.ISSUE.ISSUE_TYPE }, Keys.ISSUE_TYPE_PK, new TableField[] { JIssueType.ISSUE_TYPE.ID }, true);
    public static final ForeignKey<JIssueTicketRecord, JIssueRecord> ISSUE_TICKET__ISSUE_TICKET_ISSUE_ID_FKEY = Internal.createForeignKey(JIssueTicket.ISSUE_TICKET, DSL.name("issue_ticket_issue_id_fkey"), new TableField[] { JIssueTicket.ISSUE_TICKET.ISSUE_ID }, Keys.ISSUE_PK, new TableField[] { JIssue.ISSUE.ISSUE_ID }, true);
    public static final ForeignKey<JIssueTicketRecord, JTicketRecord> ISSUE_TICKET__ISSUE_TICKET_TICKET_ID_FKEY = Internal.createForeignKey(JIssueTicket.ISSUE_TICKET, DSL.name("issue_ticket_ticket_id_fkey"), new TableField[] { JIssueTicket.ISSUE_TICKET.TICKET_ID }, Keys.TICKET_PK, new TableField[] { JTicket.TICKET.ID }, true);
    public static final ForeignKey<JIssueTypeRecord, JIssueGroupRecord> ISSUE_TYPE__ISSUE_TYPE_ISSUE_GROUP_ID_FKEY = Internal.createForeignKey(JIssueType.ISSUE_TYPE, DSL.name("issue_type_issue_group_id_fkey"), new TableField[] { JIssueType.ISSUE_TYPE.ISSUE_GROUP_ID }, Keys.ISSUE_GROUP_PK, new TableField[] { JIssueGroup.ISSUE_GROUP.ISSUE_GROUP_ID }, true);
    public static final ForeignKey<JIssueTypeProjectRecord, JIssueTypeRecord> ISSUE_TYPE_PROJECT__ISSUE_TYPE_PROJECT_ISSUE_TYPE_ID_FKEY = Internal.createForeignKey(JIssueTypeProject.ISSUE_TYPE_PROJECT, DSL.name("issue_type_project_issue_type_id_fkey"), new TableField[] { JIssueTypeProject.ISSUE_TYPE_PROJECT.ISSUE_TYPE_ID }, Keys.ISSUE_TYPE_PK, new TableField[] { JIssueType.ISSUE_TYPE.ID }, true);
    public static final ForeignKey<JIssueTypeProjectRecord, JProjectRecord> ISSUE_TYPE_PROJECT__ISSUE_TYPE_PROJECT_PROJECT_ID_FKEY = Internal.createForeignKey(JIssueTypeProject.ISSUE_TYPE_PROJECT, DSL.name("issue_type_project_project_id_fkey"), new TableField[] { JIssueTypeProject.ISSUE_TYPE_PROJECT.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JItemAttributeRecord, JTestItemRecord> ITEM_ATTRIBUTE__ITEM_ATTRIBUTE_ITEM_ID_FKEY = Internal.createForeignKey(JItemAttribute.ITEM_ATTRIBUTE, DSL.name("item_attribute_item_id_fkey"), new TableField[] { JItemAttribute.ITEM_ATTRIBUTE.ITEM_ID }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JItemAttributeRecord, JLaunchRecord> ITEM_ATTRIBUTE__ITEM_ATTRIBUTE_LAUNCH_ID_FKEY = Internal.createForeignKey(JItemAttribute.ITEM_ATTRIBUTE, DSL.name("item_attribute_launch_id_fkey"), new TableField[] { JItemAttribute.ITEM_ATTRIBUTE.LAUNCH_ID }, Keys.LAUNCH_PK, new TableField[] { JLaunch.LAUNCH.ID }, true);
    public static final ForeignKey<JLaunchRecord, JProjectRecord> LAUNCH__LAUNCH_PROJECT_ID_FKEY = Internal.createForeignKey(JLaunch.LAUNCH, DSL.name("launch_project_id_fkey"), new TableField[] { JLaunch.LAUNCH.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JLaunchRecord, JUsersRecord> LAUNCH__LAUNCH_USER_ID_FKEY = Internal.createForeignKey(JLaunch.LAUNCH, DSL.name("launch_user_id_fkey"), new TableField[] { JLaunch.LAUNCH.USER_ID }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JLaunchAttributeRulesRecord, JSenderCaseRecord> LAUNCH_ATTRIBUTE_RULES__LAUNCH_ATTRIBUTE_RULES_SENDER_CASE_ID_FKEY = Internal.createForeignKey(JLaunchAttributeRules.LAUNCH_ATTRIBUTE_RULES, DSL.name("launch_attribute_rules_sender_case_id_fkey"), new TableField[] { JLaunchAttributeRules.LAUNCH_ATTRIBUTE_RULES.SENDER_CASE_ID }, Keys.SENDER_CASE_PK, new TableField[] { JSenderCase.SENDER_CASE.ID }, true);
    public static final ForeignKey<JLaunchNamesRecord, JSenderCaseRecord> LAUNCH_NAMES__LAUNCH_NAMES_SENDER_CASE_ID_FKEY = Internal.createForeignKey(JLaunchNames.LAUNCH_NAMES, DSL.name("launch_names_sender_case_id_fkey"), new TableField[] { JLaunchNames.LAUNCH_NAMES.SENDER_CASE_ID }, Keys.SENDER_CASE_PK, new TableField[] { JSenderCase.SENDER_CASE.ID }, true);
    public static final ForeignKey<JLaunchNumberRecord, JProjectRecord> LAUNCH_NUMBER__LAUNCH_NUMBER_PROJECT_ID_FKEY = Internal.createForeignKey(JLaunchNumber.LAUNCH_NUMBER, DSL.name("launch_number_project_id_fkey"), new TableField[] { JLaunchNumber.LAUNCH_NUMBER.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JLogRecord, JAttachmentRecord> LOG__LOG_ATTACHMENT_ID_FKEY = Internal.createForeignKey(JLog.LOG, DSL.name("log_attachment_id_fkey"), new TableField[] { JLog.LOG.ATTACHMENT_ID }, Keys.ATTACHMENT_PK, new TableField[] { JAttachment.ATTACHMENT.ID }, true);
    public static final ForeignKey<JLogRecord, JTestItemRecord> LOG__LOG_ITEM_ID_FKEY = Internal.createForeignKey(JLog.LOG, DSL.name("log_item_id_fkey"), new TableField[] { JLog.LOG.ITEM_ID }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JLogRecord, JLaunchRecord> LOG__LOG_LAUNCH_ID_FKEY = Internal.createForeignKey(JLog.LOG, DSL.name("log_launch_id_fkey"), new TableField[] { JLog.LOG.LAUNCH_ID }, Keys.LAUNCH_PK, new TableField[] { JLaunch.LAUNCH.ID }, true);
    public static final ForeignKey<JOauthRegistrationRestrictionRecord, JOauthRegistrationRecord> OAUTH_REGISTRATION_RESTRICTION__OAUTH_REGISTRATION_RESTRICTION_OAUTH_REGISTRATION_FK_FKEY = Internal.createForeignKey(JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION, DSL.name("oauth_registration_restriction_oauth_registration_fk_fkey"), new TableField[] { JOauthRegistrationRestriction.OAUTH_REGISTRATION_RESTRICTION.OAUTH_REGISTRATION_FK }, Keys.OAUTH_REGISTRATION_PKEY, new TableField[] { JOauthRegistration.OAUTH_REGISTRATION.ID }, true);
    public static final ForeignKey<JOauthRegistrationScopeRecord, JOauthRegistrationRecord> OAUTH_REGISTRATION_SCOPE__OAUTH_REGISTRATION_SCOPE_OAUTH_REGISTRATION_FK_FKEY = Internal.createForeignKey(JOauthRegistrationScope.OAUTH_REGISTRATION_SCOPE, DSL.name("oauth_registration_scope_oauth_registration_fk_fkey"), new TableField[] { JOauthRegistrationScope.OAUTH_REGISTRATION_SCOPE.OAUTH_REGISTRATION_FK }, Keys.OAUTH_REGISTRATION_PKEY, new TableField[] { JOauthRegistration.OAUTH_REGISTRATION.ID }, true);
    public static final ForeignKey<JOrganizationUserRecord, JOrganizationRecord> ORGANIZATION_USER__ORGANIZATION_USER_ORGANIZATION_ID_FKEY = Internal.createForeignKey(JOrganizationUser.ORGANIZATION_USER, DSL.name("organization_user_organization_id_fkey"), new TableField[] { JOrganizationUser.ORGANIZATION_USER.ORGANIZATION_ID }, Keys.ORGANIZATION_PKEY, new TableField[] { JOrganization.ORGANIZATION.ID }, true);
    public static final ForeignKey<JOrganizationUserRecord, JUsersRecord> ORGANIZATION_USER__ORGANIZATION_USER_USER_ID_FKEY = Internal.createForeignKey(JOrganizationUser.ORGANIZATION_USER, DSL.name("organization_user_user_id_fkey"), new TableField[] { JOrganizationUser.ORGANIZATION_USER.USER_ID }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JOwnedEntityRecord, JProjectRecord> OWNED_ENTITY__SHAREABLE_ENTITY_PROJECT_ID_FKEY = Internal.createForeignKey(JOwnedEntity.OWNED_ENTITY, DSL.name("shareable_entity_project_id_fkey"), new TableField[] { JOwnedEntity.OWNED_ENTITY.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JParameterRecord, JTestItemRecord> PARAMETER__PARAMETER_ITEM_ID_FKEY = Internal.createForeignKey(JParameter.PARAMETER, DSL.name("parameter_item_id_fkey"), new TableField[] { JParameter.PARAMETER.ITEM_ID }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JPatternTemplateRecord, JProjectRecord> PATTERN_TEMPLATE__PATTERN_TEMPLATE_PROJECT_ID_FKEY = Internal.createForeignKey(JPatternTemplate.PATTERN_TEMPLATE, DSL.name("pattern_template_project_id_fkey"), new TableField[] { JPatternTemplate.PATTERN_TEMPLATE.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JPatternTemplateTestItemRecord, JTestItemRecord> PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_ITEM_ID_FKEY = Internal.createForeignKey(JPatternTemplateTestItem.PATTERN_TEMPLATE_TEST_ITEM, DSL.name("pattern_template_test_item_item_id_fkey"), new TableField[] { JPatternTemplateTestItem.PATTERN_TEMPLATE_TEST_ITEM.ITEM_ID }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JPatternTemplateTestItemRecord, JPatternTemplateRecord> PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_PATTERN_ID_FKEY = Internal.createForeignKey(JPatternTemplateTestItem.PATTERN_TEMPLATE_TEST_ITEM, DSL.name("pattern_template_test_item_pattern_id_fkey"), new TableField[] { JPatternTemplateTestItem.PATTERN_TEMPLATE_TEST_ITEM.PATTERN_ID }, Keys.PATTERN_TEMPLATE_PK, new TableField[] { JPatternTemplate.PATTERN_TEMPLATE.ID }, true);
    public static final ForeignKey<JProjectRecord, JOrganizationRecord> PROJECT__FK_PROJECT_ORGANIZATION = Internal.createForeignKey(JProject.PROJECT, DSL.name("fk_project_organization"), new TableField[] { JProject.PROJECT.ORGANIZATION_ID }, Keys.ORGANIZATION_PKEY, new TableField[] { JOrganization.ORGANIZATION.ID }, true);
    public static final ForeignKey<JProjectAttributeRecord, JAttributeRecord> PROJECT_ATTRIBUTE__PROJECT_ATTRIBUTE_ATTRIBUTE_ID_FKEY = Internal.createForeignKey(JProjectAttribute.PROJECT_ATTRIBUTE, DSL.name("project_attribute_attribute_id_fkey"), new TableField[] { JProjectAttribute.PROJECT_ATTRIBUTE.ATTRIBUTE_ID }, Keys.ATTRIBUTE_PK, new TableField[] { JAttribute.ATTRIBUTE.ID }, true);
    public static final ForeignKey<JProjectAttributeRecord, JProjectRecord> PROJECT_ATTRIBUTE__PROJECT_ATTRIBUTE_PROJECT_ID_FKEY = Internal.createForeignKey(JProjectAttribute.PROJECT_ATTRIBUTE, DSL.name("project_attribute_project_id_fkey"), new TableField[] { JProjectAttribute.PROJECT_ATTRIBUTE.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JProjectUserRecord, JProjectRecord> PROJECT_USER__PROJECT_USER_PROJECT_ID_FKEY = Internal.createForeignKey(JProjectUser.PROJECT_USER, DSL.name("project_user_project_id_fkey"), new TableField[] { JProjectUser.PROJECT_USER.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JProjectUserRecord, JUsersRecord> PROJECT_USER__PROJECT_USER_USER_ID_FKEY = Internal.createForeignKey(JProjectUser.PROJECT_USER, DSL.name("project_user_user_id_fkey"), new TableField[] { JProjectUser.PROJECT_USER.USER_ID }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JRecipientsRecord, JSenderCaseRecord> RECIPIENTS__RECIPIENTS_SENDER_CASE_ID_FKEY = Internal.createForeignKey(JRecipients.RECIPIENTS, DSL.name("recipients_sender_case_id_fkey"), new TableField[] { JRecipients.RECIPIENTS.SENDER_CASE_ID }, Keys.SENDER_CASE_PK, new TableField[] { JSenderCase.SENDER_CASE.ID }, true);
    public static final ForeignKey<JSenderCaseRecord, JProjectRecord> SENDER_CASE__SENDER_CASE_PROJECT_ID_FKEY = Internal.createForeignKey(JSenderCase.SENDER_CASE, DSL.name("sender_case_project_id_fkey"), new TableField[] { JSenderCase.SENDER_CASE.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JStatisticsRecord, JTestItemRecord> STATISTICS__STATISTICS_ITEM_ID_FKEY = Internal.createForeignKey(JStatistics.STATISTICS, DSL.name("statistics_item_id_fkey"), new TableField[] { JStatistics.STATISTICS.ITEM_ID }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JStatisticsRecord, JLaunchRecord> STATISTICS__STATISTICS_LAUNCH_ID_FKEY = Internal.createForeignKey(JStatistics.STATISTICS, DSL.name("statistics_launch_id_fkey"), new TableField[] { JStatistics.STATISTICS.LAUNCH_ID }, Keys.LAUNCH_PK, new TableField[] { JLaunch.LAUNCH.ID }, true);
    public static final ForeignKey<JStatisticsRecord, JStatisticsFieldRecord> STATISTICS__STATISTICS_STATISTICS_FIELD_ID_FKEY = Internal.createForeignKey(JStatistics.STATISTICS, DSL.name("statistics_statistics_field_id_fkey"), new TableField[] { JStatistics.STATISTICS.STATISTICS_FIELD_ID }, Keys.STATISTICS_FIELD_PK, new TableField[] { JStatisticsField.STATISTICS_FIELD.SF_ID }, true);
    public static final ForeignKey<JTestItemRecord, JLaunchRecord> TEST_ITEM__TEST_ITEM_LAUNCH_ID_FKEY = Internal.createForeignKey(JTestItem.TEST_ITEM, DSL.name("test_item_launch_id_fkey"), new TableField[] { JTestItem.TEST_ITEM.LAUNCH_ID }, Keys.LAUNCH_PK, new TableField[] { JLaunch.LAUNCH.ID }, true);
    public static final ForeignKey<JTestItemRecord, JTestItemRecord> TEST_ITEM__TEST_ITEM_PARENT_ID_FKEY = Internal.createForeignKey(JTestItem.TEST_ITEM, DSL.name("test_item_parent_id_fkey"), new TableField[] { JTestItem.TEST_ITEM.PARENT_ID }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JTestItemRecord, JTestItemRecord> TEST_ITEM__TEST_ITEM_RETRY_OF_FKEY = Internal.createForeignKey(JTestItem.TEST_ITEM, DSL.name("test_item_retry_of_fkey"), new TableField[] { JTestItem.TEST_ITEM.RETRY_OF }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JTestItemResultsRecord, JTestItemRecord> TEST_ITEM_RESULTS__TEST_ITEM_RESULTS_RESULT_ID_FKEY = Internal.createForeignKey(JTestItemResults.TEST_ITEM_RESULTS, DSL.name("test_item_results_result_id_fkey"), new TableField[] { JTestItemResults.TEST_ITEM_RESULTS.RESULT_ID }, Keys.TEST_ITEM_PK, new TableField[] { JTestItem.TEST_ITEM.ITEM_ID }, true);
    public static final ForeignKey<JUserCreationBidRecord, JUsersRecord> USER_CREATION_BID__USER_CREATION_BID_INVITING_USER_ID_FKEY = Internal.createForeignKey(JUserCreationBid.USER_CREATION_BID, DSL.name("user_creation_bid_inviting_user_id_fkey"), new TableField[] { JUserCreationBid.USER_CREATION_BID.INVITING_USER_ID }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JUserPreferenceRecord, JFilterRecord> USER_PREFERENCE__USER_PREFERENCE_FILTER_ID_FKEY = Internal.createForeignKey(JUserPreference.USER_PREFERENCE, DSL.name("user_preference_filter_id_fkey"), new TableField[] { JUserPreference.USER_PREFERENCE.FILTER_ID }, Keys.FILTER_PKEY, new TableField[] { JFilter.FILTER.ID }, true);
    public static final ForeignKey<JUserPreferenceRecord, JProjectRecord> USER_PREFERENCE__USER_PREFERENCE_PROJECT_ID_FKEY = Internal.createForeignKey(JUserPreference.USER_PREFERENCE, DSL.name("user_preference_project_id_fkey"), new TableField[] { JUserPreference.USER_PREFERENCE.PROJECT_ID }, Keys.PROJECT_PK, new TableField[] { JProject.PROJECT.ID }, true);
    public static final ForeignKey<JUserPreferenceRecord, JUsersRecord> USER_PREFERENCE__USER_PREFERENCE_USER_ID_FKEY = Internal.createForeignKey(JUserPreference.USER_PREFERENCE, DSL.name("user_preference_user_id_fkey"), new TableField[] { JUserPreference.USER_PREFERENCE.USER_ID }, Keys.USERS_PK, new TableField[] { JUsers.USERS.ID }, true);
    public static final ForeignKey<JWidgetRecord, JOwnedEntityRecord> WIDGET__WIDGET_ID_FK = Internal.createForeignKey(JWidget.WIDGET, DSL.name("widget_id_fk"), new TableField[] { JWidget.WIDGET.ID }, Keys.SHAREABLE_PK, new TableField[] { JOwnedEntity.OWNED_ENTITY.ID }, true);
    public static final ForeignKey<JWidgetFilterRecord, JFilterRecord> WIDGET_FILTER__WIDGET_FILTER_FILTER_ID_FKEY = Internal.createForeignKey(JWidgetFilter.WIDGET_FILTER, DSL.name("widget_filter_filter_id_fkey"), new TableField[] { JWidgetFilter.WIDGET_FILTER.FILTER_ID }, Keys.FILTER_PKEY, new TableField[] { JFilter.FILTER.ID }, true);
    public static final ForeignKey<JWidgetFilterRecord, JWidgetRecord> WIDGET_FILTER__WIDGET_FILTER_WIDGET_ID_FKEY = Internal.createForeignKey(JWidgetFilter.WIDGET_FILTER, DSL.name("widget_filter_widget_id_fkey"), new TableField[] { JWidgetFilter.WIDGET_FILTER.WIDGET_ID }, Keys.WIDGET_PKEY, new TableField[] { JWidget.WIDGET.ID }, true);
}
