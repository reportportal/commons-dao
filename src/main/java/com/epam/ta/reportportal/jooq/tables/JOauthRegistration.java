/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JOauthRegistrationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JOauthRegistration extends TableImpl<JOauthRegistrationRecord> {

    private static final long serialVersionUID = -982956746;

    /**
     * The reference instance of <code>public.oauth_registration</code>
     */
    public static final JOauthRegistration OAUTH_REGISTRATION = new JOauthRegistration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOauthRegistrationRecord> getRecordType() {
        return JOauthRegistrationRecord.class;
    }

    /**
     * The column <code>public.oauth_registration.id</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.oauth_registration.client_id</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> CLIENT_ID = createField(DSL.name("client_id"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.oauth_registration.client_secret</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> CLIENT_SECRET = createField(DSL.name("client_secret"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.oauth_registration.client_auth_method</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> CLIENT_AUTH_METHOD = createField(DSL.name("client_auth_method"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.oauth_registration.auth_grant_type</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> AUTH_GRANT_TYPE = createField(DSL.name("auth_grant_type"), org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.oauth_registration.redirect_uri_template</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> REDIRECT_URI_TEMPLATE = createField(DSL.name("redirect_uri_template"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.oauth_registration.authorization_uri</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> AUTHORIZATION_URI = createField(DSL.name("authorization_uri"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.oauth_registration.token_uri</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> TOKEN_URI = createField(DSL.name("token_uri"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.oauth_registration.user_info_endpoint_uri</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> USER_INFO_ENDPOINT_URI = createField(DSL.name("user_info_endpoint_uri"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.oauth_registration.user_info_endpoint_name_attr</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> USER_INFO_ENDPOINT_NAME_ATTR = createField(DSL.name("user_info_endpoint_name_attr"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.oauth_registration.jwk_set_uri</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> JWK_SET_URI = createField(DSL.name("jwk_set_uri"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.oauth_registration.client_name</code>.
     */
    public final TableField<JOauthRegistrationRecord, String> CLIENT_NAME = createField(DSL.name("client_name"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>public.oauth_registration</code> table reference
     */
    public JOauthRegistration() {
        this(DSL.name("oauth_registration"), null);
    }

    /**
     * Create an aliased <code>public.oauth_registration</code> table reference
     */
    public JOauthRegistration(String alias) {
        this(DSL.name(alias), OAUTH_REGISTRATION);
    }

    /**
     * Create an aliased <code>public.oauth_registration</code> table reference
     */
    public JOauthRegistration(Name alias) {
        this(alias, OAUTH_REGISTRATION);
    }

    private JOauthRegistration(Name alias, Table<JOauthRegistrationRecord> aliased) {
        this(alias, aliased, null);
    }

    private JOauthRegistration(Name alias, Table<JOauthRegistrationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JOauthRegistration(Table<O> child, ForeignKey<O, JOauthRegistrationRecord> key) {
        super(child, key, OAUTH_REGISTRATION);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OAUTH_REGISTRATION_CLIENT_ID_KEY, Indexes.OAUTH_REGISTRATION_PKEY);
    }

    @Override
    public UniqueKey<JOauthRegistrationRecord> getPrimaryKey() {
        return Keys.OAUTH_REGISTRATION_PKEY;
    }

    @Override
    public List<UniqueKey<JOauthRegistrationRecord>> getKeys() {
        return Arrays.<UniqueKey<JOauthRegistrationRecord>>asList(Keys.OAUTH_REGISTRATION_PKEY, Keys.OAUTH_REGISTRATION_CLIENT_ID_KEY);
    }

    @Override
    public JOauthRegistration as(String alias) {
        return new JOauthRegistration(DSL.name(alias), this);
    }

    @Override
    public JOauthRegistration as(Name alias) {
        return new JOauthRegistration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOauthRegistration rename(String name) {
        return new JOauthRegistration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOauthRegistration rename(Name name) {
        return new JOauthRegistration(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
