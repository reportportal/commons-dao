/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JRecipientsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JRecipients extends TableImpl<JRecipientsRecord> {

    private static final long serialVersionUID = -1950909017;

    /**
     * The reference instance of <code>public.recipients</code>
     */
    public static final JRecipients RECIPIENTS = new JRecipients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JRecipientsRecord> getRecordType() {
        return JRecipientsRecord.class;
    }

    /**
     * The column <code>public.recipients.sender_case_id</code>.
     */
    public final TableField<JRecipientsRecord, Long> SENDER_CASE_ID = createField("sender_case_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.recipients.recipient</code>.
     */
    public final TableField<JRecipientsRecord, String> RECIPIENT = createField("recipient", org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * Create a <code>public.recipients</code> table reference
     */
    public JRecipients() {
        this(DSL.name("recipients"), null);
    }

    /**
     * Create an aliased <code>public.recipients</code> table reference
     */
    public JRecipients(String alias) {
        this(DSL.name(alias), RECIPIENTS);
    }

    /**
     * Create an aliased <code>public.recipients</code> table reference
     */
    public JRecipients(Name alias) {
        this(alias, RECIPIENTS);
    }

    private JRecipients(Name alias, Table<JRecipientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JRecipients(Name alias, Table<JRecipientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JRecipients(Table<O> child, ForeignKey<O, JRecipientsRecord> key) {
        super(child, key, RECIPIENTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RCPNT_SEND_CASE_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JRecipientsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JRecipientsRecord, ?>>asList(Keys.RECIPIENTS__RECIPIENTS_SENDER_CASE_ID_FKEY);
    }

    public JSenderCase senderCase() {
        return new JSenderCase(this, Keys.RECIPIENTS__RECIPIENTS_SENDER_CASE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JRecipients as(String alias) {
        return new JRecipients(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JRecipients as(Name alias) {
        return new JRecipients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JRecipients rename(String name) {
        return new JRecipients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JRecipients rename(Name name) {
        return new JRecipients(name, null);
    }
}
