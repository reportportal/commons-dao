/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JIssue.JIssuePath;
import com.epam.ta.reportportal.jooq.tables.JIssueGroup.JIssueGroupPath;
import com.epam.ta.reportportal.jooq.tables.JIssueTypeProject.JIssueTypeProjectPath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.records.JIssueTypeRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JIssueType extends TableImpl<JIssueTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.issue_type</code>
     */
    public static final JIssueType ISSUE_TYPE = new JIssueType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JIssueTypeRecord> getRecordType() {
        return JIssueTypeRecord.class;
    }

    /**
     * The column <code>public.issue_type.id</code>.
     */
    public final TableField<JIssueTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.issue_type.issue_group_id</code>.
     */
    public final TableField<JIssueTypeRecord, Short> ISSUE_GROUP_ID = createField(DSL.name("issue_group_id"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.issue_type.locator</code>.
     */
    public final TableField<JIssueTypeRecord, String> LOCATOR = createField(DSL.name("locator"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.issue_type.issue_name</code>.
     */
    public final TableField<JIssueTypeRecord, String> ISSUE_NAME = createField(DSL.name("issue_name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.issue_type.abbreviation</code>.
     */
    public final TableField<JIssueTypeRecord, String> ABBREVIATION = createField(DSL.name("abbreviation"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.issue_type.hex_color</code>.
     */
    public final TableField<JIssueTypeRecord, String> HEX_COLOR = createField(DSL.name("hex_color"), SQLDataType.VARCHAR(7).nullable(false), this, "");

    private JIssueType(Name alias, Table<JIssueTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JIssueType(Name alias, Table<JIssueTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.issue_type</code> table reference
     */
    public JIssueType(String alias) {
        this(DSL.name(alias), ISSUE_TYPE);
    }

    /**
     * Create an aliased <code>public.issue_type</code> table reference
     */
    public JIssueType(Name alias) {
        this(alias, ISSUE_TYPE);
    }

    /**
     * Create a <code>public.issue_type</code> table reference
     */
    public JIssueType() {
        this(DSL.name("issue_type"), null);
    }

    public <O extends Record> JIssueType(Table<O> path, ForeignKey<O, JIssueTypeRecord> childPath, InverseForeignKey<O, JIssueTypeRecord> parentPath) {
        super(path, childPath, parentPath, ISSUE_TYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JIssueTypePath extends JIssueType implements Path<JIssueTypeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JIssueTypePath(Table<O> path, ForeignKey<O, JIssueTypeRecord> childPath, InverseForeignKey<O, JIssueTypeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JIssueTypePath(Name alias, Table<JIssueTypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JIssueTypePath as(String alias) {
            return new JIssueTypePath(DSL.name(alias), this);
        }

        @Override
        public JIssueTypePath as(Name alias) {
            return new JIssueTypePath(alias, this);
        }

        @Override
        public JIssueTypePath as(Table<?> alias) {
            return new JIssueTypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ISSUE_TYPE_GROUP_IDX);
    }

    @Override
    public Identity<JIssueTypeRecord, Long> getIdentity() {
        return (Identity<JIssueTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JIssueTypeRecord> getPrimaryKey() {
        return Keys.ISSUE_TYPE_PK;
    }

    @Override
    public List<UniqueKey<JIssueTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ISSUE_TYPE_LOCATOR_KEY);
    }

    @Override
    public List<ForeignKey<JIssueTypeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ISSUE_TYPE__ISSUE_TYPE_ISSUE_GROUP_ID_FKEY);
    }

    private transient JIssueGroupPath _issueGroup;

    /**
     * Get the implicit join path to the <code>public.issue_group</code> table.
     */
    public JIssueGroupPath issueGroup() {
        if (_issueGroup == null)
            _issueGroup = new JIssueGroupPath(this, Keys.ISSUE_TYPE__ISSUE_TYPE_ISSUE_GROUP_ID_FKEY, null);

        return _issueGroup;
    }

    private transient JIssuePath _issue;

    /**
     * Get the implicit to-many join path to the <code>public.issue</code> table
     */
    public JIssuePath issue() {
        if (_issue == null)
            _issue = new JIssuePath(this, null, Keys.ISSUE__ISSUE_ISSUE_TYPE_FKEY.getInverseKey());

        return _issue;
    }

    private transient JIssueTypeProjectPath _issueTypeProject;

    /**
     * Get the implicit to-many join path to the
     * <code>public.issue_type_project</code> table
     */
    public JIssueTypeProjectPath issueTypeProject() {
        if (_issueTypeProject == null)
            _issueTypeProject = new JIssueTypeProjectPath(this, null, Keys.ISSUE_TYPE_PROJECT__ISSUE_TYPE_PROJECT_ISSUE_TYPE_ID_FKEY.getInverseKey());

        return _issueTypeProject;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.project</code> table
     */
    public JProjectPath project() {
        return issueTypeProject().project();
    }

    @Override
    public JIssueType as(String alias) {
        return new JIssueType(DSL.name(alias), this);
    }

    @Override
    public JIssueType as(Name alias) {
        return new JIssueType(alias, this);
    }

    @Override
    public JIssueType as(Table<?> alias) {
        return new JIssueType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueType rename(String name) {
        return new JIssueType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueType rename(Name name) {
        return new JIssueType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueType rename(Table<?> name) {
        return new JIssueType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueType where(Condition condition) {
        return new JIssueType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
