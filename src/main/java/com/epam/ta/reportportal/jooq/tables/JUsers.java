/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JApiKeys.JApiKeysPath;
import com.epam.ta.reportportal.jooq.tables.JGroups.JGroupsPath;
import com.epam.ta.reportportal.jooq.tables.JGroupsUsers.JGroupsUsersPath;
import com.epam.ta.reportportal.jooq.tables.JLaunch.JLaunchPath;
import com.epam.ta.reportportal.jooq.tables.JOrganization.JOrganizationPath;
import com.epam.ta.reportportal.jooq.tables.JOrganizationUser.JOrganizationUserPath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.JProjectUser.JProjectUserPath;
import com.epam.ta.reportportal.jooq.tables.JUserCreationBid.JUserCreationBidPath;
import com.epam.ta.reportportal.jooq.tables.JUserPreference.JUserPreferencePath;
import com.epam.ta.reportportal.jooq.tables.records.JUsersRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JUsers extends TableImpl<JUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users</code>
     */
    public static final JUsers USERS = new JUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUsersRecord> getRecordType() {
        return JUsersRecord.class;
    }

    /**
     * The column <code>public.users.id</code>.
     */
    public final TableField<JUsersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users.login</code>.
     */
    public final TableField<JUsersRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.users.password</code>.
     */
    public final TableField<JUsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.users.email</code>.
     */
    public final TableField<JUsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.users.attachment</code>.
     */
    public final TableField<JUsersRecord, String> ATTACHMENT = createField(DSL.name("attachment"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.users.attachment_thumbnail</code>.
     */
    public final TableField<JUsersRecord, String> ATTACHMENT_THUMBNAIL = createField(DSL.name("attachment_thumbnail"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.users.role</code>.
     */
    public final TableField<JUsersRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.users.type</code>.
     */
    public final TableField<JUsersRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.users.expired</code>.
     */
    public final TableField<JUsersRecord, Boolean> EXPIRED = createField(DSL.name("expired"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.users.full_name</code>.
     */
    public final TableField<JUsersRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.users.metadata</code>.
     */
    public final TableField<JUsersRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.users.uuid</code>.
     */
    public final TableField<JUsersRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.users.external_id</code>.
     */
    public final TableField<JUsersRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.users.active</code>.
     */
    public final TableField<JUsersRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.users.login_backup</code>.
     */
    public final TableField<JUsersRecord, String> LOGIN_BACKUP = createField(DSL.name("login_backup"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.users.created_at</code>.
     */
    public final TableField<JUsersRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.users.updated_at</code>.
     */
    public final TableField<JUsersRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    private JUsers(Name alias, Table<JUsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JUsers(Name alias, Table<JUsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public JUsers(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    public JUsers(Name alias) {
        this(alias, USERS);
    }

    /**
     * Create a <code>public.users</code> table reference
     */
    public JUsers() {
        this(DSL.name("users"), null);
    }

    public <O extends Record> JUsers(Table<O> path, ForeignKey<O, JUsersRecord> childPath, InverseForeignKey<O, JUsersRecord> parentPath) {
        super(path, childPath, parentPath, USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JUsersPath extends JUsers implements Path<JUsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JUsersPath(Table<O> path, ForeignKey<O, JUsersRecord> childPath, InverseForeignKey<O, JUsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JUsersPath(Name alias, Table<JUsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JUsersPath as(String alias) {
            return new JUsersPath(DSL.name(alias), this);
        }

        @Override
        public JUsersPath as(Name alias) {
            return new JUsersPath(alias, this);
        }

        @Override
        public JUsersPath as(Table<?> alias) {
            return new JUsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JUsersRecord, Long> getIdentity() {
        return (Identity<JUsersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JUsersRecord> getPrimaryKey() {
        return Keys.USERS_PK;
    }

    @Override
    public List<UniqueKey<JUsersRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERS_EMAIL_KEY, Keys.USERS_LOGIN_KEY);
    }

    private transient JApiKeysPath _apiKeys;

    /**
     * Get the implicit to-many join path to the <code>public.api_keys</code>
     * table
     */
    public JApiKeysPath apiKeys() {
        if (_apiKeys == null)
            _apiKeys = new JApiKeysPath(this, null, Keys.API_KEYS__API_KEYS_USER_ID_FKEY.getInverseKey());

        return _apiKeys;
    }

    private transient JOrganizationPath _organization;

    /**
     * Get the implicit to-many join path to the
     * <code>public.organization</code> table
     */
    public JOrganizationPath organization() {
        if (_organization == null)
            _organization = new JOrganizationPath(this, null, Keys.ORGANIZATION__FK_ORGANIZATION_OWNER.getInverseKey());

        return _organization;
    }

    private transient JGroupsPath _groups;

    /**
     * Get the implicit to-many join path to the <code>public.groups</code>
     * table
     */
    public JGroupsPath groups() {
        if (_groups == null)
            _groups = new JGroupsPath(this, null, Keys.GROUPS__GROUPS_CREATED_BY_FKEY.getInverseKey());

        return _groups;
    }

    private transient JGroupsUsersPath _groupsUsers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.groups_users</code> table
     */
    public JGroupsUsersPath groupsUsers() {
        if (_groupsUsers == null)
            _groupsUsers = new JGroupsUsersPath(this, null, Keys.GROUPS_USERS__GROUPS_USERS_USER_ID_FKEY.getInverseKey());

        return _groupsUsers;
    }

    private transient JLaunchPath _launch;

    /**
     * Get the implicit to-many join path to the <code>public.launch</code>
     * table
     */
    public JLaunchPath launch() {
        if (_launch == null)
            _launch = new JLaunchPath(this, null, Keys.LAUNCH__LAUNCH_USER_ID_FKEY.getInverseKey());

        return _launch;
    }

    private transient JOrganizationUserPath _organizationUser;

    /**
     * Get the implicit to-many join path to the
     * <code>public.organization_user</code> table
     */
    public JOrganizationUserPath organizationUser() {
        if (_organizationUser == null)
            _organizationUser = new JOrganizationUserPath(this, null, Keys.ORGANIZATION_USER__ORGANIZATION_USER_USER_ID_FKEY.getInverseKey());

        return _organizationUser;
    }

    private transient JProjectUserPath _projectUser;

    /**
     * Get the implicit to-many join path to the
     * <code>public.project_user</code> table
     */
    public JProjectUserPath projectUser() {
        if (_projectUser == null)
            _projectUser = new JProjectUserPath(this, null, Keys.PROJECT_USER__PROJECT_USER_USER_ID_FKEY.getInverseKey());

        return _projectUser;
    }

    private transient JUserCreationBidPath _userCreationBid;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_creation_bid</code> table
     */
    public JUserCreationBidPath userCreationBid() {
        if (_userCreationBid == null)
            _userCreationBid = new JUserCreationBidPath(this, null, Keys.USER_CREATION_BID__USER_CREATION_BID_INVITING_USER_ID_FKEY.getInverseKey());

        return _userCreationBid;
    }

    private transient JUserPreferencePath _userPreference;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_preference</code> table
     */
    public JUserPreferencePath userPreference() {
        if (_userPreference == null)
            _userPreference = new JUserPreferencePath(this, null, Keys.USER_PREFERENCE__USER_PREFERENCE_USER_ID_FKEY.getInverseKey());

        return _userPreference;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.project</code> table
     */
    public JProjectPath project() {
        return projectUser().project();
    }

    @Override
    public JUsers as(String alias) {
        return new JUsers(DSL.name(alias), this);
    }

    @Override
    public JUsers as(Name alias) {
        return new JUsers(alias, this);
    }

    @Override
    public JUsers as(Table<?> alias) {
        return new JUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(String name) {
        return new JUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(Name name) {
        return new JUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUsers rename(Table<?> name) {
        return new JUsers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Condition condition) {
        return new JUsers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JUsers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JUsers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
