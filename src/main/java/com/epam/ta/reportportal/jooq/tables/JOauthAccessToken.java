/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JOauthAccessTokenRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.11.11" }, comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JOauthAccessToken extends TableImpl<JOauthAccessTokenRecord> {

	private static final long serialVersionUID = -75495256;

	/**
	 * The reference instance of <code>public.oauth_access_token</code>
	 */
	public static final JOauthAccessToken OAUTH_ACCESS_TOKEN = new JOauthAccessToken();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<JOauthAccessTokenRecord> getRecordType() {
		return JOauthAccessTokenRecord.class;
	}

	/**
	 * The column <code>public.oauth_access_token.id</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, Long> ID = createField(
			"id",
			org.jooq.impl.SQLDataType.BIGINT.nullable(false)
					.defaultValue(org.jooq.impl.DSL.field(
							"nextval('oauth_access_token_id_seq'::regclass)",
							org.jooq.impl.SQLDataType.BIGINT
					)),
			this,
			""
	);

	/**
	 * The column <code>public.oauth_access_token.token_id</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, String> TOKEN_ID = createField(
			"token_id",
			org.jooq.impl.SQLDataType.VARCHAR(255),
			this,
			""
	);

	/**
	 * The column <code>public.oauth_access_token.token</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, byte[]> TOKEN = createField("token", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>public.oauth_access_token.authentication_id</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, String> AUTHENTICATION_ID = createField(
			"authentication_id",
			org.jooq.impl.SQLDataType.VARCHAR(255),
			this,
			""
	);

	/**
	 * The column <code>public.oauth_access_token.username</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, String> USERNAME = createField(
			"username",
			org.jooq.impl.SQLDataType.VARCHAR(255),
			this,
			""
	);

	/**
	 * The column <code>public.oauth_access_token.user_id</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>public.oauth_access_token.client_id</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, String> CLIENT_ID = createField(
			"client_id",
			org.jooq.impl.SQLDataType.VARCHAR(255),
			this,
			""
	);

	/**
	 * The column <code>public.oauth_access_token.authentication</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, byte[]> AUTHENTICATION = createField(
			"authentication",
			org.jooq.impl.SQLDataType.BLOB,
			this,
			""
	);

	/**
	 * The column <code>public.oauth_access_token.refresh_token</code>.
	 */
	public final TableField<JOauthAccessTokenRecord, String> REFRESH_TOKEN = createField(
			"refresh_token",
			org.jooq.impl.SQLDataType.VARCHAR(255),
			this,
			""
	);

	/**
	 * Create a <code>public.oauth_access_token</code> table reference
	 */
	public JOauthAccessToken() {
		this(DSL.name("oauth_access_token"), null);
	}

	/**
	 * Create an aliased <code>public.oauth_access_token</code> table reference
	 */
	public JOauthAccessToken(String alias) {
		this(DSL.name(alias), OAUTH_ACCESS_TOKEN);
	}

	/**
	 * Create an aliased <code>public.oauth_access_token</code> table reference
	 */
	public JOauthAccessToken(Name alias) {
		this(alias, OAUTH_ACCESS_TOKEN);
	}

	private JOauthAccessToken(Name alias, Table<JOauthAccessTokenRecord> aliased) {
		this(alias, aliased, null);
	}

	private JOauthAccessToken(Name alias, Table<JOauthAccessTokenRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> JOauthAccessToken(Table<O> child, ForeignKey<O, JOauthAccessTokenRecord> key) {
		super(child, key, OAUTH_ACCESS_TOKEN);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return JPublic.PUBLIC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.OAUTH_ACCESS_TOKEN_PKEY, Indexes.OAUTH_AT_USER_IDX, Indexes.USERS_ACCESS_TOKEN_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<JOauthAccessTokenRecord, Long> getIdentity() {
		return Keys.IDENTITY_OAUTH_ACCESS_TOKEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<JOauthAccessTokenRecord> getPrimaryKey() {
		return Keys.OAUTH_ACCESS_TOKEN_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<JOauthAccessTokenRecord>> getKeys() {
		return Arrays.<UniqueKey<JOauthAccessTokenRecord>>asList(Keys.OAUTH_ACCESS_TOKEN_PKEY, Keys.USERS_ACCESS_TOKEN_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<JOauthAccessTokenRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<JOauthAccessTokenRecord, ?>>asList(Keys.OAUTH_ACCESS_TOKEN__OAUTH_ACCESS_TOKEN_USER_ID_FKEY);
	}

	public JUsers users() {
		return new JUsers(this, Keys.OAUTH_ACCESS_TOKEN__OAUTH_ACCESS_TOKEN_USER_ID_FKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JOauthAccessToken as(String alias) {
		return new JOauthAccessToken(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public JOauthAccessToken as(Name alias) {
		return new JOauthAccessToken(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public JOauthAccessToken rename(String name) {
		return new JOauthAccessToken(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public JOauthAccessToken rename(Name name) {
		return new JOauthAccessToken(name, null);
	}
}
