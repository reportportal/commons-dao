/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JPlaginMarketplaceRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JPlaginMarketplace extends TableImpl<JPlaginMarketplaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.plagin_marketplace</code>
     */
    public static final JPlaginMarketplace PLAGIN_MARKETPLACE = new JPlaginMarketplace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPlaginMarketplaceRecord> getRecordType() {
        return JPlaginMarketplaceRecord.class;
    }

    /**
     * The column <code>public.plagin_marketplace.name</code>.
     */
    public final TableField<JPlaginMarketplaceRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.plagin_marketplace.uri</code>.
     */
    public final TableField<JPlaginMarketplaceRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private JPlaginMarketplace(Name alias, Table<JPlaginMarketplaceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPlaginMarketplace(Name alias, Table<JPlaginMarketplaceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.plagin_marketplace</code> table reference
     */
    public JPlaginMarketplace(String alias) {
        this(DSL.name(alias), PLAGIN_MARKETPLACE);
    }

    /**
     * Create an aliased <code>public.plagin_marketplace</code> table reference
     */
    public JPlaginMarketplace(Name alias) {
        this(alias, PLAGIN_MARKETPLACE);
    }

    /**
     * Create a <code>public.plagin_marketplace</code> table reference
     */
    public JPlaginMarketplace() {
        this(DSL.name("plagin_marketplace"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JPlaginMarketplaceRecord> getPrimaryKey() {
        return Keys.PLAGIN_MARKETPLACE_PKEY;
    }

    @Override
    public List<UniqueKey<JPlaginMarketplaceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.PLAGIN_MARKETPLACE_URI_KEY);
    }

    @Override
    public JPlaginMarketplace as(String alias) {
        return new JPlaginMarketplace(DSL.name(alias), this);
    }

    @Override
    public JPlaginMarketplace as(Name alias) {
        return new JPlaginMarketplace(alias, this);
    }

    @Override
    public JPlaginMarketplace as(Table<?> alias) {
        return new JPlaginMarketplace(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPlaginMarketplace rename(String name) {
        return new JPlaginMarketplace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPlaginMarketplace rename(Name name) {
        return new JPlaginMarketplace(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPlaginMarketplace rename(Table<?> name) {
        return new JPlaginMarketplace(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPlaginMarketplace where(Condition condition) {
        return new JPlaginMarketplace(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPlaginMarketplace where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPlaginMarketplace where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPlaginMarketplace where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPlaginMarketplace where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPlaginMarketplace where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPlaginMarketplace where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPlaginMarketplace where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPlaginMarketplace whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPlaginMarketplace whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
