/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JDashboard.JDashboardPath;
import com.epam.ta.reportportal.jooq.tables.JWidget.JWidgetPath;
import com.epam.ta.reportportal.jooq.tables.records.JDashboardWidgetRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JDashboardWidget extends TableImpl<JDashboardWidgetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.dashboard_widget</code>
     */
    public static final JDashboardWidget DASHBOARD_WIDGET = new JDashboardWidget();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JDashboardWidgetRecord> getRecordType() {
        return JDashboardWidgetRecord.class;
    }

    /**
     * The column <code>public.dashboard_widget.dashboard_id</code>.
     */
    public final TableField<JDashboardWidgetRecord, Long> DASHBOARD_ID = createField(DSL.name("dashboard_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_id</code>.
     */
    public final TableField<JDashboardWidgetRecord, Long> WIDGET_ID = createField(DSL.name("widget_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_name</code>.
     */
    public final TableField<JDashboardWidgetRecord, String> WIDGET_NAME = createField(DSL.name("widget_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_owner</code>.
     */
    public final TableField<JDashboardWidgetRecord, String> WIDGET_OWNER = createField(DSL.name("widget_owner"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_type</code>.
     */
    public final TableField<JDashboardWidgetRecord, String> WIDGET_TYPE = createField(DSL.name("widget_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_width</code>.
     */
    public final TableField<JDashboardWidgetRecord, Integer> WIDGET_WIDTH = createField(DSL.name("widget_width"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_height</code>.
     */
    public final TableField<JDashboardWidgetRecord, Integer> WIDGET_HEIGHT = createField(DSL.name("widget_height"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_position_x</code>.
     */
    public final TableField<JDashboardWidgetRecord, Integer> WIDGET_POSITION_X = createField(DSL.name("widget_position_x"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.widget_position_y</code>.
     */
    public final TableField<JDashboardWidgetRecord, Integer> WIDGET_POSITION_Y = createField(DSL.name("widget_position_y"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.dashboard_widget.is_created_on</code>.
     */
    public final TableField<JDashboardWidgetRecord, Boolean> IS_CREATED_ON = createField(DSL.name("is_created_on"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private JDashboardWidget(Name alias, Table<JDashboardWidgetRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JDashboardWidget(Name alias, Table<JDashboardWidgetRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.dashboard_widget</code> table reference
     */
    public JDashboardWidget(String alias) {
        this(DSL.name(alias), DASHBOARD_WIDGET);
    }

    /**
     * Create an aliased <code>public.dashboard_widget</code> table reference
     */
    public JDashboardWidget(Name alias) {
        this(alias, DASHBOARD_WIDGET);
    }

    /**
     * Create a <code>public.dashboard_widget</code> table reference
     */
    public JDashboardWidget() {
        this(DSL.name("dashboard_widget"), null);
    }

    public <O extends Record> JDashboardWidget(Table<O> path, ForeignKey<O, JDashboardWidgetRecord> childPath, InverseForeignKey<O, JDashboardWidgetRecord> parentPath) {
        super(path, childPath, parentPath, DASHBOARD_WIDGET);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JDashboardWidgetPath extends JDashboardWidget implements Path<JDashboardWidgetRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JDashboardWidgetPath(Table<O> path, ForeignKey<O, JDashboardWidgetRecord> childPath, InverseForeignKey<O, JDashboardWidgetRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JDashboardWidgetPath(Name alias, Table<JDashboardWidgetRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JDashboardWidgetPath as(String alias) {
            return new JDashboardWidgetPath(DSL.name(alias), this);
        }

        @Override
        public JDashboardWidgetPath as(Name alias) {
            return new JDashboardWidgetPath(alias, this);
        }

        @Override
        public JDashboardWidgetPath as(Table<?> alias) {
            return new JDashboardWidgetPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JDashboardWidgetRecord> getPrimaryKey() {
        return Keys.DASHBOARD_WIDGET_PK;
    }

    @Override
    public List<UniqueKey<JDashboardWidgetRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.WIDGET_ON_DASHBOARD_UNQ);
    }

    @Override
    public List<ForeignKey<JDashboardWidgetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DASHBOARD_WIDGET__DASHBOARD_WIDGET_DASHBOARD_ID_FKEY, Keys.DASHBOARD_WIDGET__DASHBOARD_WIDGET_WIDGET_ID_FKEY);
    }

    private transient JDashboardPath _dashboard;

    /**
     * Get the implicit join path to the <code>public.dashboard</code> table.
     */
    public JDashboardPath dashboard() {
        if (_dashboard == null)
            _dashboard = new JDashboardPath(this, Keys.DASHBOARD_WIDGET__DASHBOARD_WIDGET_DASHBOARD_ID_FKEY, null);

        return _dashboard;
    }

    private transient JWidgetPath _widget;

    /**
     * Get the implicit join path to the <code>public.widget</code> table.
     */
    public JWidgetPath widget() {
        if (_widget == null)
            _widget = new JWidgetPath(this, Keys.DASHBOARD_WIDGET__DASHBOARD_WIDGET_WIDGET_ID_FKEY, null);

        return _widget;
    }

    @Override
    public JDashboardWidget as(String alias) {
        return new JDashboardWidget(DSL.name(alias), this);
    }

    @Override
    public JDashboardWidget as(Name alias) {
        return new JDashboardWidget(alias, this);
    }

    @Override
    public JDashboardWidget as(Table<?> alias) {
        return new JDashboardWidget(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JDashboardWidget rename(String name) {
        return new JDashboardWidget(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDashboardWidget rename(Name name) {
        return new JDashboardWidget(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JDashboardWidget rename(Table<?> name) {
        return new JDashboardWidget(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDashboardWidget where(Condition condition) {
        return new JDashboardWidget(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDashboardWidget where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDashboardWidget where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDashboardWidget where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDashboardWidget where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDashboardWidget where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDashboardWidget where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JDashboardWidget where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDashboardWidget whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JDashboardWidget whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
