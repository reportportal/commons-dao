/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JOrganization.JOrganizationPath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.records.JActivityRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JActivity extends TableImpl<JActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.activity</code>
     */
    public static final JActivity ACTIVITY = new JActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JActivityRecord> getRecordType() {
        return JActivityRecord.class;
    }

    /**
     * The column <code>public.activity.id</code>.
     */
    public final TableField<JActivityRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.activity.created_at</code>.
     */
    public final TableField<JActivityRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.activity.action</code>.
     */
    public final TableField<JActivityRecord, String> ACTION = createField(DSL.name("action"), SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>public.activity.event_name</code>.
     */
    public final TableField<JActivityRecord, String> EVENT_NAME = createField(DSL.name("event_name"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.activity.priority</code>.
     */
    public final TableField<JActivityRecord, String> PRIORITY = createField(DSL.name("priority"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>public.activity.object_id</code>.
     */
    public final TableField<JActivityRecord, Long> OBJECT_ID = createField(DSL.name("object_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.activity.object_name</code>.
     */
    public final TableField<JActivityRecord, String> OBJECT_NAME = createField(DSL.name("object_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.activity.object_type</code>.
     */
    public final TableField<JActivityRecord, String> OBJECT_TYPE = createField(DSL.name("object_type"), SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>public.activity.project_id</code>.
     */
    public final TableField<JActivityRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.activity.details</code>.
     */
    public final TableField<JActivityRecord, JSONB> DETAILS = createField(DSL.name("details"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.activity.subject_id</code>.
     */
    public final TableField<JActivityRecord, Long> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.activity.subject_name</code>.
     */
    public final TableField<JActivityRecord, String> SUBJECT_NAME = createField(DSL.name("subject_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.activity.subject_type</code>.
     */
    public final TableField<JActivityRecord, String> SUBJECT_TYPE = createField(DSL.name("subject_type"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>public.activity.organization_id</code>.
     */
    public final TableField<JActivityRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), SQLDataType.BIGINT, this, "");

    private JActivity(Name alias, Table<JActivityRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JActivity(Name alias, Table<JActivityRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.activity</code> table reference
     */
    public JActivity(String alias) {
        this(DSL.name(alias), ACTIVITY);
    }

    /**
     * Create an aliased <code>public.activity</code> table reference
     */
    public JActivity(Name alias) {
        this(alias, ACTIVITY);
    }

    /**
     * Create a <code>public.activity</code> table reference
     */
    public JActivity() {
        this(DSL.name("activity"), null);
    }

    public <O extends Record> JActivity(Table<O> path, ForeignKey<O, JActivityRecord> childPath, InverseForeignKey<O, JActivityRecord> parentPath) {
        super(path, childPath, parentPath, ACTIVITY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JActivityPath extends JActivity implements Path<JActivityRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JActivityPath(Table<O> path, ForeignKey<O, JActivityRecord> childPath, InverseForeignKey<O, JActivityRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JActivityPath(Name alias, Table<JActivityRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JActivityPath as(String alias) {
            return new JActivityPath(DSL.name(alias), this);
        }

        @Override
        public JActivityPath as(Name alias) {
            return new JActivityPath(alias, this);
        }

        @Override
        public JActivityPath as(Table<?> alias) {
            return new JActivityPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ACTIVITY_CREATED_AT_IDX, Indexes.ACTIVITY_OBJECT_IDX, Indexes.ACTIVITY_PROJECT_IDX, Indexes.ORG_ID_IDX);
    }

    @Override
    public Identity<JActivityRecord, Long> getIdentity() {
        return (Identity<JActivityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JActivityRecord> getPrimaryKey() {
        return Keys.ACTIVITY_PK;
    }

    @Override
    public List<ForeignKey<JActivityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACTIVITY__ACTIVITY_ORGANIZATION_ID_FKEY, Keys.ACTIVITY__ACTIVITY_PROJECT_ID_FKEY);
    }

    private transient JOrganizationPath _organization;

    /**
     * Get the implicit join path to the <code>public.organization</code> table.
     */
    public JOrganizationPath organization() {
        if (_organization == null)
            _organization = new JOrganizationPath(this, Keys.ACTIVITY__ACTIVITY_ORGANIZATION_ID_FKEY, null);

        return _organization;
    }

    private transient JProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public JProjectPath project() {
        if (_project == null)
            _project = new JProjectPath(this, Keys.ACTIVITY__ACTIVITY_PROJECT_ID_FKEY, null);

        return _project;
    }

    @Override
    public JActivity as(String alias) {
        return new JActivity(DSL.name(alias), this);
    }

    @Override
    public JActivity as(Name alias) {
        return new JActivity(alias, this);
    }

    @Override
    public JActivity as(Table<?> alias) {
        return new JActivity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JActivity rename(String name) {
        return new JActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JActivity rename(Name name) {
        return new JActivity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JActivity rename(Table<?> name) {
        return new JActivity(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JActivity where(Condition condition) {
        return new JActivity(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JActivity where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JActivity where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JActivity where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JActivity where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JActivity where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JActivity where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JActivity where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JActivity whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JActivity whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
