/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JLaunch.JLaunchPath;
import com.epam.ta.reportportal.jooq.tables.JStatisticsField.JStatisticsFieldPath;
import com.epam.ta.reportportal.jooq.tables.JTestItem.JTestItemPath;
import com.epam.ta.reportportal.jooq.tables.records.JStatisticsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JStatistics extends TableImpl<JStatisticsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.statistics</code>
     */
    public static final JStatistics STATISTICS = new JStatistics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JStatisticsRecord> getRecordType() {
        return JStatisticsRecord.class;
    }

    /**
     * The column <code>public.statistics.s_id</code>.
     */
    public final TableField<JStatisticsRecord, Long> S_ID = createField(DSL.name("s_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.statistics.s_counter</code>.
     */
    public final TableField<JStatisticsRecord, Integer> S_COUNTER = createField(DSL.name("s_counter"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.statistics.launch_id</code>.
     */
    public final TableField<JStatisticsRecord, Long> LAUNCH_ID = createField(DSL.name("launch_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.statistics.item_id</code>.
     */
    public final TableField<JStatisticsRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.statistics.statistics_field_id</code>.
     */
    public final TableField<JStatisticsRecord, Long> STATISTICS_FIELD_ID = createField(DSL.name("statistics_field_id"), SQLDataType.BIGINT, this, "");

    private JStatistics(Name alias, Table<JStatisticsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JStatistics(Name alias, Table<JStatisticsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.statistics</code> table reference
     */
    public JStatistics(String alias) {
        this(DSL.name(alias), STATISTICS);
    }

    /**
     * Create an aliased <code>public.statistics</code> table reference
     */
    public JStatistics(Name alias) {
        this(alias, STATISTICS);
    }

    /**
     * Create a <code>public.statistics</code> table reference
     */
    public JStatistics() {
        this(DSL.name("statistics"), null);
    }

    public <O extends Record> JStatistics(Table<O> path, ForeignKey<O, JStatisticsRecord> childPath, InverseForeignKey<O, JStatisticsRecord> parentPath) {
        super(path, childPath, parentPath, STATISTICS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JStatisticsPath extends JStatistics implements Path<JStatisticsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JStatisticsPath(Table<O> path, ForeignKey<O, JStatisticsRecord> childPath, InverseForeignKey<O, JStatisticsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JStatisticsPath(Name alias, Table<JStatisticsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JStatisticsPath as(String alias) {
            return new JStatisticsPath(DSL.name(alias), this);
        }

        @Override
        public JStatisticsPath as(Name alias) {
            return new JStatisticsPath(alias, this);
        }

        @Override
        public JStatisticsPath as(Table<?> alias) {
            return new JStatisticsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STATISTICS_LAUNCH_IDX, Indexes.STATISTICS_TI_IDX);
    }

    @Override
    public Identity<JStatisticsRecord, Long> getIdentity() {
        return (Identity<JStatisticsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JStatisticsRecord> getPrimaryKey() {
        return Keys.STATISTICS_PK;
    }

    @Override
    public List<UniqueKey<JStatisticsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_STATS_ITEM, Keys.UNIQUE_STATS_LAUNCH);
    }

    @Override
    public List<ForeignKey<JStatisticsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STATISTICS__STATISTICS_ITEM_ID_FKEY, Keys.STATISTICS__STATISTICS_LAUNCH_ID_FKEY, Keys.STATISTICS__STATISTICS_STATISTICS_FIELD_ID_FKEY);
    }

    private transient JTestItemPath _testItem;

    /**
     * Get the implicit join path to the <code>public.test_item</code> table.
     */
    public JTestItemPath testItem() {
        if (_testItem == null)
            _testItem = new JTestItemPath(this, Keys.STATISTICS__STATISTICS_ITEM_ID_FKEY, null);

        return _testItem;
    }

    private transient JLaunchPath _launch;

    /**
     * Get the implicit join path to the <code>public.launch</code> table.
     */
    public JLaunchPath launch() {
        if (_launch == null)
            _launch = new JLaunchPath(this, Keys.STATISTICS__STATISTICS_LAUNCH_ID_FKEY, null);

        return _launch;
    }

    private transient JStatisticsFieldPath _statisticsField;

    /**
     * Get the implicit join path to the <code>public.statistics_field</code>
     * table.
     */
    public JStatisticsFieldPath statisticsField() {
        if (_statisticsField == null)
            _statisticsField = new JStatisticsFieldPath(this, Keys.STATISTICS__STATISTICS_STATISTICS_FIELD_ID_FKEY, null);

        return _statisticsField;
    }

    @Override
    public List<Check<JStatisticsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("statistics_check"), "(((s_counter >= 0) AND (((item_id IS NOT NULL) AND (launch_id IS NULL)) OR ((launch_id IS NOT NULL) AND (item_id IS NULL)))))", true)
        );
    }

    @Override
    public JStatistics as(String alias) {
        return new JStatistics(DSL.name(alias), this);
    }

    @Override
    public JStatistics as(Name alias) {
        return new JStatistics(alias, this);
    }

    @Override
    public JStatistics as(Table<?> alias) {
        return new JStatistics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatistics rename(String name) {
        return new JStatistics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatistics rename(Name name) {
        return new JStatistics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatistics rename(Table<?> name) {
        return new JStatistics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatistics where(Condition condition) {
        return new JStatistics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatistics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatistics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatistics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatistics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatistics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatistics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatistics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatistics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatistics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
