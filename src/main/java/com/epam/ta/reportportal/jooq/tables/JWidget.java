/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JContentField.JContentFieldPath;
import com.epam.ta.reportportal.jooq.tables.JDashboard.JDashboardPath;
import com.epam.ta.reportportal.jooq.tables.JDashboardWidget.JDashboardWidgetPath;
import com.epam.ta.reportportal.jooq.tables.JFilter.JFilterPath;
import com.epam.ta.reportportal.jooq.tables.JOwnedEntity.JOwnedEntityPath;
import com.epam.ta.reportportal.jooq.tables.JWidgetFilter.JWidgetFilterPath;
import com.epam.ta.reportportal.jooq.tables.records.JWidgetRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JWidget extends TableImpl<JWidgetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.widget</code>
     */
    public static final JWidget WIDGET = new JWidget();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JWidgetRecord> getRecordType() {
        return JWidgetRecord.class;
    }

    /**
     * The column <code>public.widget.id</code>.
     */
    public final TableField<JWidgetRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.widget.name</code>.
     */
    public final TableField<JWidgetRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.widget.description</code>.
     */
    public final TableField<JWidgetRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.widget.widget_type</code>.
     */
    public final TableField<JWidgetRecord, String> WIDGET_TYPE = createField(DSL.name("widget_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.widget.items_count</code>.
     */
    public final TableField<JWidgetRecord, Short> ITEMS_COUNT = createField(DSL.name("items_count"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.widget.widget_options</code>.
     */
    public final TableField<JWidgetRecord, JSONB> WIDGET_OPTIONS = createField(DSL.name("widget_options"), SQLDataType.JSONB, this, "");

    private JWidget(Name alias, Table<JWidgetRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JWidget(Name alias, Table<JWidgetRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.widget</code> table reference
     */
    public JWidget(String alias) {
        this(DSL.name(alias), WIDGET);
    }

    /**
     * Create an aliased <code>public.widget</code> table reference
     */
    public JWidget(Name alias) {
        this(alias, WIDGET);
    }

    /**
     * Create a <code>public.widget</code> table reference
     */
    public JWidget() {
        this(DSL.name("widget"), null);
    }

    public <O extends Record> JWidget(Table<O> path, ForeignKey<O, JWidgetRecord> childPath, InverseForeignKey<O, JWidgetRecord> parentPath) {
        super(path, childPath, parentPath, WIDGET);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JWidgetPath extends JWidget implements Path<JWidgetRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JWidgetPath(Table<O> path, ForeignKey<O, JWidgetRecord> childPath, InverseForeignKey<O, JWidgetRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JWidgetPath(Name alias, Table<JWidgetRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JWidgetPath as(String alias) {
            return new JWidgetPath(DSL.name(alias), this);
        }

        @Override
        public JWidgetPath as(Name alias) {
            return new JWidgetPath(alias, this);
        }

        @Override
        public JWidgetPath as(Table<?> alias) {
            return new JWidgetPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JWidgetRecord> getPrimaryKey() {
        return Keys.WIDGET_PKEY;
    }

    @Override
    public List<ForeignKey<JWidgetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WIDGET__WIDGET_ID_FK);
    }

    private transient JOwnedEntityPath _ownedEntity;

    /**
     * Get the implicit join path to the <code>public.owned_entity</code> table.
     */
    public JOwnedEntityPath ownedEntity() {
        if (_ownedEntity == null)
            _ownedEntity = new JOwnedEntityPath(this, Keys.WIDGET__WIDGET_ID_FK, null);

        return _ownedEntity;
    }

    private transient JContentFieldPath _contentField;

    /**
     * Get the implicit to-many join path to the
     * <code>public.content_field</code> table
     */
    public JContentFieldPath contentField() {
        if (_contentField == null)
            _contentField = new JContentFieldPath(this, null, Keys.CONTENT_FIELD__CONTENT_FIELD_ID_FKEY.getInverseKey());

        return _contentField;
    }

    private transient JDashboardWidgetPath _dashboardWidget;

    /**
     * Get the implicit to-many join path to the
     * <code>public.dashboard_widget</code> table
     */
    public JDashboardWidgetPath dashboardWidget() {
        if (_dashboardWidget == null)
            _dashboardWidget = new JDashboardWidgetPath(this, null, Keys.DASHBOARD_WIDGET__DASHBOARD_WIDGET_WIDGET_ID_FKEY.getInverseKey());

        return _dashboardWidget;
    }

    private transient JWidgetFilterPath _widgetFilter;

    /**
     * Get the implicit to-many join path to the
     * <code>public.widget_filter</code> table
     */
    public JWidgetFilterPath widgetFilter() {
        if (_widgetFilter == null)
            _widgetFilter = new JWidgetFilterPath(this, null, Keys.WIDGET_FILTER__WIDGET_FILTER_WIDGET_ID_FKEY.getInverseKey());

        return _widgetFilter;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.dashboard</code> table
     */
    public JDashboardPath dashboard() {
        return dashboardWidget().dashboard();
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.filter</code>
     * table
     */
    public JFilterPath filter() {
        return widgetFilter().filter();
    }

    @Override
    public JWidget as(String alias) {
        return new JWidget(DSL.name(alias), this);
    }

    @Override
    public JWidget as(Name alias) {
        return new JWidget(alias, this);
    }

    @Override
    public JWidget as(Table<?> alias) {
        return new JWidget(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JWidget rename(String name) {
        return new JWidget(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JWidget rename(Name name) {
        return new JWidget(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JWidget rename(Table<?> name) {
        return new JWidget(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidget where(Condition condition) {
        return new JWidget(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidget where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidget where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidget where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidget where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidget where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidget where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidget where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidget whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidget whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
