/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.enums.JFilterConditionEnum;
import com.epam.ta.reportportal.jooq.tables.JFilter.JFilterPath;
import com.epam.ta.reportportal.jooq.tables.records.JFilterConditionRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JFilterCondition extends TableImpl<JFilterConditionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.filter_condition</code>
     */
    public static final JFilterCondition FILTER_CONDITION = new JFilterCondition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFilterConditionRecord> getRecordType() {
        return JFilterConditionRecord.class;
    }

    /**
     * The column <code>public.filter_condition.id</code>.
     */
    public final TableField<JFilterConditionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.filter_condition.filter_id</code>.
     */
    public final TableField<JFilterConditionRecord, Long> FILTER_ID = createField(DSL.name("filter_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.filter_condition.condition</code>.
     */
    public final TableField<JFilterConditionRecord, JFilterConditionEnum> CONDITION = createField(DSL.name("condition"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(JFilterConditionEnum.class), this, "");

    /**
     * The column <code>public.filter_condition.value</code>.
     */
    public final TableField<JFilterConditionRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.filter_condition.search_criteria</code>.
     */
    public final TableField<JFilterConditionRecord, String> SEARCH_CRITERIA = createField(DSL.name("search_criteria"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.filter_condition.negative</code>.
     */
    public final TableField<JFilterConditionRecord, Boolean> NEGATIVE = createField(DSL.name("negative"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private JFilterCondition(Name alias, Table<JFilterConditionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JFilterCondition(Name alias, Table<JFilterConditionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.filter_condition</code> table reference
     */
    public JFilterCondition(String alias) {
        this(DSL.name(alias), FILTER_CONDITION);
    }

    /**
     * Create an aliased <code>public.filter_condition</code> table reference
     */
    public JFilterCondition(Name alias) {
        this(alias, FILTER_CONDITION);
    }

    /**
     * Create a <code>public.filter_condition</code> table reference
     */
    public JFilterCondition() {
        this(DSL.name("filter_condition"), null);
    }

    public <O extends Record> JFilterCondition(Table<O> path, ForeignKey<O, JFilterConditionRecord> childPath, InverseForeignKey<O, JFilterConditionRecord> parentPath) {
        super(path, childPath, parentPath, FILTER_CONDITION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JFilterConditionPath extends JFilterCondition implements Path<JFilterConditionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JFilterConditionPath(Table<O> path, ForeignKey<O, JFilterConditionRecord> childPath, InverseForeignKey<O, JFilterConditionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JFilterConditionPath(Name alias, Table<JFilterConditionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JFilterConditionPath as(String alias) {
            return new JFilterConditionPath(DSL.name(alias), this);
        }

        @Override
        public JFilterConditionPath as(Name alias) {
            return new JFilterConditionPath(alias, this);
        }

        @Override
        public JFilterConditionPath as(Table<?> alias) {
            return new JFilterConditionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILTER_COND_FILTER_IDX);
    }

    @Override
    public Identity<JFilterConditionRecord, Long> getIdentity() {
        return (Identity<JFilterConditionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JFilterConditionRecord> getPrimaryKey() {
        return Keys.FILTER_CONDITION_PK;
    }

    @Override
    public List<ForeignKey<JFilterConditionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILTER_CONDITION__FILTER_CONDITION_FILTER_ID_FKEY);
    }

    private transient JFilterPath _filter;

    /**
     * Get the implicit join path to the <code>public.filter</code> table.
     */
    public JFilterPath filter() {
        if (_filter == null)
            _filter = new JFilterPath(this, Keys.FILTER_CONDITION__FILTER_CONDITION_FILTER_ID_FKEY, null);

        return _filter;
    }

    @Override
    public JFilterCondition as(String alias) {
        return new JFilterCondition(DSL.name(alias), this);
    }

    @Override
    public JFilterCondition as(Name alias) {
        return new JFilterCondition(alias, this);
    }

    @Override
    public JFilterCondition as(Table<?> alias) {
        return new JFilterCondition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilterCondition rename(String name) {
        return new JFilterCondition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilterCondition rename(Name name) {
        return new JFilterCondition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilterCondition rename(Table<?> name) {
        return new JFilterCondition(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilterCondition where(Condition condition) {
        return new JFilterCondition(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilterCondition where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilterCondition where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilterCondition where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilterCondition where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilterCondition where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilterCondition where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilterCondition where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilterCondition whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilterCondition whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
