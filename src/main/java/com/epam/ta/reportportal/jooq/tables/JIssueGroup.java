/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.enums.JIssueGroupEnum;
import com.epam.ta.reportportal.jooq.tables.JIssueType.JIssueTypePath;
import com.epam.ta.reportportal.jooq.tables.records.JIssueGroupRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JIssueGroup extends TableImpl<JIssueGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.issue_group</code>
     */
    public static final JIssueGroup ISSUE_GROUP = new JIssueGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JIssueGroupRecord> getRecordType() {
        return JIssueGroupRecord.class;
    }

    /**
     * The column <code>public.issue_group.issue_group_id</code>.
     */
    public final TableField<JIssueGroupRecord, Short> ISSUE_GROUP_ID = createField(DSL.name("issue_group_id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.issue_group.issue_group</code>.
     */
    public final TableField<JIssueGroupRecord, JIssueGroupEnum> ISSUE_GROUP_ = createField(DSL.name("issue_group"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(JIssueGroupEnum.class), this, "");

    private JIssueGroup(Name alias, Table<JIssueGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JIssueGroup(Name alias, Table<JIssueGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.issue_group</code> table reference
     */
    public JIssueGroup(String alias) {
        this(DSL.name(alias), ISSUE_GROUP);
    }

    /**
     * Create an aliased <code>public.issue_group</code> table reference
     */
    public JIssueGroup(Name alias) {
        this(alias, ISSUE_GROUP);
    }

    /**
     * Create a <code>public.issue_group</code> table reference
     */
    public JIssueGroup() {
        this(DSL.name("issue_group"), null);
    }

    public <O extends Record> JIssueGroup(Table<O> path, ForeignKey<O, JIssueGroupRecord> childPath, InverseForeignKey<O, JIssueGroupRecord> parentPath) {
        super(path, childPath, parentPath, ISSUE_GROUP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JIssueGroupPath extends JIssueGroup implements Path<JIssueGroupRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JIssueGroupPath(Table<O> path, ForeignKey<O, JIssueGroupRecord> childPath, InverseForeignKey<O, JIssueGroupRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JIssueGroupPath(Name alias, Table<JIssueGroupRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JIssueGroupPath as(String alias) {
            return new JIssueGroupPath(DSL.name(alias), this);
        }

        @Override
        public JIssueGroupPath as(Name alias) {
            return new JIssueGroupPath(alias, this);
        }

        @Override
        public JIssueGroupPath as(Table<?> alias) {
            return new JIssueGroupPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JIssueGroupRecord, Short> getIdentity() {
        return (Identity<JIssueGroupRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<JIssueGroupRecord> getPrimaryKey() {
        return Keys.ISSUE_GROUP_PK;
    }

    private transient JIssueTypePath _issueType;

    /**
     * Get the implicit to-many join path to the <code>public.issue_type</code>
     * table
     */
    public JIssueTypePath issueType() {
        if (_issueType == null)
            _issueType = new JIssueTypePath(this, null, Keys.ISSUE_TYPE__ISSUE_TYPE_ISSUE_GROUP_ID_FKEY.getInverseKey());

        return _issueType;
    }

    @Override
    public JIssueGroup as(String alias) {
        return new JIssueGroup(DSL.name(alias), this);
    }

    @Override
    public JIssueGroup as(Name alias) {
        return new JIssueGroup(alias, this);
    }

    @Override
    public JIssueGroup as(Table<?> alias) {
        return new JIssueGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueGroup rename(String name) {
        return new JIssueGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueGroup rename(Name name) {
        return new JIssueGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueGroup rename(Table<?> name) {
        return new JIssueGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueGroup where(Condition condition) {
        return new JIssueGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssueGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssueGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
