/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JAnalyticsDataRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JAnalyticsData extends TableImpl<JAnalyticsDataRecord> {

    private static final long serialVersionUID = -1928480576;

    /**
     * The reference instance of <code>public.analytics_data</code>
     */
    public static final JAnalyticsData ANALYTICS_DATA = new JAnalyticsData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JAnalyticsDataRecord> getRecordType() {
        return JAnalyticsDataRecord.class;
    }

    /**
     * The column <code>public.analytics_data.id</code>.
     */
    public final TableField<JAnalyticsDataRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('analytics_data_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.analytics_data.type</code>.
     */
    public final TableField<JAnalyticsDataRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.analytics_data.created_at</code>.
     */
    public final TableField<JAnalyticsDataRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.analytics_data.metadata</code>.
     */
    public final TableField<JAnalyticsDataRecord, JSONB> METADATA = createField(DSL.name("metadata"), org.jooq.impl.SQLDataType.JSONB, this, "");

    /**
     * Create a <code>public.analytics_data</code> table reference
     */
    public JAnalyticsData() {
        this(DSL.name("analytics_data"), null);
    }

    /**
     * Create an aliased <code>public.analytics_data</code> table reference
     */
    public JAnalyticsData(String alias) {
        this(DSL.name(alias), ANALYTICS_DATA);
    }

    /**
     * Create an aliased <code>public.analytics_data</code> table reference
     */
    public JAnalyticsData(Name alias) {
        this(alias, ANALYTICS_DATA);
    }

    private JAnalyticsData(Name alias, Table<JAnalyticsDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private JAnalyticsData(Name alias, Table<JAnalyticsDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JAnalyticsData(Table<O> child, ForeignKey<O, JAnalyticsDataRecord> key) {
        super(child, key, ANALYTICS_DATA);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANALYTICS_DATA_PKEY);
    }

    @Override
    public Identity<JAnalyticsDataRecord, Long> getIdentity() {
        return Keys.IDENTITY_ANALYTICS_DATA;
    }

    @Override
    public UniqueKey<JAnalyticsDataRecord> getPrimaryKey() {
        return Keys.ANALYTICS_DATA_PKEY;
    }

    @Override
    public List<UniqueKey<JAnalyticsDataRecord>> getKeys() {
        return Arrays.<UniqueKey<JAnalyticsDataRecord>>asList(Keys.ANALYTICS_DATA_PKEY);
    }

    @Override
    public JAnalyticsData as(String alias) {
        return new JAnalyticsData(DSL.name(alias), this);
    }

    @Override
    public JAnalyticsData as(Name alias) {
        return new JAnalyticsData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAnalyticsData rename(String name) {
        return new JAnalyticsData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAnalyticsData rename(Name name) {
        return new JAnalyticsData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, Instant, JSONB> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
