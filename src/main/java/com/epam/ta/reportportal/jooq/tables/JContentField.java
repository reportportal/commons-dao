/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JWidget.JWidgetPath;
import com.epam.ta.reportportal.jooq.tables.records.JContentFieldRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JContentField extends TableImpl<JContentFieldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.content_field</code>
     */
    public static final JContentField CONTENT_FIELD = new JContentField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JContentFieldRecord> getRecordType() {
        return JContentFieldRecord.class;
    }

    /**
     * The column <code>public.content_field.id</code>.
     */
    public final TableField<JContentFieldRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.content_field.field</code>.
     */
    public final TableField<JContentFieldRecord, String> FIELD = createField(DSL.name("field"), SQLDataType.VARCHAR.nullable(false), this, "");

    private JContentField(Name alias, Table<JContentFieldRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JContentField(Name alias, Table<JContentFieldRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.content_field</code> table reference
     */
    public JContentField(String alias) {
        this(DSL.name(alias), CONTENT_FIELD);
    }

    /**
     * Create an aliased <code>public.content_field</code> table reference
     */
    public JContentField(Name alias) {
        this(alias, CONTENT_FIELD);
    }

    /**
     * Create a <code>public.content_field</code> table reference
     */
    public JContentField() {
        this(DSL.name("content_field"), null);
    }

    public <O extends Record> JContentField(Table<O> path, ForeignKey<O, JContentFieldRecord> childPath, InverseForeignKey<O, JContentFieldRecord> parentPath) {
        super(path, childPath, parentPath, CONTENT_FIELD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JContentFieldPath extends JContentField implements Path<JContentFieldRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JContentFieldPath(Table<O> path, ForeignKey<O, JContentFieldRecord> childPath, InverseForeignKey<O, JContentFieldRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JContentFieldPath(Name alias, Table<JContentFieldRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JContentFieldPath as(String alias) {
            return new JContentFieldPath(DSL.name(alias), this);
        }

        @Override
        public JContentFieldPath as(Name alias) {
            return new JContentFieldPath(alias, this);
        }

        @Override
        public JContentFieldPath as(Table<?> alias) {
            return new JContentFieldPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CONTENT_FIELD_IDX, Indexes.CONTENT_FIELD_WIDGET_IDX);
    }

    @Override
    public List<ForeignKey<JContentFieldRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTENT_FIELD__CONTENT_FIELD_ID_FKEY);
    }

    private transient JWidgetPath _widget;

    /**
     * Get the implicit join path to the <code>public.widget</code> table.
     */
    public JWidgetPath widget() {
        if (_widget == null)
            _widget = new JWidgetPath(this, Keys.CONTENT_FIELD__CONTENT_FIELD_ID_FKEY, null);

        return _widget;
    }

    @Override
    public JContentField as(String alias) {
        return new JContentField(DSL.name(alias), this);
    }

    @Override
    public JContentField as(Name alias) {
        return new JContentField(alias, this);
    }

    @Override
    public JContentField as(Table<?> alias) {
        return new JContentField(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JContentField rename(String name) {
        return new JContentField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JContentField rename(Name name) {
        return new JContentField(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JContentField rename(Table<?> name) {
        return new JContentField(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JContentField where(Condition condition) {
        return new JContentField(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JContentField where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JContentField where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JContentField where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JContentField where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JContentField where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JContentField where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JContentField where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JContentField whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JContentField whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
