/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JTestItem.JTestItemPath;
import com.epam.ta.reportportal.jooq.tables.records.JParameterRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JParameter extends TableImpl<JParameterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.parameter</code>
     */
    public static final JParameter PARAMETER = new JParameter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JParameterRecord> getRecordType() {
        return JParameterRecord.class;
    }

    /**
     * The column <code>public.parameter.item_id</code>.
     */
    public final TableField<JParameterRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.parameter.key</code>.
     */
    public final TableField<JParameterRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.parameter.value</code>.
     */
    public final TableField<JParameterRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR.nullable(false), this, "");

    private JParameter(Name alias, Table<JParameterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JParameter(Name alias, Table<JParameterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.parameter</code> table reference
     */
    public JParameter(String alias) {
        this(DSL.name(alias), PARAMETER);
    }

    /**
     * Create an aliased <code>public.parameter</code> table reference
     */
    public JParameter(Name alias) {
        this(alias, PARAMETER);
    }

    /**
     * Create a <code>public.parameter</code> table reference
     */
    public JParameter() {
        this(DSL.name("parameter"), null);
    }

    public <O extends Record> JParameter(Table<O> path, ForeignKey<O, JParameterRecord> childPath, InverseForeignKey<O, JParameterRecord> parentPath) {
        super(path, childPath, parentPath, PARAMETER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JParameterPath extends JParameter implements Path<JParameterRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JParameterPath(Table<O> path, ForeignKey<O, JParameterRecord> childPath, InverseForeignKey<O, JParameterRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JParameterPath(Name alias, Table<JParameterRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JParameterPath as(String alias) {
            return new JParameterPath(DSL.name(alias), this);
        }

        @Override
        public JParameterPath as(Name alias) {
            return new JParameterPath(alias, this);
        }

        @Override
        public JParameterPath as(Table<?> alias) {
            return new JParameterPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PARAMETER_TI_IDX);
    }

    @Override
    public List<ForeignKey<JParameterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PARAMETER__PARAMETER_ITEM_ID_FKEY);
    }

    private transient JTestItemPath _testItem;

    /**
     * Get the implicit join path to the <code>public.test_item</code> table.
     */
    public JTestItemPath testItem() {
        if (_testItem == null)
            _testItem = new JTestItemPath(this, Keys.PARAMETER__PARAMETER_ITEM_ID_FKEY, null);

        return _testItem;
    }

    @Override
    public JParameter as(String alias) {
        return new JParameter(DSL.name(alias), this);
    }

    @Override
    public JParameter as(Name alias) {
        return new JParameter(alias, this);
    }

    @Override
    public JParameter as(Table<?> alias) {
        return new JParameter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JParameter rename(String name) {
        return new JParameter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JParameter rename(Name name) {
        return new JParameter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JParameter rename(Table<?> name) {
        return new JParameter(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JParameter where(Condition condition) {
        return new JParameter(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JParameter where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JParameter where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JParameter where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JParameter where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JParameter where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JParameter where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JParameter where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JParameter whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JParameter whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
