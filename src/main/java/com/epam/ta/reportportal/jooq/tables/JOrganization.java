/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JActivity.JActivityPath;
import com.epam.ta.reportportal.jooq.tables.JGroups.JGroupsPath;
import com.epam.ta.reportportal.jooq.tables.JOrganizationUser.JOrganizationUserPath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.JUsers.JUsersPath;
import com.epam.ta.reportportal.jooq.tables.records.JOrganizationRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JOrganization extends TableImpl<JOrganizationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organization</code>
     */
    public static final JOrganization ORGANIZATION = new JOrganization();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOrganizationRecord> getRecordType() {
        return JOrganizationRecord.class;
    }

    /**
     * The column <code>public.organization.id</code>.
     */
    public final TableField<JOrganizationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.organization.created_at</code>.
     */
    public final TableField<JOrganizationRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.organization.updated_at</code>.
     */
    public final TableField<JOrganizationRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.organization.name</code>.
     */
    public final TableField<JOrganizationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.organization.organization_type</code>.
     */
    public final TableField<JOrganizationRecord, String> ORGANIZATION_TYPE = createField(DSL.name("organization_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.organization.external_id</code>.
     */
    public final TableField<JOrganizationRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.organization.slug</code>.
     */
    public final TableField<JOrganizationRecord, String> SLUG = createField(DSL.name("slug"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.organization.user_id</code>.
     */
    public final TableField<JOrganizationRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    private JOrganization(Name alias, Table<JOrganizationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JOrganization(Name alias, Table<JOrganizationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    public JOrganization(String alias) {
        this(DSL.name(alias), ORGANIZATION);
    }

    /**
     * Create an aliased <code>public.organization</code> table reference
     */
    public JOrganization(Name alias) {
        this(alias, ORGANIZATION);
    }

    /**
     * Create a <code>public.organization</code> table reference
     */
    public JOrganization() {
        this(DSL.name("organization"), null);
    }

    public <O extends Record> JOrganization(Table<O> path, ForeignKey<O, JOrganizationRecord> childPath, InverseForeignKey<O, JOrganizationRecord> parentPath) {
        super(path, childPath, parentPath, ORGANIZATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JOrganizationPath extends JOrganization implements Path<JOrganizationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JOrganizationPath(Table<O> path, ForeignKey<O, JOrganizationRecord> childPath, InverseForeignKey<O, JOrganizationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JOrganizationPath(Name alias, Table<JOrganizationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JOrganizationPath as(String alias) {
            return new JOrganizationPath(DSL.name(alias), this);
        }

        @Override
        public JOrganizationPath as(Name alias) {
            return new JOrganizationPath(alias, this);
        }

        @Override
        public JOrganizationPath as(Table<?> alias) {
            return new JOrganizationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ORGANIZATION_SLUG_IDX);
    }

    @Override
    public Identity<JOrganizationRecord, Long> getIdentity() {
        return (Identity<JOrganizationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JOrganizationRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_PKEY;
    }

    @Override
    public List<UniqueKey<JOrganizationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ORGANIZATION_EXTERNAL_ID_KEY, Keys.ORGANIZATION_NAME_KEY, Keys.ORGANIZATION_SLUG_KEY, Keys.UQ_ORGANIZATION_USER_ID);
    }

    @Override
    public List<ForeignKey<JOrganizationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORGANIZATION__FK_ORGANIZATION_USER);
    }

    private transient JUsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public JUsersPath users() {
        if (_users == null)
            _users = new JUsersPath(this, Keys.ORGANIZATION__FK_ORGANIZATION_USER, null);

        return _users;
    }

    private transient JActivityPath _activity;

    /**
     * Get the implicit to-many join path to the <code>public.activity</code>
     * table
     */
    public JActivityPath activity() {
        if (_activity == null)
            _activity = new JActivityPath(this, null, Keys.ACTIVITY__ACTIVITY_ORGANIZATION_ID_FKEY.getInverseKey());

        return _activity;
    }

    private transient JProjectPath _project;

    /**
     * Get the implicit to-many join path to the <code>public.project</code>
     * table
     */
    public JProjectPath project() {
        if (_project == null)
            _project = new JProjectPath(this, null, Keys.PROJECT__FK_PROJECT_ORGANIZATION.getInverseKey());

        return _project;
    }

    private transient JGroupsPath _groups;

    /**
     * Get the implicit to-many join path to the <code>public.groups</code>
     * table
     */
    public JGroupsPath groups() {
        if (_groups == null)
            _groups = new JGroupsPath(this, null, Keys.GROUPS__GROUPS_ORG_ID_FKEY.getInverseKey());

        return _groups;
    }

    private transient JOrganizationUserPath _organizationUser;

    /**
     * Get the implicit to-many join path to the
     * <code>public.organization_user</code> table
     */
    public JOrganizationUserPath organizationUser() {
        if (_organizationUser == null)
            _organizationUser = new JOrganizationUserPath(this, null, Keys.ORGANIZATION_USER__ORGANIZATION_USER_ORGANIZATION_ID_FKEY.getInverseKey());

        return _organizationUser;
    }

    @Override
    public JOrganization as(String alias) {
        return new JOrganization(DSL.name(alias), this);
    }

    @Override
    public JOrganization as(Name alias) {
        return new JOrganization(alias, this);
    }

    @Override
    public JOrganization as(Table<?> alias) {
        return new JOrganization(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganization rename(String name) {
        return new JOrganization(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganization rename(Name name) {
        return new JOrganization(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganization rename(Table<?> name) {
        return new JOrganization(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Condition condition) {
        return new JOrganization(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOrganization where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOrganization whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
