/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JUserPreferenceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JUserPreference extends TableImpl<JUserPreferenceRecord> {

    private static final long serialVersionUID = -11267751;

    /**
     * The reference instance of <code>public.user_preference</code>
     */
    public static final JUserPreference USER_PREFERENCE = new JUserPreference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JUserPreferenceRecord> getRecordType() {
        return JUserPreferenceRecord.class;
    }

    /**
     * The column <code>public.user_preference.id</code>.
     */
    public final TableField<JUserPreferenceRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('user_preference_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.user_preference.project_id</code>.
     */
    public final TableField<JUserPreferenceRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_preference.user_id</code>.
     */
    public final TableField<JUserPreferenceRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_preference.filter_id</code>.
     */
    public final TableField<JUserPreferenceRecord, Long> FILTER_ID = createField("filter_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.user_preference</code> table reference
     */
    public JUserPreference() {
        this(DSL.name("user_preference"), null);
    }

    /**
     * Create an aliased <code>public.user_preference</code> table reference
     */
    public JUserPreference(String alias) {
        this(DSL.name(alias), USER_PREFERENCE);
    }

    /**
     * Create an aliased <code>public.user_preference</code> table reference
     */
    public JUserPreference(Name alias) {
        this(alias, USER_PREFERENCE);
    }

    private JUserPreference(Name alias, Table<JUserPreferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private JUserPreference(Name alias, Table<JUserPreferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JUserPreference(Table<O> child, ForeignKey<O, JUserPreferenceRecord> key) {
        super(child, key, USER_PREFERENCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_PREFERENCE_PK, Indexes.USER_PREFERENCE_UQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JUserPreferenceRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER_PREFERENCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JUserPreferenceRecord> getPrimaryKey() {
        return Keys.USER_PREFERENCE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JUserPreferenceRecord>> getKeys() {
        return Arrays.<UniqueKey<JUserPreferenceRecord>>asList(Keys.USER_PREFERENCE_PK, Keys.USER_PREFERENCE_UQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JUserPreferenceRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JUserPreferenceRecord, ?>>asList(Keys.USER_PREFERENCE__USER_PREFERENCE_PROJECT_ID_FKEY, Keys.USER_PREFERENCE__USER_PREFERENCE_USER_ID_FKEY, Keys.USER_PREFERENCE__USER_PREFERENCE_FILTER_ID_FKEY);
    }

    public JProject project() {
        return new JProject(this, Keys.USER_PREFERENCE__USER_PREFERENCE_PROJECT_ID_FKEY);
    }

    public JUsers users() {
        return new JUsers(this, Keys.USER_PREFERENCE__USER_PREFERENCE_USER_ID_FKEY);
    }

    public JFilter filter() {
        return new JFilter(this, Keys.USER_PREFERENCE__USER_PREFERENCE_FILTER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JUserPreference as(String alias) {
        return new JUserPreference(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JUserPreference as(Name alias) {
        return new JUserPreference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserPreference rename(String name) {
        return new JUserPreference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JUserPreference rename(Name name) {
        return new JUserPreference(name, null);
    }
}
