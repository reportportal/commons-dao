/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JOnboardingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JOnboarding extends TableImpl<JOnboardingRecord> {

    private static final long serialVersionUID = -1798770038;

    /**
     * The reference instance of <code>public.onboarding</code>
     */
    public static final JOnboarding ONBOARDING = new JOnboarding();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOnboardingRecord> getRecordType() {
        return JOnboardingRecord.class;
    }

    /**
     * The column <code>public.onboarding.id</code>.
     */
    public final TableField<JOnboardingRecord, Short> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('onboarding_id_seq'::regclass)", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>public.onboarding.data</code>.
     */
    public final TableField<JOnboardingRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.onboarding.page</code>.
     */
    public final TableField<JOnboardingRecord, String> PAGE = createField(DSL.name("page"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.onboarding.available_from</code>.
     */
    public final TableField<JOnboardingRecord, Timestamp> AVAILABLE_FROM = createField(DSL.name("available_from"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.onboarding.available_to</code>.
     */
    public final TableField<JOnboardingRecord, Timestamp> AVAILABLE_TO = createField(DSL.name("available_to"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.onboarding</code> table reference
     */
    public JOnboarding() {
        this(DSL.name("onboarding"), null);
    }

    /**
     * Create an aliased <code>public.onboarding</code> table reference
     */
    public JOnboarding(String alias) {
        this(DSL.name(alias), ONBOARDING);
    }

    /**
     * Create an aliased <code>public.onboarding</code> table reference
     */
    public JOnboarding(Name alias) {
        this(alias, ONBOARDING);
    }

    private JOnboarding(Name alias, Table<JOnboardingRecord> aliased) {
        this(alias, aliased, null);
    }

    private JOnboarding(Name alias, Table<JOnboardingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JOnboarding(Table<O> child, ForeignKey<O, JOnboardingRecord> key) {
        super(child, key, ONBOARDING);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ONBOARDING_PK);
    }

    @Override
    public Identity<JOnboardingRecord, Short> getIdentity() {
        return Keys.IDENTITY_ONBOARDING;
    }

    @Override
    public UniqueKey<JOnboardingRecord> getPrimaryKey() {
        return Keys.ONBOARDING_PK;
    }

    @Override
    public List<UniqueKey<JOnboardingRecord>> getKeys() {
        return Arrays.<UniqueKey<JOnboardingRecord>>asList(Keys.ONBOARDING_PK);
    }

    @Override
    public JOnboarding as(String alias) {
        return new JOnboarding(DSL.name(alias), this);
    }

    @Override
    public JOnboarding as(Name alias) {
        return new JOnboarding(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOnboarding rename(String name) {
        return new JOnboarding(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOnboarding rename(Name name) {
        return new JOnboarding(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, String, String, Timestamp, Timestamp> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
