/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JOnboardingRecord;

import java.time.Instant;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JOnboarding extends TableImpl<JOnboardingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.onboarding</code>
     */
    public static final JOnboarding ONBOARDING = new JOnboarding();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOnboardingRecord> getRecordType() {
        return JOnboardingRecord.class;
    }

    /**
     * The column <code>public.onboarding.id</code>.
     */
    public final TableField<JOnboardingRecord, Short> ID = createField(DSL.name("id"), SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.onboarding.data</code>.
     */
    public final TableField<JOnboardingRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.onboarding.page</code>.
     */
    public final TableField<JOnboardingRecord, String> PAGE = createField(DSL.name("page"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.onboarding.available_from</code>.
     */
    public final TableField<JOnboardingRecord, Instant> AVAILABLE_FROM = createField(DSL.name("available_from"), SQLDataType.LOCALDATETIME(6), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.onboarding.available_to</code>.
     */
    public final TableField<JOnboardingRecord, Instant> AVAILABLE_TO = createField(DSL.name("available_to"), SQLDataType.LOCALDATETIME(6), this, "", new JooqInstantConverter());

    private JOnboarding(Name alias, Table<JOnboardingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JOnboarding(Name alias, Table<JOnboardingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.onboarding</code> table reference
     */
    public JOnboarding(String alias) {
        this(DSL.name(alias), ONBOARDING);
    }

    /**
     * Create an aliased <code>public.onboarding</code> table reference
     */
    public JOnboarding(Name alias) {
        this(alias, ONBOARDING);
    }

    /**
     * Create a <code>public.onboarding</code> table reference
     */
    public JOnboarding() {
        this(DSL.name("onboarding"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JOnboardingRecord, Short> getIdentity() {
        return (Identity<JOnboardingRecord, Short>) super.getIdentity();
    }

    @Override
    public UniqueKey<JOnboardingRecord> getPrimaryKey() {
        return Keys.ONBOARDING_PK;
    }

    @Override
    public JOnboarding as(String alias) {
        return new JOnboarding(DSL.name(alias), this);
    }

    @Override
    public JOnboarding as(Name alias) {
        return new JOnboarding(alias, this);
    }

    @Override
    public JOnboarding as(Table<?> alias) {
        return new JOnboarding(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOnboarding rename(String name) {
        return new JOnboarding(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOnboarding rename(Name name) {
        return new JOnboarding(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOnboarding rename(Table<?> name) {
        return new JOnboarding(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOnboarding where(Condition condition) {
        return new JOnboarding(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOnboarding where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOnboarding where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOnboarding where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOnboarding where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOnboarding where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOnboarding where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOnboarding where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOnboarding whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOnboarding whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
