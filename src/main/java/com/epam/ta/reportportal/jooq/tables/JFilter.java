/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JFilterCondition.JFilterConditionPath;
import com.epam.ta.reportportal.jooq.tables.JFilterSort.JFilterSortPath;
import com.epam.ta.reportportal.jooq.tables.JOwnedEntity.JOwnedEntityPath;
import com.epam.ta.reportportal.jooq.tables.JUserPreference.JUserPreferencePath;
import com.epam.ta.reportportal.jooq.tables.JWidget.JWidgetPath;
import com.epam.ta.reportportal.jooq.tables.JWidgetFilter.JWidgetFilterPath;
import com.epam.ta.reportportal.jooq.tables.records.JFilterRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JFilter extends TableImpl<JFilterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.filter</code>
     */
    public static final JFilter FILTER = new JFilter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFilterRecord> getRecordType() {
        return JFilterRecord.class;
    }

    /**
     * The column <code>public.filter.id</code>.
     */
    public final TableField<JFilterRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.filter.name</code>.
     */
    public final TableField<JFilterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.filter.target</code>.
     */
    public final TableField<JFilterRecord, String> TARGET = createField(DSL.name("target"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.filter.description</code>.
     */
    public final TableField<JFilterRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    private JFilter(Name alias, Table<JFilterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JFilter(Name alias, Table<JFilterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.filter</code> table reference
     */
    public JFilter(String alias) {
        this(DSL.name(alias), FILTER);
    }

    /**
     * Create an aliased <code>public.filter</code> table reference
     */
    public JFilter(Name alias) {
        this(alias, FILTER);
    }

    /**
     * Create a <code>public.filter</code> table reference
     */
    public JFilter() {
        this(DSL.name("filter"), null);
    }

    public <O extends Record> JFilter(Table<O> path, ForeignKey<O, JFilterRecord> childPath, InverseForeignKey<O, JFilterRecord> parentPath) {
        super(path, childPath, parentPath, FILTER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JFilterPath extends JFilter implements Path<JFilterRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JFilterPath(Table<O> path, ForeignKey<O, JFilterRecord> childPath, InverseForeignKey<O, JFilterRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JFilterPath(Name alias, Table<JFilterRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JFilterPath as(String alias) {
            return new JFilterPath(DSL.name(alias), this);
        }

        @Override
        public JFilterPath as(Name alias) {
            return new JFilterPath(alias, this);
        }

        @Override
        public JFilterPath as(Table<?> alias) {
            return new JFilterPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JFilterRecord> getPrimaryKey() {
        return Keys.FILTER_PKEY;
    }

    @Override
    public List<ForeignKey<JFilterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILTER__FILTER_ID_FK);
    }

    private transient JOwnedEntityPath _ownedEntity;

    /**
     * Get the implicit join path to the <code>public.owned_entity</code> table.
     */
    public JOwnedEntityPath ownedEntity() {
        if (_ownedEntity == null)
            _ownedEntity = new JOwnedEntityPath(this, Keys.FILTER__FILTER_ID_FK, null);

        return _ownedEntity;
    }

    private transient JFilterConditionPath _filterCondition;

    /**
     * Get the implicit to-many join path to the
     * <code>public.filter_condition</code> table
     */
    public JFilterConditionPath filterCondition() {
        if (_filterCondition == null)
            _filterCondition = new JFilterConditionPath(this, null, Keys.FILTER_CONDITION__FILTER_CONDITION_FILTER_ID_FKEY.getInverseKey());

        return _filterCondition;
    }

    private transient JFilterSortPath _filterSort;

    /**
     * Get the implicit to-many join path to the <code>public.filter_sort</code>
     * table
     */
    public JFilterSortPath filterSort() {
        if (_filterSort == null)
            _filterSort = new JFilterSortPath(this, null, Keys.FILTER_SORT__FILTER_SORT_FILTER_ID_FKEY.getInverseKey());

        return _filterSort;
    }

    private transient JUserPreferencePath _userPreference;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_preference</code> table
     */
    public JUserPreferencePath userPreference() {
        if (_userPreference == null)
            _userPreference = new JUserPreferencePath(this, null, Keys.USER_PREFERENCE__USER_PREFERENCE_FILTER_ID_FKEY.getInverseKey());

        return _userPreference;
    }

    private transient JWidgetFilterPath _widgetFilter;

    /**
     * Get the implicit to-many join path to the
     * <code>public.widget_filter</code> table
     */
    public JWidgetFilterPath widgetFilter() {
        if (_widgetFilter == null)
            _widgetFilter = new JWidgetFilterPath(this, null, Keys.WIDGET_FILTER__WIDGET_FILTER_FILTER_ID_FKEY.getInverseKey());

        return _widgetFilter;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.widget</code>
     * table
     */
    public JWidgetPath widget() {
        return widgetFilter().widget();
    }

    @Override
    public JFilter as(String alias) {
        return new JFilter(DSL.name(alias), this);
    }

    @Override
    public JFilter as(Name alias) {
        return new JFilter(alias, this);
    }

    @Override
    public JFilter as(Table<?> alias) {
        return new JFilter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilter rename(String name) {
        return new JFilter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilter rename(Name name) {
        return new JFilter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilter rename(Table<?> name) {
        return new JFilter(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilter where(Condition condition) {
        return new JFilter(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilter where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilter where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilter where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilter where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilter where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilter where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilter where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilter whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilter whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
