/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JBaseEntityRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBaseEntity extends TableImpl<JBaseEntityRecord> {

    private static final long serialVersionUID = -1589342518;

    /**
     * The reference instance of <code>public.base_entity</code>
     */
    public static final JBaseEntity BASE_ENTITY = new JBaseEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JBaseEntityRecord> getRecordType() {
        return JBaseEntityRecord.class;
    }

    /**
     * The column <code>public.base_entity.id</code>.
     */
    public final TableField<JBaseEntityRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('shareable_entity_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.base_entity.owner</code>.
     */
    public final TableField<JBaseEntityRecord, String> OWNER = createField(DSL.name("owner"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.base_entity.project_id</code>.
     */
    public final TableField<JBaseEntityRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.base_entity</code> table reference
     */
    public JBaseEntity() {
        this(DSL.name("base_entity"), null);
    }

    /**
     * Create an aliased <code>public.base_entity</code> table reference
     */
    public JBaseEntity(String alias) {
        this(DSL.name(alias), BASE_ENTITY);
    }

    /**
     * Create an aliased <code>public.base_entity</code> table reference
     */
    public JBaseEntity(Name alias) {
        this(alias, BASE_ENTITY);
    }

    private JBaseEntity(Name alias, Table<JBaseEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private JBaseEntity(Name alias, Table<JBaseEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JBaseEntity(Table<O> child, ForeignKey<O, JBaseEntityRecord> key) {
        super(child, key, BASE_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHAREABLE_PK, Indexes.SHARED_ENTITY_OWNERX, Indexes.SHARED_ENTITY_PROJECT_IDX);
    }

    @Override
    public Identity<JBaseEntityRecord, Long> getIdentity() {
        return Keys.IDENTITY_BASE_ENTITY;
    }

    @Override
    public UniqueKey<JBaseEntityRecord> getPrimaryKey() {
        return Keys.SHAREABLE_PK;
    }

    @Override
    public List<UniqueKey<JBaseEntityRecord>> getKeys() {
        return Arrays.<UniqueKey<JBaseEntityRecord>>asList(Keys.SHAREABLE_PK);
    }

    @Override
    public List<ForeignKey<JBaseEntityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JBaseEntityRecord, ?>>asList(Keys.BASE_ENTITY__SHAREABLE_ENTITY_OWNER_FKEY, Keys.BASE_ENTITY__SHAREABLE_ENTITY_PROJECT_ID_FKEY);
    }

    public JUsers users() {
        return new JUsers(this, Keys.BASE_ENTITY__SHAREABLE_ENTITY_OWNER_FKEY);
    }

    public JProject project() {
        return new JProject(this, Keys.BASE_ENTITY__SHAREABLE_ENTITY_PROJECT_ID_FKEY);
    }

    @Override
    public JBaseEntity as(String alias) {
        return new JBaseEntity(DSL.name(alias), this);
    }

    @Override
    public JBaseEntity as(Name alias) {
        return new JBaseEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBaseEntity rename(String name) {
        return new JBaseEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBaseEntity rename(Name name) {
        return new JBaseEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
