/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JAttachmentDeletionRecord;

import java.time.Instant;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JAttachmentDeletion extends TableImpl<JAttachmentDeletionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.attachment_deletion</code>
     */
    public static final JAttachmentDeletion ATTACHMENT_DELETION = new JAttachmentDeletion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JAttachmentDeletionRecord> getRecordType() {
        return JAttachmentDeletionRecord.class;
    }

    /**
     * The column <code>public.attachment_deletion.id</code>.
     */
    public final TableField<JAttachmentDeletionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.attachment_deletion.file_id</code>.
     */
    public final TableField<JAttachmentDeletionRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.attachment_deletion.thumbnail_id</code>.
     */
    public final TableField<JAttachmentDeletionRecord, String> THUMBNAIL_ID = createField(DSL.name("thumbnail_id"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>public.attachment_deletion.creation_attachment_date</code>.
     */
    public final TableField<JAttachmentDeletionRecord, Instant> CREATION_ATTACHMENT_DATE = createField(DSL.name("creation_attachment_date"), SQLDataType.LOCALDATETIME(6), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.attachment_deletion.deletion_date</code>.
     */
    public final TableField<JAttachmentDeletionRecord, Instant> DELETION_DATE = createField(DSL.name("deletion_date"), SQLDataType.LOCALDATETIME(6), this, "", new JooqInstantConverter());

    private JAttachmentDeletion(Name alias, Table<JAttachmentDeletionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JAttachmentDeletion(Name alias, Table<JAttachmentDeletionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.attachment_deletion</code> table reference
     */
    public JAttachmentDeletion(String alias) {
        this(DSL.name(alias), ATTACHMENT_DELETION);
    }

    /**
     * Create an aliased <code>public.attachment_deletion</code> table reference
     */
    public JAttachmentDeletion(Name alias) {
        this(alias, ATTACHMENT_DELETION);
    }

    /**
     * Create a <code>public.attachment_deletion</code> table reference
     */
    public JAttachmentDeletion() {
        this(DSL.name("attachment_deletion"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JAttachmentDeletionRecord> getPrimaryKey() {
        return Keys.ATTACHMENT_DELETION_PKEY;
    }

    @Override
    public JAttachmentDeletion as(String alias) {
        return new JAttachmentDeletion(DSL.name(alias), this);
    }

    @Override
    public JAttachmentDeletion as(Name alias) {
        return new JAttachmentDeletion(alias, this);
    }

    @Override
    public JAttachmentDeletion as(Table<?> alias) {
        return new JAttachmentDeletion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAttachmentDeletion rename(String name) {
        return new JAttachmentDeletion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAttachmentDeletion rename(Name name) {
        return new JAttachmentDeletion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAttachmentDeletion rename(Table<?> name) {
        return new JAttachmentDeletion(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachmentDeletion where(Condition condition) {
        return new JAttachmentDeletion(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachmentDeletion where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachmentDeletion where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachmentDeletion where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachmentDeletion where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachmentDeletion where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachmentDeletion where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachmentDeletion where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachmentDeletion whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachmentDeletion whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
