/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JOwnedEntityRecord;
import java.util.Arrays;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JOwnedEntity extends TableImpl<JOwnedEntityRecord> {

    private static final long serialVersionUID = 1859921375;

    /**
     * The reference instance of <code>public.owned_entity</code>
     */
    public static final JOwnedEntity OWNED_ENTITY = new JOwnedEntity();
  /**
   * The column <code>public.owned_entity.id</code>.
   */
  public final TableField<JOwnedEntityRecord, Long> ID = createField(DSL.name("id"),
      org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(
          org.jooq.impl.DSL.field("nextval('shareable_entity_id_seq'::regclass)",
              org.jooq.impl.SQLDataType.BIGINT)), this, "");
  /**
   * The column <code>public.owned_entity.owner</code>.
   */
  public final TableField<JOwnedEntityRecord, String> OWNER = createField(DSL.name("owner"),
      org.jooq.impl.SQLDataType.VARCHAR, this, "");
  /**
   * The column <code>public.owned_entity.project_id</code>.
   */
  public final TableField<JOwnedEntityRecord, Long> PROJECT_ID = createField(DSL.name("project_id"),
      org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * Create a <code>public.owned_entity</code> table reference
   */
  public JOwnedEntity() {
        this(DSL.name("owned_entity"), null);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOwnedEntityRecord> getRecordType() {
      return JOwnedEntityRecord.class;
    }

    /**
     * Create an aliased <code>public.owned_entity</code> table reference
     */
    public JOwnedEntity(String alias) {
        this(DSL.name(alias), OWNED_ENTITY);
    }

    /**
     * Create an aliased <code>public.owned_entity</code> table reference
     */
    public JOwnedEntity(Name alias) {
        this(alias, OWNED_ENTITY);
    }

    private JOwnedEntity(Name alias, Table<JOwnedEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private JOwnedEntity(Name alias, Table<JOwnedEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JOwnedEntity(Table<O> child, ForeignKey<O, JOwnedEntityRecord> key) {
        super(child, key, OWNED_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHAREABLE_PK, Indexes.SHARED_ENTITY_OWNERX, Indexes.SHARED_ENTITY_PROJECT_IDX);
    }

    @Override
    public Identity<JOwnedEntityRecord, Long> getIdentity() {
        return Keys.IDENTITY_OWNED_ENTITY;
    }

    @Override
    public UniqueKey<JOwnedEntityRecord> getPrimaryKey() {
        return Keys.SHAREABLE_PK;
    }

    @Override
    public List<UniqueKey<JOwnedEntityRecord>> getKeys() {
        return Arrays.<UniqueKey<JOwnedEntityRecord>>asList(Keys.SHAREABLE_PK);
    }

    @Override
    public List<ForeignKey<JOwnedEntityRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JOwnedEntityRecord, ?>>asList(
            Keys.OWNED_ENTITY__SHAREABLE_ENTITY_PROJECT_ID_FKEY);
    }

  public JProject project() {
        return new JProject(this, Keys.OWNED_ENTITY__SHAREABLE_ENTITY_PROJECT_ID_FKEY);
    }

    @Override
    public JOwnedEntity as(String alias) {
        return new JOwnedEntity(DSL.name(alias), this);
    }

    @Override
    public JOwnedEntity as(Name alias) {
        return new JOwnedEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOwnedEntity rename(String name) {
        return new JOwnedEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOwnedEntity rename(Name name) {
        return new JOwnedEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
