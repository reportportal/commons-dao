/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JDashboard.JDashboardPath;
import com.epam.ta.reportportal.jooq.tables.JFilter.JFilterPath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.JWidget.JWidgetPath;
import com.epam.ta.reportportal.jooq.tables.records.JOwnedEntityRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JOwnedEntity extends TableImpl<JOwnedEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.owned_entity</code>
     */
    public static final JOwnedEntity OWNED_ENTITY = new JOwnedEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOwnedEntityRecord> getRecordType() {
        return JOwnedEntityRecord.class;
    }

    /**
     * The column <code>public.owned_entity.id</code>.
     */
    public final TableField<JOwnedEntityRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.owned_entity.owner</code>.
     */
    public final TableField<JOwnedEntityRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.owned_entity.project_id</code>.
     */
    public final TableField<JOwnedEntityRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private JOwnedEntity(Name alias, Table<JOwnedEntityRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JOwnedEntity(Name alias, Table<JOwnedEntityRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.owned_entity</code> table reference
     */
    public JOwnedEntity(String alias) {
        this(DSL.name(alias), OWNED_ENTITY);
    }

    /**
     * Create an aliased <code>public.owned_entity</code> table reference
     */
    public JOwnedEntity(Name alias) {
        this(alias, OWNED_ENTITY);
    }

    /**
     * Create a <code>public.owned_entity</code> table reference
     */
    public JOwnedEntity() {
        this(DSL.name("owned_entity"), null);
    }

    public <O extends Record> JOwnedEntity(Table<O> path, ForeignKey<O, JOwnedEntityRecord> childPath, InverseForeignKey<O, JOwnedEntityRecord> parentPath) {
        super(path, childPath, parentPath, OWNED_ENTITY);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JOwnedEntityPath extends JOwnedEntity implements Path<JOwnedEntityRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JOwnedEntityPath(Table<O> path, ForeignKey<O, JOwnedEntityRecord> childPath, InverseForeignKey<O, JOwnedEntityRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JOwnedEntityPath(Name alias, Table<JOwnedEntityRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JOwnedEntityPath as(String alias) {
            return new JOwnedEntityPath(DSL.name(alias), this);
        }

        @Override
        public JOwnedEntityPath as(Name alias) {
            return new JOwnedEntityPath(alias, this);
        }

        @Override
        public JOwnedEntityPath as(Table<?> alias) {
            return new JOwnedEntityPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SHARED_ENTITY_OWNERX, Indexes.SHARED_ENTITY_PROJECT_IDX);
    }

    @Override
    public Identity<JOwnedEntityRecord, Long> getIdentity() {
        return (Identity<JOwnedEntityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JOwnedEntityRecord> getPrimaryKey() {
        return Keys.SHAREABLE_PK;
    }

    @Override
    public List<ForeignKey<JOwnedEntityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OWNED_ENTITY__SHAREABLE_ENTITY_PROJECT_ID_FKEY);
    }

    private transient JProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public JProjectPath project() {
        if (_project == null)
            _project = new JProjectPath(this, Keys.OWNED_ENTITY__SHAREABLE_ENTITY_PROJECT_ID_FKEY, null);

        return _project;
    }

    private transient JDashboardPath _dashboard;

    /**
     * Get the implicit to-many join path to the <code>public.dashboard</code>
     * table
     */
    public JDashboardPath dashboard() {
        if (_dashboard == null)
            _dashboard = new JDashboardPath(this, null, Keys.DASHBOARD__DASHBOARD_ID_FK.getInverseKey());

        return _dashboard;
    }

    private transient JFilterPath _filter;

    /**
     * Get the implicit to-many join path to the <code>public.filter</code>
     * table
     */
    public JFilterPath filter() {
        if (_filter == null)
            _filter = new JFilterPath(this, null, Keys.FILTER__FILTER_ID_FK.getInverseKey());

        return _filter;
    }

    private transient JWidgetPath _widget;

    /**
     * Get the implicit to-many join path to the <code>public.widget</code>
     * table
     */
    public JWidgetPath widget() {
        if (_widget == null)
            _widget = new JWidgetPath(this, null, Keys.WIDGET__WIDGET_ID_FK.getInverseKey());

        return _widget;
    }

    @Override
    public JOwnedEntity as(String alias) {
        return new JOwnedEntity(DSL.name(alias), this);
    }

    @Override
    public JOwnedEntity as(Name alias) {
        return new JOwnedEntity(alias, this);
    }

    @Override
    public JOwnedEntity as(Table<?> alias) {
        return new JOwnedEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOwnedEntity rename(String name) {
        return new JOwnedEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOwnedEntity rename(Name name) {
        return new JOwnedEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOwnedEntity rename(Table<?> name) {
        return new JOwnedEntity(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOwnedEntity where(Condition condition) {
        return new JOwnedEntity(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOwnedEntity where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOwnedEntity where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOwnedEntity where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOwnedEntity where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOwnedEntity where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOwnedEntity where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOwnedEntity where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOwnedEntity whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOwnedEntity whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
