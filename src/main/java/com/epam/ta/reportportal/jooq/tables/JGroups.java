/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JGroupsProjects.JGroupsProjectsPath;
import com.epam.ta.reportportal.jooq.tables.JGroupsUsers.JGroupsUsersPath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.JUsers.JUsersPath;
import com.epam.ta.reportportal.jooq.tables.records.JGroupsRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JGroups extends TableImpl<JGroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.groups</code>
     */
    public static final JGroups GROUPS = new JGroups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JGroupsRecord> getRecordType() {
        return JGroupsRecord.class;
    }

    /**
     * The column <code>public.groups.id</code>.
     */
    public final TableField<JGroupsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.groups.slug</code>.
     */
    public final TableField<JGroupsRecord, String> SLUG = createField(DSL.name("slug"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.groups.name</code>.
     */
    public final TableField<JGroupsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.groups.created_by</code>.
     */
    public final TableField<JGroupsRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.groups.created_at</code>.
     */
    public final TableField<JGroupsRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.groups.updated_at</code>.
     */
    public final TableField<JGroupsRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    private JGroups(Name alias, Table<JGroupsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JGroups(Name alias, Table<JGroupsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.groups</code> table reference
     */
    public JGroups(String alias) {
        this(DSL.name(alias), GROUPS);
    }

    /**
     * Create an aliased <code>public.groups</code> table reference
     */
    public JGroups(Name alias) {
        this(alias, GROUPS);
    }

    /**
     * Create a <code>public.groups</code> table reference
     */
    public JGroups() {
        this(DSL.name("groups"), null);
    }

    public <O extends Record> JGroups(Table<O> path, ForeignKey<O, JGroupsRecord> childPath, InverseForeignKey<O, JGroupsRecord> parentPath) {
        super(path, childPath, parentPath, GROUPS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JGroupsPath extends JGroups implements Path<JGroupsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JGroupsPath(Table<O> path, ForeignKey<O, JGroupsRecord> childPath, InverseForeignKey<O, JGroupsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JGroupsPath(Name alias, Table<JGroupsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JGroupsPath as(String alias) {
            return new JGroupsPath(DSL.name(alias), this);
        }

        @Override
        public JGroupsPath as(Name alias) {
            return new JGroupsPath(alias, this);
        }

        @Override
        public JGroupsPath as(Table<?> alias) {
            return new JGroupsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JGroupsRecord, Long> getIdentity() {
        return (Identity<JGroupsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JGroupsRecord> getPrimaryKey() {
        return Keys.GROUPS_PKEY;
    }

    @Override
    public List<UniqueKey<JGroupsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.GROUPS_SLUG_KEY);
    }

    @Override
    public List<ForeignKey<JGroupsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GROUPS__GROUPS_CREATED_BY_FKEY);
    }

    private transient JUsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public JUsersPath users() {
        if (_users == null)
            _users = new JUsersPath(this, Keys.GROUPS__GROUPS_CREATED_BY_FKEY, null);

        return _users;
    }

    private transient JGroupsProjectsPath _groupsProjects;

    /**
     * Get the implicit to-many join path to the
     * <code>public.groups_projects</code> table
     */
    public JGroupsProjectsPath groupsProjects() {
        if (_groupsProjects == null)
            _groupsProjects = new JGroupsProjectsPath(this, null, Keys.GROUPS_PROJECTS__GROUPS_PROJECTS_GROUP_ID_FKEY.getInverseKey());

        return _groupsProjects;
    }

    private transient JGroupsUsersPath _groupsUsers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.groups_users</code> table
     */
    public JGroupsUsersPath groupsUsers() {
        if (_groupsUsers == null)
            _groupsUsers = new JGroupsUsersPath(this, null, Keys.GROUPS_USERS__GROUPS_USERS_GROUP_ID_FKEY.getInverseKey());

        return _groupsUsers;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.project</code> table
     */
    public JProjectPath project() {
        return groupsProjects().project();
    }

    @Override
    public JGroups as(String alias) {
        return new JGroups(DSL.name(alias), this);
    }

    @Override
    public JGroups as(Name alias) {
        return new JGroups(alias, this);
    }

    @Override
    public JGroups as(Table<?> alias) {
        return new JGroups(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroups rename(String name) {
        return new JGroups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroups rename(Name name) {
        return new JGroups(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroups rename(Table<?> name) {
        return new JGroups(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroups where(Condition condition) {
        return new JGroups(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroups where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroups where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroups where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroups where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroups where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroups where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroups where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroups whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroups whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
