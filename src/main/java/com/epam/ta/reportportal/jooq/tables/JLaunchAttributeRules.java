/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JSenderCase.JSenderCasePath;
import com.epam.ta.reportportal.jooq.tables.records.JLaunchAttributeRulesRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JLaunchAttributeRules extends TableImpl<JLaunchAttributeRulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.launch_attribute_rules</code>
     */
    public static final JLaunchAttributeRules LAUNCH_ATTRIBUTE_RULES = new JLaunchAttributeRules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JLaunchAttributeRulesRecord> getRecordType() {
        return JLaunchAttributeRulesRecord.class;
    }

    /**
     * The column <code>public.launch_attribute_rules.id</code>.
     */
    public final TableField<JLaunchAttributeRulesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.launch_attribute_rules.sender_case_id</code>.
     */
    public final TableField<JLaunchAttributeRulesRecord, Long> SENDER_CASE_ID = createField(DSL.name("sender_case_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.launch_attribute_rules.key</code>.
     */
    public final TableField<JLaunchAttributeRulesRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>public.launch_attribute_rules.value</code>.
     */
    public final TableField<JLaunchAttributeRulesRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    private JLaunchAttributeRules(Name alias, Table<JLaunchAttributeRulesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JLaunchAttributeRules(Name alias, Table<JLaunchAttributeRulesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.launch_attribute_rules</code> table
     * reference
     */
    public JLaunchAttributeRules(String alias) {
        this(DSL.name(alias), LAUNCH_ATTRIBUTE_RULES);
    }

    /**
     * Create an aliased <code>public.launch_attribute_rules</code> table
     * reference
     */
    public JLaunchAttributeRules(Name alias) {
        this(alias, LAUNCH_ATTRIBUTE_RULES);
    }

    /**
     * Create a <code>public.launch_attribute_rules</code> table reference
     */
    public JLaunchAttributeRules() {
        this(DSL.name("launch_attribute_rules"), null);
    }

    public <O extends Record> JLaunchAttributeRules(Table<O> path, ForeignKey<O, JLaunchAttributeRulesRecord> childPath, InverseForeignKey<O, JLaunchAttributeRulesRecord> parentPath) {
        super(path, childPath, parentPath, LAUNCH_ATTRIBUTE_RULES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JLaunchAttributeRulesPath extends JLaunchAttributeRules implements Path<JLaunchAttributeRulesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JLaunchAttributeRulesPath(Table<O> path, ForeignKey<O, JLaunchAttributeRulesRecord> childPath, InverseForeignKey<O, JLaunchAttributeRulesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JLaunchAttributeRulesPath(Name alias, Table<JLaunchAttributeRulesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JLaunchAttributeRulesPath as(String alias) {
            return new JLaunchAttributeRulesPath(DSL.name(alias), this);
        }

        @Override
        public JLaunchAttributeRulesPath as(Name alias) {
            return new JLaunchAttributeRulesPath(alias, this);
        }

        @Override
        public JLaunchAttributeRulesPath as(Table<?> alias) {
            return new JLaunchAttributeRulesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.L_ATTR_RL_SEND_CASE_IDX);
    }

    @Override
    public Identity<JLaunchAttributeRulesRecord, Long> getIdentity() {
        return (Identity<JLaunchAttributeRulesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JLaunchAttributeRulesRecord> getPrimaryKey() {
        return Keys.LAUNCH_ATTRIBUTE_RULES_PK;
    }

    @Override
    public List<ForeignKey<JLaunchAttributeRulesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LAUNCH_ATTRIBUTE_RULES__LAUNCH_ATTRIBUTE_RULES_SENDER_CASE_ID_FKEY);
    }

    private transient JSenderCasePath _senderCase;

    /**
     * Get the implicit join path to the <code>public.sender_case</code> table.
     */
    public JSenderCasePath senderCase() {
        if (_senderCase == null)
            _senderCase = new JSenderCasePath(this, Keys.LAUNCH_ATTRIBUTE_RULES__LAUNCH_ATTRIBUTE_RULES_SENDER_CASE_ID_FKEY, null);

        return _senderCase;
    }

    @Override
    public JLaunchAttributeRules as(String alias) {
        return new JLaunchAttributeRules(DSL.name(alias), this);
    }

    @Override
    public JLaunchAttributeRules as(Name alias) {
        return new JLaunchAttributeRules(alias, this);
    }

    @Override
    public JLaunchAttributeRules as(Table<?> alias) {
        return new JLaunchAttributeRules(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JLaunchAttributeRules rename(String name) {
        return new JLaunchAttributeRules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JLaunchAttributeRules rename(Name name) {
        return new JLaunchAttributeRules(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JLaunchAttributeRules rename(Table<?> name) {
        return new JLaunchAttributeRules(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLaunchAttributeRules where(Condition condition) {
        return new JLaunchAttributeRules(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLaunchAttributeRules where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLaunchAttributeRules where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLaunchAttributeRules where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLaunchAttributeRules where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLaunchAttributeRules where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLaunchAttributeRules where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JLaunchAttributeRules where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLaunchAttributeRules whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JLaunchAttributeRules whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
