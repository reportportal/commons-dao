/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JPatternTemplate.JPatternTemplatePath;
import com.epam.ta.reportportal.jooq.tables.JTestItem.JTestItemPath;
import com.epam.ta.reportportal.jooq.tables.records.JPatternTemplateTestItemRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JPatternTemplateTestItem extends TableImpl<JPatternTemplateTestItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pattern_template_test_item</code>
     */
    public static final JPatternTemplateTestItem PATTERN_TEMPLATE_TEST_ITEM = new JPatternTemplateTestItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPatternTemplateTestItemRecord> getRecordType() {
        return JPatternTemplateTestItemRecord.class;
    }

    /**
     * The column <code>public.pattern_template_test_item.pattern_id</code>.
     */
    public final TableField<JPatternTemplateTestItemRecord, Long> PATTERN_ID = createField(DSL.name("pattern_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pattern_template_test_item.item_id</code>.
     */
    public final TableField<JPatternTemplateTestItemRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private JPatternTemplateTestItem(Name alias, Table<JPatternTemplateTestItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JPatternTemplateTestItem(Name alias, Table<JPatternTemplateTestItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.pattern_template_test_item</code> table
     * reference
     */
    public JPatternTemplateTestItem(String alias) {
        this(DSL.name(alias), PATTERN_TEMPLATE_TEST_ITEM);
    }

    /**
     * Create an aliased <code>public.pattern_template_test_item</code> table
     * reference
     */
    public JPatternTemplateTestItem(Name alias) {
        this(alias, PATTERN_TEMPLATE_TEST_ITEM);
    }

    /**
     * Create a <code>public.pattern_template_test_item</code> table reference
     */
    public JPatternTemplateTestItem() {
        this(DSL.name("pattern_template_test_item"), null);
    }

    public <O extends Record> JPatternTemplateTestItem(Table<O> path, ForeignKey<O, JPatternTemplateTestItemRecord> childPath, InverseForeignKey<O, JPatternTemplateTestItemRecord> parentPath) {
        super(path, childPath, parentPath, PATTERN_TEMPLATE_TEST_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JPatternTemplateTestItemPath extends JPatternTemplateTestItem implements Path<JPatternTemplateTestItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JPatternTemplateTestItemPath(Table<O> path, ForeignKey<O, JPatternTemplateTestItemRecord> childPath, InverseForeignKey<O, JPatternTemplateTestItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JPatternTemplateTestItemPath(Name alias, Table<JPatternTemplateTestItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JPatternTemplateTestItemPath as(String alias) {
            return new JPatternTemplateTestItemPath(DSL.name(alias), this);
        }

        @Override
        public JPatternTemplateTestItemPath as(Name alias) {
            return new JPatternTemplateTestItemPath(alias, this);
        }

        @Override
        public JPatternTemplateTestItemPath as(Table<?> alias) {
            return new JPatternTemplateTestItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PATTERN_ITEM_ITEM_ID_IDX);
    }

    @Override
    public UniqueKey<JPatternTemplateTestItemRecord> getPrimaryKey() {
        return Keys.PATTERN_ITEM_UNQ;
    }

    @Override
    public List<ForeignKey<JPatternTemplateTestItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_ITEM_ID_FKEY, Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_PATTERN_ID_FKEY);
    }

    private transient JTestItemPath _testItem;

    /**
     * Get the implicit join path to the <code>public.test_item</code> table.
     */
    public JTestItemPath testItem() {
        if (_testItem == null)
            _testItem = new JTestItemPath(this, Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_ITEM_ID_FKEY, null);

        return _testItem;
    }

    private transient JPatternTemplatePath _patternTemplate;

    /**
     * Get the implicit join path to the <code>public.pattern_template</code>
     * table.
     */
    public JPatternTemplatePath patternTemplate() {
        if (_patternTemplate == null)
            _patternTemplate = new JPatternTemplatePath(this, Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_PATTERN_ID_FKEY, null);

        return _patternTemplate;
    }

    @Override
    public JPatternTemplateTestItem as(String alias) {
        return new JPatternTemplateTestItem(DSL.name(alias), this);
    }

    @Override
    public JPatternTemplateTestItem as(Name alias) {
        return new JPatternTemplateTestItem(alias, this);
    }

    @Override
    public JPatternTemplateTestItem as(Table<?> alias) {
        return new JPatternTemplateTestItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPatternTemplateTestItem rename(String name) {
        return new JPatternTemplateTestItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPatternTemplateTestItem rename(Name name) {
        return new JPatternTemplateTestItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPatternTemplateTestItem rename(Table<?> name) {
        return new JPatternTemplateTestItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPatternTemplateTestItem where(Condition condition) {
        return new JPatternTemplateTestItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPatternTemplateTestItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPatternTemplateTestItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPatternTemplateTestItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPatternTemplateTestItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPatternTemplateTestItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPatternTemplateTestItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JPatternTemplateTestItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPatternTemplateTestItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JPatternTemplateTestItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
