/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JPatternTemplateTestItemRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPatternTemplateTestItem extends TableImpl<JPatternTemplateTestItemRecord> {

    private static final long serialVersionUID = 1502918772;

    /**
     * The reference instance of <code>public.pattern_template_test_item</code>
     */
    public static final JPatternTemplateTestItem PATTERN_TEMPLATE_TEST_ITEM = new JPatternTemplateTestItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPatternTemplateTestItemRecord> getRecordType() {
        return JPatternTemplateTestItemRecord.class;
    }

    /**
     * The column <code>public.pattern_template_test_item.pattern_id</code>.
     */
    public final TableField<JPatternTemplateTestItemRecord, Long> PATTERN_ID = createField(DSL.name("pattern_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.pattern_template_test_item.item_id</code>.
     */
    public final TableField<JPatternTemplateTestItemRecord, Long> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.pattern_template_test_item</code> table reference
     */
    public JPatternTemplateTestItem() {
        this(DSL.name("pattern_template_test_item"), null);
    }

    /**
     * Create an aliased <code>public.pattern_template_test_item</code> table reference
     */
    public JPatternTemplateTestItem(String alias) {
        this(DSL.name(alias), PATTERN_TEMPLATE_TEST_ITEM);
    }

    /**
     * Create an aliased <code>public.pattern_template_test_item</code> table reference
     */
    public JPatternTemplateTestItem(Name alias) {
        this(alias, PATTERN_TEMPLATE_TEST_ITEM);
    }

    private JPatternTemplateTestItem(Name alias, Table<JPatternTemplateTestItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private JPatternTemplateTestItem(Name alias, Table<JPatternTemplateTestItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JPatternTemplateTestItem(Table<O> child, ForeignKey<O, JPatternTemplateTestItemRecord> key) {
        super(child, key, PATTERN_TEMPLATE_TEST_ITEM);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATTERN_ITEM_ITEM_ID_IDX, Indexes.PATTERN_ITEM_UNQ);
    }

    @Override
    public UniqueKey<JPatternTemplateTestItemRecord> getPrimaryKey() {
        return Keys.PATTERN_ITEM_UNQ;
    }

    @Override
    public List<UniqueKey<JPatternTemplateTestItemRecord>> getKeys() {
        return Arrays.<UniqueKey<JPatternTemplateTestItemRecord>>asList(Keys.PATTERN_ITEM_UNQ);
    }

    @Override
    public List<ForeignKey<JPatternTemplateTestItemRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JPatternTemplateTestItemRecord, ?>>asList(Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_PATTERN_ID_FKEY, Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_ITEM_ID_FKEY);
    }

    public JPatternTemplate patternTemplate() {
        return new JPatternTemplate(this, Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_PATTERN_ID_FKEY);
    }

    public JTestItem testItem() {
        return new JTestItem(this, Keys.PATTERN_TEMPLATE_TEST_ITEM__PATTERN_TEMPLATE_TEST_ITEM_ITEM_ID_FKEY);
    }

    @Override
    public JPatternTemplateTestItem as(String alias) {
        return new JPatternTemplateTestItem(DSL.name(alias), this);
    }

    @Override
    public JPatternTemplateTestItem as(Name alias) {
        return new JPatternTemplateTestItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPatternTemplateTestItem rename(String name) {
        return new JPatternTemplateTestItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPatternTemplateTestItem rename(Name name) {
        return new JPatternTemplateTestItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
