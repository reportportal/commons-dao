/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JLaunch.JLaunchPath;
import com.epam.ta.reportportal.jooq.tables.JStatistics.JStatisticsPath;
import com.epam.ta.reportportal.jooq.tables.JTestItem.JTestItemPath;
import com.epam.ta.reportportal.jooq.tables.records.JStatisticsFieldRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JStatisticsField extends TableImpl<JStatisticsFieldRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.statistics_field</code>
     */
    public static final JStatisticsField STATISTICS_FIELD = new JStatisticsField();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JStatisticsFieldRecord> getRecordType() {
        return JStatisticsFieldRecord.class;
    }

    /**
     * The column <code>public.statistics_field.sf_id</code>.
     */
    public final TableField<JStatisticsFieldRecord, Long> SF_ID = createField(DSL.name("sf_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.statistics_field.name</code>.
     */
    public final TableField<JStatisticsFieldRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    private JStatisticsField(Name alias, Table<JStatisticsFieldRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JStatisticsField(Name alias, Table<JStatisticsFieldRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.statistics_field</code> table reference
     */
    public JStatisticsField(String alias) {
        this(DSL.name(alias), STATISTICS_FIELD);
    }

    /**
     * Create an aliased <code>public.statistics_field</code> table reference
     */
    public JStatisticsField(Name alias) {
        this(alias, STATISTICS_FIELD);
    }

    /**
     * Create a <code>public.statistics_field</code> table reference
     */
    public JStatisticsField() {
        this(DSL.name("statistics_field"), null);
    }

    public <O extends Record> JStatisticsField(Table<O> path, ForeignKey<O, JStatisticsFieldRecord> childPath, InverseForeignKey<O, JStatisticsFieldRecord> parentPath) {
        super(path, childPath, parentPath, STATISTICS_FIELD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JStatisticsFieldPath extends JStatisticsField implements Path<JStatisticsFieldRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JStatisticsFieldPath(Table<O> path, ForeignKey<O, JStatisticsFieldRecord> childPath, InverseForeignKey<O, JStatisticsFieldRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JStatisticsFieldPath(Name alias, Table<JStatisticsFieldRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JStatisticsFieldPath as(String alias) {
            return new JStatisticsFieldPath(DSL.name(alias), this);
        }

        @Override
        public JStatisticsFieldPath as(Name alias) {
            return new JStatisticsFieldPath(alias, this);
        }

        @Override
        public JStatisticsFieldPath as(Table<?> alias) {
            return new JStatisticsFieldPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JStatisticsFieldRecord, Long> getIdentity() {
        return (Identity<JStatisticsFieldRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JStatisticsFieldRecord> getPrimaryKey() {
        return Keys.STATISTICS_FIELD_PK;
    }

    @Override
    public List<UniqueKey<JStatisticsFieldRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.STATISTICS_FIELD_NAME_KEY);
    }

    private transient JStatisticsPath _statistics;

    /**
     * Get the implicit to-many join path to the <code>public.statistics</code>
     * table
     */
    public JStatisticsPath statistics() {
        if (_statistics == null)
            _statistics = new JStatisticsPath(this, null, Keys.STATISTICS__STATISTICS_STATISTICS_FIELD_ID_FKEY.getInverseKey());

        return _statistics;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.test_item</code> table
     */
    public JTestItemPath testItem() {
        return statistics().testItem();
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.launch</code>
     * table
     */
    public JLaunchPath launch() {
        return statistics().launch();
    }

    @Override
    public JStatisticsField as(String alias) {
        return new JStatisticsField(DSL.name(alias), this);
    }

    @Override
    public JStatisticsField as(Name alias) {
        return new JStatisticsField(alias, this);
    }

    @Override
    public JStatisticsField as(Table<?> alias) {
        return new JStatisticsField(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatisticsField rename(String name) {
        return new JStatisticsField(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatisticsField rename(Name name) {
        return new JStatisticsField(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStatisticsField rename(Table<?> name) {
        return new JStatisticsField(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatisticsField where(Condition condition) {
        return new JStatisticsField(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatisticsField where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatisticsField where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatisticsField where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatisticsField where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatisticsField where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatisticsField where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStatisticsField where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatisticsField whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStatisticsField whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
