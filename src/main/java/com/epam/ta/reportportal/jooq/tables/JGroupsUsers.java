/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JGroups.JGroupsPath;
import com.epam.ta.reportportal.jooq.tables.JUsers.JUsersPath;
import com.epam.ta.reportportal.jooq.tables.records.JGroupsUsersRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JGroupsUsers extends TableImpl<JGroupsUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.groups_users</code>
     */
    public static final JGroupsUsers GROUPS_USERS = new JGroupsUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JGroupsUsersRecord> getRecordType() {
        return JGroupsUsersRecord.class;
    }

    /**
     * The column <code>public.groups_users.group_id</code>.
     */
    public final TableField<JGroupsUsersRecord, Long> GROUP_ID = createField(DSL.name("group_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.groups_users.user_id</code>.
     */
    public final TableField<JGroupsUsersRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.groups_users.created_at</code>.
     */
    public final TableField<JGroupsUsersRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.groups_users.updated_at</code>.
     */
    public final TableField<JGroupsUsersRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    private JGroupsUsers(Name alias, Table<JGroupsUsersRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JGroupsUsers(Name alias, Table<JGroupsUsersRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.groups_users</code> table reference
     */
    public JGroupsUsers(String alias) {
        this(DSL.name(alias), GROUPS_USERS);
    }

    /**
     * Create an aliased <code>public.groups_users</code> table reference
     */
    public JGroupsUsers(Name alias) {
        this(alias, GROUPS_USERS);
    }

    /**
     * Create a <code>public.groups_users</code> table reference
     */
    public JGroupsUsers() {
        this(DSL.name("groups_users"), null);
    }

    public <O extends Record> JGroupsUsers(Table<O> path, ForeignKey<O, JGroupsUsersRecord> childPath, InverseForeignKey<O, JGroupsUsersRecord> parentPath) {
        super(path, childPath, parentPath, GROUPS_USERS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JGroupsUsersPath extends JGroupsUsers implements Path<JGroupsUsersRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JGroupsUsersPath(Table<O> path, ForeignKey<O, JGroupsUsersRecord> childPath, InverseForeignKey<O, JGroupsUsersRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JGroupsUsersPath(Name alias, Table<JGroupsUsersRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JGroupsUsersPath as(String alias) {
            return new JGroupsUsersPath(DSL.name(alias), this);
        }

        @Override
        public JGroupsUsersPath as(Name alias) {
            return new JGroupsUsersPath(alias, this);
        }

        @Override
        public JGroupsUsersPath as(Table<?> alias) {
            return new JGroupsUsersPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JGroupsUsersRecord> getPrimaryKey() {
        return Keys.GROUPS_USERS_PKEY;
    }

    @Override
    public List<ForeignKey<JGroupsUsersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GROUPS_USERS__GROUPS_USERS_GROUP_ID_FKEY, Keys.GROUPS_USERS__GROUPS_USERS_USER_ID_FKEY);
    }

    private transient JGroupsPath _groups;

    /**
     * Get the implicit join path to the <code>public.groups</code> table.
     */
    public JGroupsPath groups() {
        if (_groups == null)
            _groups = new JGroupsPath(this, Keys.GROUPS_USERS__GROUPS_USERS_GROUP_ID_FKEY, null);

        return _groups;
    }

    private transient JUsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public JUsersPath users() {
        if (_users == null)
            _users = new JUsersPath(this, Keys.GROUPS_USERS__GROUPS_USERS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public JGroupsUsers as(String alias) {
        return new JGroupsUsers(DSL.name(alias), this);
    }

    @Override
    public JGroupsUsers as(Name alias) {
        return new JGroupsUsers(alias, this);
    }

    @Override
    public JGroupsUsers as(Table<?> alias) {
        return new JGroupsUsers(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroupsUsers rename(String name) {
        return new JGroupsUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroupsUsers rename(Name name) {
        return new JGroupsUsers(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JGroupsUsers rename(Table<?> name) {
        return new JGroupsUsers(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroupsUsers where(Condition condition) {
        return new JGroupsUsers(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroupsUsers where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroupsUsers where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroupsUsers where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroupsUsers where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroupsUsers where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroupsUsers where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JGroupsUsers where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroupsUsers whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JGroupsUsers whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
