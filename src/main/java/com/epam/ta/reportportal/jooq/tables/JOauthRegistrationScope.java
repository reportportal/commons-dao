/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JOauthRegistration.JOauthRegistrationPath;
import com.epam.ta.reportportal.jooq.tables.records.JOauthRegistrationScopeRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JOauthRegistrationScope extends TableImpl<JOauthRegistrationScopeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.oauth_registration_scope</code>
     */
    public static final JOauthRegistrationScope OAUTH_REGISTRATION_SCOPE = new JOauthRegistrationScope();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOauthRegistrationScopeRecord> getRecordType() {
        return JOauthRegistrationScopeRecord.class;
    }

    /**
     * The column <code>public.oauth_registration_scope.id</code>.
     */
    public final TableField<JOauthRegistrationScopeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.oauth_registration_scope.oauth_registration_fk</code>.
     */
    public final TableField<JOauthRegistrationScopeRecord, String> OAUTH_REGISTRATION_FK = createField(DSL.name("oauth_registration_fk"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.oauth_registration_scope.scope</code>.
     */
    public final TableField<JOauthRegistrationScopeRecord, String> SCOPE = createField(DSL.name("scope"), SQLDataType.VARCHAR(256), this, "");

    private JOauthRegistrationScope(Name alias, Table<JOauthRegistrationScopeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JOauthRegistrationScope(Name alias, Table<JOauthRegistrationScopeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.oauth_registration_scope</code> table
     * reference
     */
    public JOauthRegistrationScope(String alias) {
        this(DSL.name(alias), OAUTH_REGISTRATION_SCOPE);
    }

    /**
     * Create an aliased <code>public.oauth_registration_scope</code> table
     * reference
     */
    public JOauthRegistrationScope(Name alias) {
        this(alias, OAUTH_REGISTRATION_SCOPE);
    }

    /**
     * Create a <code>public.oauth_registration_scope</code> table reference
     */
    public JOauthRegistrationScope() {
        this(DSL.name("oauth_registration_scope"), null);
    }

    public <O extends Record> JOauthRegistrationScope(Table<O> path, ForeignKey<O, JOauthRegistrationScopeRecord> childPath, InverseForeignKey<O, JOauthRegistrationScopeRecord> parentPath) {
        super(path, childPath, parentPath, OAUTH_REGISTRATION_SCOPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JOauthRegistrationScopePath extends JOauthRegistrationScope implements Path<JOauthRegistrationScopeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JOauthRegistrationScopePath(Table<O> path, ForeignKey<O, JOauthRegistrationScopeRecord> childPath, InverseForeignKey<O, JOauthRegistrationScopeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JOauthRegistrationScopePath(Name alias, Table<JOauthRegistrationScopeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JOauthRegistrationScopePath as(String alias) {
            return new JOauthRegistrationScopePath(DSL.name(alias), this);
        }

        @Override
        public JOauthRegistrationScopePath as(Name alias) {
            return new JOauthRegistrationScopePath(alias, this);
        }

        @Override
        public JOauthRegistrationScopePath as(Table<?> alias) {
            return new JOauthRegistrationScopePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JOauthRegistrationScopeRecord, Integer> getIdentity() {
        return (Identity<JOauthRegistrationScopeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JOauthRegistrationScopeRecord> getPrimaryKey() {
        return Keys.OAUTH_REGISTRATION_SCOPE_PK;
    }

    @Override
    public List<UniqueKey<JOauthRegistrationScopeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.OAUTH_REGISTRATION_SCOPE_UNIQUE);
    }

    @Override
    public List<ForeignKey<JOauthRegistrationScopeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OAUTH_REGISTRATION_SCOPE__OAUTH_REGISTRATION_SCOPE_OAUTH_REGISTRATION_FK_FKEY);
    }

    private transient JOauthRegistrationPath _oauthRegistration;

    /**
     * Get the implicit join path to the <code>public.oauth_registration</code>
     * table.
     */
    public JOauthRegistrationPath oauthRegistration() {
        if (_oauthRegistration == null)
            _oauthRegistration = new JOauthRegistrationPath(this, Keys.OAUTH_REGISTRATION_SCOPE__OAUTH_REGISTRATION_SCOPE_OAUTH_REGISTRATION_FK_FKEY, null);

        return _oauthRegistration;
    }

    @Override
    public JOauthRegistrationScope as(String alias) {
        return new JOauthRegistrationScope(DSL.name(alias), this);
    }

    @Override
    public JOauthRegistrationScope as(Name alias) {
        return new JOauthRegistrationScope(alias, this);
    }

    @Override
    public JOauthRegistrationScope as(Table<?> alias) {
        return new JOauthRegistrationScope(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOauthRegistrationScope rename(String name) {
        return new JOauthRegistrationScope(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOauthRegistrationScope rename(Name name) {
        return new JOauthRegistrationScope(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOauthRegistrationScope rename(Table<?> name) {
        return new JOauthRegistrationScope(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOauthRegistrationScope where(Condition condition) {
        return new JOauthRegistrationScope(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOauthRegistrationScope where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOauthRegistrationScope where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOauthRegistrationScope where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOauthRegistrationScope where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOauthRegistrationScope where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOauthRegistrationScope where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JOauthRegistrationScope where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOauthRegistrationScope whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JOauthRegistrationScope whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
