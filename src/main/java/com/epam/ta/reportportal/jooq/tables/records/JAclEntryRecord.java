/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables.records;


import com.epam.ta.reportportal.jooq.tables.JAclEntry;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JAclEntryRecord extends UpdatableRecordImpl<JAclEntryRecord> implements Record8<Long, Long, Integer, Long, Integer, Boolean, Boolean, Boolean> {

    private static final long serialVersionUID = -1130110111;

    /**
     * Setter for <code>public.acl_entry.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.acl_entry.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.acl_entry.acl_object_identity</code>.
     */
    public void setAclObjectIdentity(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.acl_entry.acl_object_identity</code>.
     */
    public Long getAclObjectIdentity() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.acl_entry.ace_order</code>.
     */
    public void setAceOrder(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.acl_entry.ace_order</code>.
     */
    public Integer getAceOrder() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.acl_entry.sid</code>.
     */
    public void setSid(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.acl_entry.sid</code>.
     */
    public Long getSid() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.acl_entry.mask</code>.
     */
    public void setMask(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.acl_entry.mask</code>.
     */
    public Integer getMask() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.acl_entry.granting</code>.
     */
    public void setGranting(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.acl_entry.granting</code>.
     */
    public Boolean getGranting() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>public.acl_entry.audit_success</code>.
     */
    public void setAuditSuccess(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.acl_entry.audit_success</code>.
     */
    public Boolean getAuditSuccess() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.acl_entry.audit_failure</code>.
     */
    public void setAuditFailure(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.acl_entry.audit_failure</code>.
     */
    public Boolean getAuditFailure() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Integer, Long, Integer, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, Integer, Long, Integer, Boolean, Boolean, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return JAclEntry.ACL_ENTRY.ID;
    }

    @Override
    public Field<Long> field2() {
        return JAclEntry.ACL_ENTRY.ACL_OBJECT_IDENTITY;
    }

    @Override
    public Field<Integer> field3() {
        return JAclEntry.ACL_ENTRY.ACE_ORDER;
    }

    @Override
    public Field<Long> field4() {
        return JAclEntry.ACL_ENTRY.SID;
    }

    @Override
    public Field<Integer> field5() {
        return JAclEntry.ACL_ENTRY.MASK;
    }

    @Override
    public Field<Boolean> field6() {
        return JAclEntry.ACL_ENTRY.GRANTING;
    }

    @Override
    public Field<Boolean> field7() {
        return JAclEntry.ACL_ENTRY.AUDIT_SUCCESS;
    }

    @Override
    public Field<Boolean> field8() {
        return JAclEntry.ACL_ENTRY.AUDIT_FAILURE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getAclObjectIdentity();
    }

    @Override
    public Integer component3() {
        return getAceOrder();
    }

    @Override
    public Long component4() {
        return getSid();
    }

    @Override
    public Integer component5() {
        return getMask();
    }

    @Override
    public Boolean component6() {
        return getGranting();
    }

    @Override
    public Boolean component7() {
        return getAuditSuccess();
    }

    @Override
    public Boolean component8() {
        return getAuditFailure();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getAclObjectIdentity();
    }

    @Override
    public Integer value3() {
        return getAceOrder();
    }

    @Override
    public Long value4() {
        return getSid();
    }

    @Override
    public Integer value5() {
        return getMask();
    }

    @Override
    public Boolean value6() {
        return getGranting();
    }

    @Override
    public Boolean value7() {
        return getAuditSuccess();
    }

    @Override
    public Boolean value8() {
        return getAuditFailure();
    }

    @Override
    public JAclEntryRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public JAclEntryRecord value2(Long value) {
        setAclObjectIdentity(value);
        return this;
    }

    @Override
    public JAclEntryRecord value3(Integer value) {
        setAceOrder(value);
        return this;
    }

    @Override
    public JAclEntryRecord value4(Long value) {
        setSid(value);
        return this;
    }

    @Override
    public JAclEntryRecord value5(Integer value) {
        setMask(value);
        return this;
    }

    @Override
    public JAclEntryRecord value6(Boolean value) {
        setGranting(value);
        return this;
    }

    @Override
    public JAclEntryRecord value7(Boolean value) {
        setAuditSuccess(value);
        return this;
    }

    @Override
    public JAclEntryRecord value8(Boolean value) {
        setAuditFailure(value);
        return this;
    }

    @Override
    public JAclEntryRecord values(Long value1, Long value2, Integer value3, Long value4, Integer value5, Boolean value6, Boolean value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JAclEntryRecord
     */
    public JAclEntryRecord() {
        super(JAclEntry.ACL_ENTRY);
    }

    /**
     * Create a detached, initialised JAclEntryRecord
     */
    public JAclEntryRecord(Long id, Long aclObjectIdentity, Integer aceOrder, Long sid, Integer mask, Boolean granting, Boolean auditSuccess, Boolean auditFailure) {
        super(JAclEntry.ACL_ENTRY);

        set(0, id);
        set(1, aclObjectIdentity);
        set(2, aceOrder);
        set(3, sid);
        set(4, mask);
        set(5, granting);
        set(6, auditSuccess);
        set(7, auditFailure);
    }
}
