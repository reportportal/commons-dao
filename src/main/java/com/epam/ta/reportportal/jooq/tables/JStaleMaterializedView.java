/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JStaleMaterializedViewRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JStaleMaterializedView extends TableImpl<JStaleMaterializedViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.stale_materialized_view</code>
     */
    public static final JStaleMaterializedView STALE_MATERIALIZED_VIEW = new JStaleMaterializedView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JStaleMaterializedViewRecord> getRecordType() {
        return JStaleMaterializedViewRecord.class;
    }

    /**
     * The column <code>public.stale_materialized_view.id</code>.
     */
    public final TableField<JStaleMaterializedViewRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.stale_materialized_view.name</code>.
     */
    public final TableField<JStaleMaterializedViewRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.stale_materialized_view.creation_date</code>.
     */
    public final TableField<JStaleMaterializedViewRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new JooqInstantConverter());

    private JStaleMaterializedView(Name alias, Table<JStaleMaterializedViewRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JStaleMaterializedView(Name alias, Table<JStaleMaterializedViewRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.stale_materialized_view</code> table
     * reference
     */
    public JStaleMaterializedView(String alias) {
        this(DSL.name(alias), STALE_MATERIALIZED_VIEW);
    }

    /**
     * Create an aliased <code>public.stale_materialized_view</code> table
     * reference
     */
    public JStaleMaterializedView(Name alias) {
        this(alias, STALE_MATERIALIZED_VIEW);
    }

    /**
     * Create a <code>public.stale_materialized_view</code> table reference
     */
    public JStaleMaterializedView() {
        this(DSL.name("stale_materialized_view"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STALE_MV_CREATION_DATE_IDX);
    }

    @Override
    public Identity<JStaleMaterializedViewRecord, Long> getIdentity() {
        return (Identity<JStaleMaterializedViewRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JStaleMaterializedViewRecord> getPrimaryKey() {
        return Keys.STALE_MATERIALIZED_VIEW_PKEY;
    }

    @Override
    public List<UniqueKey<JStaleMaterializedViewRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.STALE_MATERIALIZED_VIEW_NAME_KEY);
    }

    @Override
    public JStaleMaterializedView as(String alias) {
        return new JStaleMaterializedView(DSL.name(alias), this);
    }

    @Override
    public JStaleMaterializedView as(Name alias) {
        return new JStaleMaterializedView(alias, this);
    }

    @Override
    public JStaleMaterializedView as(Table<?> alias) {
        return new JStaleMaterializedView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStaleMaterializedView rename(String name) {
        return new JStaleMaterializedView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStaleMaterializedView rename(Name name) {
        return new JStaleMaterializedView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStaleMaterializedView rename(Table<?> name) {
        return new JStaleMaterializedView(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStaleMaterializedView where(Condition condition) {
        return new JStaleMaterializedView(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStaleMaterializedView where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStaleMaterializedView where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStaleMaterializedView where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStaleMaterializedView where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStaleMaterializedView where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStaleMaterializedView where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JStaleMaterializedView where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStaleMaterializedView whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JStaleMaterializedView whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
