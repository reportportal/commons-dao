/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JIntegrationType.JIntegrationTypePath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.records.JIntegrationRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JIntegration extends TableImpl<JIntegrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.integration</code>
     */
    public static final JIntegration INTEGRATION = new JIntegration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JIntegrationRecord> getRecordType() {
        return JIntegrationRecord.class;
    }

    /**
     * The column <code>public.integration.id</code>.
     */
    public final TableField<JIntegrationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.integration.name</code>.
     */
    public final TableField<JIntegrationRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.integration.project_id</code>.
     */
    public final TableField<JIntegrationRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.integration.type</code>.
     */
    public final TableField<JIntegrationRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.integration.enabled</code>.
     */
    public final TableField<JIntegrationRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.integration.params</code>.
     */
    public final TableField<JIntegrationRecord, JSONB> PARAMS = createField(DSL.name("params"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.integration.creator</code>.
     */
    public final TableField<JIntegrationRecord, String> CREATOR = createField(DSL.name("creator"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.integration.creation_date</code>.
     */
    public final TableField<JIntegrationRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    private JIntegration(Name alias, Table<JIntegrationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JIntegration(Name alias, Table<JIntegrationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.integration</code> table reference
     */
    public JIntegration(String alias) {
        this(DSL.name(alias), INTEGRATION);
    }

    /**
     * Create an aliased <code>public.integration</code> table reference
     */
    public JIntegration(Name alias) {
        this(alias, INTEGRATION);
    }

    /**
     * Create a <code>public.integration</code> table reference
     */
    public JIntegration() {
        this(DSL.name("integration"), null);
    }

    public <O extends Record> JIntegration(Table<O> path, ForeignKey<O, JIntegrationRecord> childPath, InverseForeignKey<O, JIntegrationRecord> parentPath) {
        super(path, childPath, parentPath, INTEGRATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JIntegrationPath extends JIntegration implements Path<JIntegrationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JIntegrationPath(Table<O> path, ForeignKey<O, JIntegrationRecord> childPath, InverseForeignKey<O, JIntegrationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JIntegrationPath(Name alias, Table<JIntegrationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JIntegrationPath as(String alias) {
            return new JIntegrationPath(DSL.name(alias), this);
        }

        @Override
        public JIntegrationPath as(Name alias) {
            return new JIntegrationPath(alias, this);
        }

        @Override
        public JIntegrationPath as(Table<?> alias) {
            return new JIntegrationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.INTEGR_PROJECT_IDX, Indexes.UNIQUE_GLOBAL_INTEGRATION_NAME, Indexes.UNIQUE_PROJECT_INTEGRATION_NAME);
    }

    @Override
    public Identity<JIntegrationRecord, Integer> getIdentity() {
        return (Identity<JIntegrationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JIntegrationRecord> getPrimaryKey() {
        return Keys.INTEGRATION_PK;
    }

    @Override
    public List<ForeignKey<JIntegrationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INTEGRATION__INTEGRATION_PROJECT_ID_FKEY, Keys.INTEGRATION__INTEGRATION_TYPE_FKEY);
    }

    private transient JProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public JProjectPath project() {
        if (_project == null)
            _project = new JProjectPath(this, Keys.INTEGRATION__INTEGRATION_PROJECT_ID_FKEY, null);

        return _project;
    }

    private transient JIntegrationTypePath _integrationType;

    /**
     * Get the implicit join path to the <code>public.integration_type</code>
     * table.
     */
    public JIntegrationTypePath integrationType() {
        if (_integrationType == null)
            _integrationType = new JIntegrationTypePath(this, Keys.INTEGRATION__INTEGRATION_TYPE_FKEY, null);

        return _integrationType;
    }

    @Override
    public JIntegration as(String alias) {
        return new JIntegration(DSL.name(alias), this);
    }

    @Override
    public JIntegration as(Name alias) {
        return new JIntegration(alias, this);
    }

    @Override
    public JIntegration as(Table<?> alias) {
        return new JIntegration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JIntegration rename(String name) {
        return new JIntegration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIntegration rename(Name name) {
        return new JIntegration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIntegration rename(Table<?> name) {
        return new JIntegration(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegration where(Condition condition) {
        return new JIntegration(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegration where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegration where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegration where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegration where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegration where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegration where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegration where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegration whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegration whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
