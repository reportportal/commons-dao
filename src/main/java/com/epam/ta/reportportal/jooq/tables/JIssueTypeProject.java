/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;

import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JIssueTypeProjectRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JIssueTypeProject extends TableImpl<JIssueTypeProjectRecord> {

    private static final long serialVersionUID = 554638966;

    /**
     * The reference instance of <code>public.issue_type_project</code>
     */
    public static final JIssueTypeProject ISSUE_TYPE_PROJECT = new JIssueTypeProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JIssueTypeProjectRecord> getRecordType() {
        return JIssueTypeProjectRecord.class;
    }

    /**
     * The column <code>public.issue_type_project.project_id</code>.
     */
    public final TableField<JIssueTypeProjectRecord, Long> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.issue_type_project.issue_type_id</code>.
     */
    public final TableField<JIssueTypeProjectRecord, Long> ISSUE_TYPE_ID = createField("issue_type_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.issue_type_project</code> table reference
     */
    public JIssueTypeProject() {
        this(DSL.name("issue_type_project"), null);
    }

    /**
     * Create an aliased <code>public.issue_type_project</code> table reference
     */
    public JIssueTypeProject(String alias) {
        this(DSL.name(alias), ISSUE_TYPE_PROJECT);
    }

    /**
     * Create an aliased <code>public.issue_type_project</code> table reference
     */
    public JIssueTypeProject(Name alias) {
        this(alias, ISSUE_TYPE_PROJECT);
    }

    private JIssueTypeProject(Name alias, Table<JIssueTypeProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private JIssueTypeProject(Name alias, Table<JIssueTypeProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JIssueTypeProject(Table<O> child, ForeignKey<O, JIssueTypeProjectRecord> key) {
        super(child, key, ISSUE_TYPE_PROJECT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ISSUE_TYPE_PROJECT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JIssueTypeProjectRecord> getPrimaryKey() {
        return Keys.ISSUE_TYPE_PROJECT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JIssueTypeProjectRecord>> getKeys() {
        return Arrays.<UniqueKey<JIssueTypeProjectRecord>>asList(Keys.ISSUE_TYPE_PROJECT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<JIssueTypeProjectRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JIssueTypeProjectRecord, ?>>asList(Keys.ISSUE_TYPE_PROJECT__ISSUE_TYPE_PROJECT_PROJECT_ID_FKEY, Keys.ISSUE_TYPE_PROJECT__ISSUE_TYPE_PROJECT_ISSUE_TYPE_ID_FKEY);
    }

    public JProject project() {
        return new JProject(this, Keys.ISSUE_TYPE_PROJECT__ISSUE_TYPE_PROJECT_PROJECT_ID_FKEY);
    }

    public JIssueType issueType() {
        return new JIssueType(this, Keys.ISSUE_TYPE_PROJECT__ISSUE_TYPE_PROJECT_ISSUE_TYPE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JIssueTypeProject as(String alias) {
        return new JIssueTypeProject(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JIssueTypeProject as(Name alias) {
        return new JIssueTypeProject(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueTypeProject rename(String name) {
        return new JIssueTypeProject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssueTypeProject rename(Name name) {
        return new JIssueTypeProject(name, null);
    }
}
