/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables.records;


import com.epam.ta.reportportal.jooq.enums.JTestItemTypeEnum;
import com.epam.ta.reportportal.jooq.tables.JTestItem;

import java.time.Instant;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JTestItemRecord extends UpdatableRecordImpl<JTestItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.test_item.item_id</code>.
     */
    public void setItemId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.test_item.item_id</code>.
     */
    public Long getItemId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.test_item.uuid</code>.
     */
    public void setUuid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.test_item.uuid</code>.
     */
    public String getUuid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.test_item.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.test_item.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.test_item.code_ref</code>.
     */
    public void setCodeRef(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.test_item.code_ref</code>.
     */
    public String getCodeRef() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.test_item.type</code>.
     */
    public void setType(JTestItemTypeEnum value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.test_item.type</code>.
     */
    public JTestItemTypeEnum getType() {
        return (JTestItemTypeEnum) get(4);
    }

    /**
     * Setter for <code>public.test_item.start_time</code>.
     */
    public void setStartTime(Instant value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.test_item.start_time</code>.
     */
    public Instant getStartTime() {
        return (Instant) get(5);
    }

    /**
     * Setter for <code>public.test_item.description</code>.
     */
    public void setDescription(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.test_item.description</code>.
     */
    public String getDescription() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.test_item.last_modified</code>.
     */
    public void setLastModified(Instant value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.test_item.last_modified</code>.
     */
    public Instant getLastModified() {
        return (Instant) get(7);
    }

    /**
     * Setter for <code>public.test_item.path</code>.
     */
    public void setPath(Object value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.test_item.path</code>.
     */
    public Object getPath() {
        return get(8);
    }

    /**
     * Setter for <code>public.test_item.unique_id</code>.
     */
    public void setUniqueId(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.test_item.unique_id</code>.
     */
    public String getUniqueId() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.test_item.test_case_id</code>.
     */
    public void setTestCaseId(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.test_item.test_case_id</code>.
     */
    public String getTestCaseId() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.test_item.has_children</code>.
     */
    public void setHasChildren(Boolean value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.test_item.has_children</code>.
     */
    public Boolean getHasChildren() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>public.test_item.has_retries</code>.
     */
    public void setHasRetries(Boolean value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.test_item.has_retries</code>.
     */
    public Boolean getHasRetries() {
        return (Boolean) get(12);
    }

    /**
     * Setter for <code>public.test_item.has_stats</code>.
     */
    public void setHasStats(Boolean value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.test_item.has_stats</code>.
     */
    public Boolean getHasStats() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>public.test_item.parent_id</code>.
     */
    public void setParentId(Long value) {
        set(14, value);
    }

    /**
     * Getter for <code>public.test_item.parent_id</code>.
     */
    public Long getParentId() {
        return (Long) get(14);
    }

    /**
     * Setter for <code>public.test_item.retry_of</code>.
     */
    public void setRetryOf(Long value) {
        set(15, value);
    }

    /**
     * Getter for <code>public.test_item.retry_of</code>.
     */
    public Long getRetryOf() {
        return (Long) get(15);
    }

    /**
     * Setter for <code>public.test_item.launch_id</code>.
     */
    public void setLaunchId(Long value) {
        set(16, value);
    }

    /**
     * Getter for <code>public.test_item.launch_id</code>.
     */
    public Long getLaunchId() {
        return (Long) get(16);
    }

    /**
     * Setter for <code>public.test_item.test_case_hash</code>.
     */
    public void setTestCaseHash(Integer value) {
        set(17, value);
    }

    /**
     * Getter for <code>public.test_item.test_case_hash</code>.
     */
    public Integer getTestCaseHash() {
        return (Integer) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JTestItemRecord
     */
    public JTestItemRecord() {
        super(JTestItem.TEST_ITEM);
    }

    /**
     * Create a detached, initialised JTestItemRecord
     */
    public JTestItemRecord(Long itemId, String uuid, String name, String codeRef, JTestItemTypeEnum type, Instant startTime, String description, Instant lastModified, Object path, String uniqueId, String testCaseId, Boolean hasChildren, Boolean hasRetries, Boolean hasStats, Long parentId, Long retryOf, Long launchId, Integer testCaseHash) {
        super(JTestItem.TEST_ITEM);

        setItemId(itemId);
        setUuid(uuid);
        setName(name);
        setCodeRef(codeRef);
        setType(type);
        setStartTime(startTime);
        setDescription(description);
        setLastModified(lastModified);
        setPath(path);
        setUniqueId(uniqueId);
        setTestCaseId(testCaseId);
        setHasChildren(hasChildren);
        setHasRetries(hasRetries);
        setHasStats(hasStats);
        setParentId(parentId);
        setRetryOf(retryOf);
        setLaunchId(launchId);
        setTestCaseHash(testCaseHash);
        resetChangedOnNotNull();
    }
}
