/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JLaunch.JLaunchPath;
import com.epam.ta.reportportal.jooq.tables.JTestItem.JTestItemPath;
import com.epam.ta.reportportal.jooq.tables.records.JItemAttributeRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JItemAttribute extends TableImpl<JItemAttributeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.item_attribute</code>
     */
    public static final JItemAttribute ITEM_ATTRIBUTE = new JItemAttribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JItemAttributeRecord> getRecordType() {
        return JItemAttributeRecord.class;
    }

    /**
     * The column <code>public.item_attribute.id</code>.
     */
    public final TableField<JItemAttributeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.item_attribute.key</code>.
     */
    public final TableField<JItemAttributeRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.item_attribute.value</code>.
     */
    public final TableField<JItemAttributeRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.item_attribute.item_id</code>.
     */
    public final TableField<JItemAttributeRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.item_attribute.launch_id</code>.
     */
    public final TableField<JItemAttributeRecord, Long> LAUNCH_ID = createField(DSL.name("launch_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.item_attribute.system</code>.
     */
    public final TableField<JItemAttributeRecord, Boolean> SYSTEM = createField(DSL.name("system"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private JItemAttribute(Name alias, Table<JItemAttributeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JItemAttribute(Name alias, Table<JItemAttributeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.item_attribute</code> table reference
     */
    public JItemAttribute(String alias) {
        this(DSL.name(alias), ITEM_ATTRIBUTE);
    }

    /**
     * Create an aliased <code>public.item_attribute</code> table reference
     */
    public JItemAttribute(Name alias) {
        this(alias, ITEM_ATTRIBUTE);
    }

    /**
     * Create a <code>public.item_attribute</code> table reference
     */
    public JItemAttribute() {
        this(DSL.name("item_attribute"), null);
    }

    public <O extends Record> JItemAttribute(Table<O> path, ForeignKey<O, JItemAttributeRecord> childPath, InverseForeignKey<O, JItemAttributeRecord> parentPath) {
        super(path, childPath, parentPath, ITEM_ATTRIBUTE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JItemAttributePath extends JItemAttribute implements Path<JItemAttributeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JItemAttributePath(Table<O> path, ForeignKey<O, JItemAttributeRecord> childPath, InverseForeignKey<O, JItemAttributeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JItemAttributePath(Name alias, Table<JItemAttributeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JItemAttributePath as(String alias) {
            return new JItemAttributePath(DSL.name(alias), this);
        }

        @Override
        public JItemAttributePath as(Name alias) {
            return new JItemAttributePath(alias, this);
        }

        @Override
        public JItemAttributePath as(Table<?> alias) {
            return new JItemAttributePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ITEM_ATTR_LAUNCH_IDX, Indexes.ITEM_ATTR_TI_IDX);
    }

    @Override
    public Identity<JItemAttributeRecord, Long> getIdentity() {
        return (Identity<JItemAttributeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JItemAttributeRecord> getPrimaryKey() {
        return Keys.ITEM_ATTRIBUTE_PK;
    }

    @Override
    public List<ForeignKey<JItemAttributeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ITEM_ATTRIBUTE__ITEM_ATTRIBUTE_ITEM_ID_FKEY, Keys.ITEM_ATTRIBUTE__ITEM_ATTRIBUTE_LAUNCH_ID_FKEY);
    }

    private transient JTestItemPath _testItem;

    /**
     * Get the implicit join path to the <code>public.test_item</code> table.
     */
    public JTestItemPath testItem() {
        if (_testItem == null)
            _testItem = new JTestItemPath(this, Keys.ITEM_ATTRIBUTE__ITEM_ATTRIBUTE_ITEM_ID_FKEY, null);

        return _testItem;
    }

    private transient JLaunchPath _launch;

    /**
     * Get the implicit join path to the <code>public.launch</code> table.
     */
    public JLaunchPath launch() {
        if (_launch == null)
            _launch = new JLaunchPath(this, Keys.ITEM_ATTRIBUTE__ITEM_ATTRIBUTE_LAUNCH_ID_FKEY, null);

        return _launch;
    }

    @Override
    public List<Check<JItemAttributeRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("item_attribute_check"), "((((item_id IS NOT NULL) AND (launch_id IS NULL)) OR ((item_id IS NULL) AND (launch_id IS NOT NULL))))", true)
        );
    }

    @Override
    public JItemAttribute as(String alias) {
        return new JItemAttribute(DSL.name(alias), this);
    }

    @Override
    public JItemAttribute as(Name alias) {
        return new JItemAttribute(alias, this);
    }

    @Override
    public JItemAttribute as(Table<?> alias) {
        return new JItemAttribute(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JItemAttribute rename(String name) {
        return new JItemAttribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JItemAttribute rename(Name name) {
        return new JItemAttribute(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JItemAttribute rename(Table<?> name) {
        return new JItemAttribute(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItemAttribute where(Condition condition) {
        return new JItemAttribute(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItemAttribute where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItemAttribute where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItemAttribute where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItemAttribute where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItemAttribute where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItemAttribute where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JItemAttribute where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItemAttribute whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JItemAttribute whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
