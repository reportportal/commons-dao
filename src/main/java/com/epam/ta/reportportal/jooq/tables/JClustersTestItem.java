/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JClustersTestItemRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JClustersTestItem extends TableImpl<JClustersTestItemRecord> {

    private static final long serialVersionUID = -1374737681;

    /**
     * The reference instance of <code>public.clusters_test_item</code>
     */
    public static final JClustersTestItem CLUSTERS_TEST_ITEM = new JClustersTestItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JClustersTestItemRecord> getRecordType() {
        return JClustersTestItemRecord.class;
    }

    /**
     * The column <code>public.clusters_test_item.cluster_id</code>.
     */
    public final TableField<JClustersTestItemRecord, Long> CLUSTER_ID = createField(DSL.name("cluster_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.clusters_test_item.item_id</code>.
     */
    public final TableField<JClustersTestItemRecord, Long> ITEM_ID = createField(DSL.name("item_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.clusters_test_item</code> table reference
     */
    public JClustersTestItem() {
        this(DSL.name("clusters_test_item"), null);
    }

    /**
     * Create an aliased <code>public.clusters_test_item</code> table reference
     */
    public JClustersTestItem(String alias) {
        this(DSL.name(alias), CLUSTERS_TEST_ITEM);
    }

    /**
     * Create an aliased <code>public.clusters_test_item</code> table reference
     */
    public JClustersTestItem(Name alias) {
        this(alias, CLUSTERS_TEST_ITEM);
    }

    private JClustersTestItem(Name alias, Table<JClustersTestItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private JClustersTestItem(Name alias, Table<JClustersTestItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JClustersTestItem(Table<O> child, ForeignKey<O, JClustersTestItemRecord> key) {
        super(child, key, CLUSTERS_TEST_ITEM);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLUSTER_ITEM_CLUSTER_IDX, Indexes.CLUSTER_ITEM_ITEM_IDX, Indexes.CLUSTER_ITEM_UNQ);
    }

    @Override
    public List<UniqueKey<JClustersTestItemRecord>> getKeys() {
        return Arrays.<UniqueKey<JClustersTestItemRecord>>asList(Keys.CLUSTER_ITEM_UNQ);
    }

    @Override
    public JClustersTestItem as(String alias) {
        return new JClustersTestItem(DSL.name(alias), this);
    }

    @Override
    public JClustersTestItem as(Name alias) {
        return new JClustersTestItem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JClustersTestItem rename(String name) {
        return new JClustersTestItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JClustersTestItem rename(Name name) {
        return new JClustersTestItem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
