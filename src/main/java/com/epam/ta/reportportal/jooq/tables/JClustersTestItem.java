/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JClustersTestItemRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JClustersTestItem extends TableImpl<JClustersTestItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.clusters_test_item</code>
     */
    public static final JClustersTestItem CLUSTERS_TEST_ITEM = new JClustersTestItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JClustersTestItemRecord> getRecordType() {
        return JClustersTestItemRecord.class;
    }

    /**
     * The column <code>public.clusters_test_item.cluster_id</code>.
     */
    public final TableField<JClustersTestItemRecord, Long> CLUSTER_ID = createField(DSL.name("cluster_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.clusters_test_item.item_id</code>.
     */
    public final TableField<JClustersTestItemRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private JClustersTestItem(Name alias, Table<JClustersTestItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JClustersTestItem(Name alias, Table<JClustersTestItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.clusters_test_item</code> table reference
     */
    public JClustersTestItem(String alias) {
        this(DSL.name(alias), CLUSTERS_TEST_ITEM);
    }

    /**
     * Create an aliased <code>public.clusters_test_item</code> table reference
     */
    public JClustersTestItem(Name alias) {
        this(alias, CLUSTERS_TEST_ITEM);
    }

    /**
     * Create a <code>public.clusters_test_item</code> table reference
     */
    public JClustersTestItem() {
        this(DSL.name("clusters_test_item"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CLUSTER_ITEM_CLUSTER_IDX, Indexes.CLUSTER_ITEM_ITEM_IDX);
    }

    @Override
    public List<UniqueKey<JClustersTestItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CLUSTER_ITEM_UNQ);
    }

    @Override
    public JClustersTestItem as(String alias) {
        return new JClustersTestItem(DSL.name(alias), this);
    }

    @Override
    public JClustersTestItem as(Name alias) {
        return new JClustersTestItem(alias, this);
    }

    @Override
    public JClustersTestItem as(Table<?> alias) {
        return new JClustersTestItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JClustersTestItem rename(String name) {
        return new JClustersTestItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JClustersTestItem rename(Name name) {
        return new JClustersTestItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JClustersTestItem rename(Table<?> name) {
        return new JClustersTestItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JClustersTestItem where(Condition condition) {
        return new JClustersTestItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JClustersTestItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JClustersTestItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JClustersTestItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JClustersTestItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JClustersTestItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JClustersTestItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JClustersTestItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JClustersTestItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JClustersTestItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
