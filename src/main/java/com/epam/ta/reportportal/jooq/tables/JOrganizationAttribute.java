/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JOrganizationAttributeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JOrganizationAttribute extends TableImpl<JOrganizationAttributeRecord> {

    private static final long serialVersionUID = 1240174929;

    /**
     * The reference instance of <code>public.organization_attribute</code>
     */
    public static final JOrganizationAttribute ORGANIZATION_ATTRIBUTE = new JOrganizationAttribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JOrganizationAttributeRecord> getRecordType() {
        return JOrganizationAttributeRecord.class;
    }

    /**
     * The column <code>public.organization_attribute.id</code>.
     */
    public final TableField<JOrganizationAttributeRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('organization_attribute_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.organization_attribute.key</code>.
     */
    public final TableField<JOrganizationAttributeRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.organization_attribute.value</code>.
     */
    public final TableField<JOrganizationAttributeRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.organization_attribute.system</code>.
     */
    public final TableField<JOrganizationAttributeRecord, Boolean> SYSTEM = createField(DSL.name("system"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.organization_attribute.organization_id</code>.
     */
    public final TableField<JOrganizationAttributeRecord, Long> ORGANIZATION_ID = createField(DSL.name("organization_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.organization_attribute</code> table reference
     */
    public JOrganizationAttribute() {
        this(DSL.name("organization_attribute"), null);
    }

    /**
     * Create an aliased <code>public.organization_attribute</code> table reference
     */
    public JOrganizationAttribute(String alias) {
        this(DSL.name(alias), ORGANIZATION_ATTRIBUTE);
    }

    /**
     * Create an aliased <code>public.organization_attribute</code> table reference
     */
    public JOrganizationAttribute(Name alias) {
        this(alias, ORGANIZATION_ATTRIBUTE);
    }

    private JOrganizationAttribute(Name alias, Table<JOrganizationAttributeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JOrganizationAttribute(Name alias, Table<JOrganizationAttributeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JOrganizationAttribute(Table<O> child, ForeignKey<O, JOrganizationAttributeRecord> key) {
        super(child, key, ORGANIZATION_ATTRIBUTE);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORGANIZATION_ATTRIBUTE_PKEY);
    }

    @Override
    public Identity<JOrganizationAttributeRecord, Long> getIdentity() {
        return Keys.IDENTITY_ORGANIZATION_ATTRIBUTE;
    }

    @Override
    public UniqueKey<JOrganizationAttributeRecord> getPrimaryKey() {
        return Keys.ORGANIZATION_ATTRIBUTE_PKEY;
    }

    @Override
    public List<UniqueKey<JOrganizationAttributeRecord>> getKeys() {
        return Arrays.<UniqueKey<JOrganizationAttributeRecord>>asList(Keys.ORGANIZATION_ATTRIBUTE_PKEY);
    }

    @Override
    public List<ForeignKey<JOrganizationAttributeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JOrganizationAttributeRecord, ?>>asList(Keys.ORGANIZATION_ATTRIBUTE__ORGANIZATION_ATTRIBUTE_ORGANIZATION_ID_FKEY);
    }

    public JOrganization organization() {
        return new JOrganization(this, Keys.ORGANIZATION_ATTRIBUTE__ORGANIZATION_ATTRIBUTE_ORGANIZATION_ID_FKEY);
    }

    @Override
    public JOrganizationAttribute as(String alias) {
        return new JOrganizationAttribute(DSL.name(alias), this);
    }

    @Override
    public JOrganizationAttribute as(Name alias) {
        return new JOrganizationAttribute(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganizationAttribute rename(String name) {
        return new JOrganizationAttribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JOrganizationAttribute rename(Name name) {
        return new JOrganizationAttribute(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, Boolean, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
