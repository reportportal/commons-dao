/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JApiKeysRecord;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import javax.annotation.processing.Generated;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JApiKeys extends TableImpl<JApiKeysRecord> {

  private static final long serialVersionUID = -1062577780;

    /**
     * The reference instance of <code>public.api_keys</code>
     */
    public static final JApiKeys API_KEYS = new JApiKeys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JApiKeysRecord> getRecordType() {
        return JApiKeysRecord.class;
    }

    /**
     * The column <code>public.api_keys.id</code>.
     */
    public final TableField<JApiKeysRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('api_keys_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.api_keys.name</code>.
     */
    public final TableField<JApiKeysRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.api_keys.hash</code>.
     */
    public final TableField<JApiKeysRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

  /**
   * The column <code>public.api_keys.created_at</code>.
   */
  public final TableField<JApiKeysRecord, Timestamp> CREATED_AT = createField(
      DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

  /**
   * The column <code>public.api_keys.user_id</code>.
   */
  public final TableField<JApiKeysRecord, Long> USER_ID = createField(DSL.name("user_id"),
      org.jooq.impl.SQLDataType.BIGINT, this, "");

  /**
   * The column <code>public.api_keys.last_used_at</code>.
   */
  public final TableField<JApiKeysRecord, Date> LAST_USED_AT = createField(DSL.name("last_used_at"),
      org.jooq.impl.SQLDataType.DATE, this, "");

  /**
   * Create a <code>public.api_keys</code> table reference
   */
  public JApiKeys() {
    this(DSL.name("api_keys"), null);
  }

  /**
   * Create an aliased <code>public.api_keys</code> table reference
     */
    public JApiKeys(String alias) {
        this(DSL.name(alias), API_KEYS);
    }

    /**
     * Create an aliased <code>public.api_keys</code> table reference
     */
    public JApiKeys(Name alias) {
        this(alias, API_KEYS);
    }

    private JApiKeys(Name alias, Table<JApiKeysRecord> aliased) {
        this(alias, aliased, null);
    }

    private JApiKeys(Name alias, Table<JApiKeysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JApiKeys(Table<O> child, ForeignKey<O, JApiKeysRecord> key) {
        super(child, key, API_KEYS);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.API_KEYS_PKEY, Indexes.HASH_API_KEYS_IDX, Indexes.USERS_API_KEYS_UNIQUE);
    }

    @Override
    public Identity<JApiKeysRecord, Long> getIdentity() {
        return Keys.IDENTITY_API_KEYS;
    }

    @Override
    public UniqueKey<JApiKeysRecord> getPrimaryKey() {
        return Keys.API_KEYS_PKEY;
    }

    @Override
    public List<UniqueKey<JApiKeysRecord>> getKeys() {
        return Arrays.<UniqueKey<JApiKeysRecord>>asList(Keys.API_KEYS_PKEY, Keys.USERS_API_KEYS_UNIQUE);
    }

    @Override
    public List<ForeignKey<JApiKeysRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JApiKeysRecord, ?>>asList(Keys.API_KEYS__API_KEYS_USER_ID_FKEY);
    }

    public JUsers users() {
        return new JUsers(this, Keys.API_KEYS__API_KEYS_USER_ID_FKEY);
    }

    @Override
    public JApiKeys as(String alias) {
        return new JApiKeys(DSL.name(alias), this);
    }

    @Override
    public JApiKeys as(Name alias) {
        return new JApiKeys(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKeys rename(String name) {
        return new JApiKeys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKeys rename(Name name) {
        return new JApiKeys(name, null);
    }

    // -------------------------------------------------------------------------
  // Row6 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row6<Long, String, String, Timestamp, Long, Date> fieldsRow() {
    return (Row6) super.fieldsRow();
  }
}
