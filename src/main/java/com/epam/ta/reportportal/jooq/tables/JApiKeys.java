/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JUsers.JUsersPath;
import com.epam.ta.reportportal.jooq.tables.records.JApiKeysRecord;

import java.time.Instant;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JApiKeys extends TableImpl<JApiKeysRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.api_keys</code>
     */
    public static final JApiKeys API_KEYS = new JApiKeys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JApiKeysRecord> getRecordType() {
        return JApiKeysRecord.class;
    }

    /**
     * The column <code>public.api_keys.id</code>.
     */
    public final TableField<JApiKeysRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.api_keys.name</code>.
     */
    public final TableField<JApiKeysRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.api_keys.hash</code>.
     */
    public final TableField<JApiKeysRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.api_keys.created_at</code>.
     */
    public final TableField<JApiKeysRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.api_keys.user_id</code>.
     */
    public final TableField<JApiKeysRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.api_keys.last_used_at</code>.
     */
    public final TableField<JApiKeysRecord, LocalDate> LAST_USED_AT = createField(DSL.name("last_used_at"), SQLDataType.LOCALDATE, this, "");

    private JApiKeys(Name alias, Table<JApiKeysRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JApiKeys(Name alias, Table<JApiKeysRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.api_keys</code> table reference
     */
    public JApiKeys(String alias) {
        this(DSL.name(alias), API_KEYS);
    }

    /**
     * Create an aliased <code>public.api_keys</code> table reference
     */
    public JApiKeys(Name alias) {
        this(alias, API_KEYS);
    }

    /**
     * Create a <code>public.api_keys</code> table reference
     */
    public JApiKeys() {
        this(DSL.name("api_keys"), null);
    }

    public <O extends Record> JApiKeys(Table<O> path, ForeignKey<O, JApiKeysRecord> childPath, InverseForeignKey<O, JApiKeysRecord> parentPath) {
        super(path, childPath, parentPath, API_KEYS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JApiKeysPath extends JApiKeys implements Path<JApiKeysRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JApiKeysPath(Table<O> path, ForeignKey<O, JApiKeysRecord> childPath, InverseForeignKey<O, JApiKeysRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JApiKeysPath(Name alias, Table<JApiKeysRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JApiKeysPath as(String alias) {
            return new JApiKeysPath(DSL.name(alias), this);
        }

        @Override
        public JApiKeysPath as(Name alias) {
            return new JApiKeysPath(alias, this);
        }

        @Override
        public JApiKeysPath as(Table<?> alias) {
            return new JApiKeysPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HASH_API_KEYS_IDX);
    }

    @Override
    public Identity<JApiKeysRecord, Long> getIdentity() {
        return (Identity<JApiKeysRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JApiKeysRecord> getPrimaryKey() {
        return Keys.API_KEYS_PKEY;
    }

    @Override
    public List<UniqueKey<JApiKeysRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERS_API_KEYS_UNIQUE);
    }

    @Override
    public List<ForeignKey<JApiKeysRecord, ?>> getReferences() {
        return Arrays.asList(Keys.API_KEYS__API_KEYS_USER_ID_FKEY);
    }

    private transient JUsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public JUsersPath users() {
        if (_users == null)
            _users = new JUsersPath(this, Keys.API_KEYS__API_KEYS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public JApiKeys as(String alias) {
        return new JApiKeys(DSL.name(alias), this);
    }

    @Override
    public JApiKeys as(Name alias) {
        return new JApiKeys(alias, this);
    }

    @Override
    public JApiKeys as(Table<?> alias) {
        return new JApiKeys(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKeys rename(String name) {
        return new JApiKeys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKeys rename(Name name) {
        return new JApiKeys(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JApiKeys rename(Table<?> name) {
        return new JApiKeys(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKeys where(Condition condition) {
        return new JApiKeys(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKeys where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKeys where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKeys where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKeys where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKeys where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKeys where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JApiKeys where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKeys whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JApiKeys whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
