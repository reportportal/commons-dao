/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JFilter.JFilterPath;
import com.epam.ta.reportportal.jooq.tables.JWidget.JWidgetPath;
import com.epam.ta.reportportal.jooq.tables.records.JWidgetFilterRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JWidgetFilter extends TableImpl<JWidgetFilterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.widget_filter</code>
     */
    public static final JWidgetFilter WIDGET_FILTER = new JWidgetFilter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JWidgetFilterRecord> getRecordType() {
        return JWidgetFilterRecord.class;
    }

    /**
     * The column <code>public.widget_filter.widget_id</code>.
     */
    public final TableField<JWidgetFilterRecord, Long> WIDGET_ID = createField(DSL.name("widget_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.widget_filter.filter_id</code>.
     */
    public final TableField<JWidgetFilterRecord, Long> FILTER_ID = createField(DSL.name("filter_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private JWidgetFilter(Name alias, Table<JWidgetFilterRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JWidgetFilter(Name alias, Table<JWidgetFilterRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.widget_filter</code> table reference
     */
    public JWidgetFilter(String alias) {
        this(DSL.name(alias), WIDGET_FILTER);
    }

    /**
     * Create an aliased <code>public.widget_filter</code> table reference
     */
    public JWidgetFilter(Name alias) {
        this(alias, WIDGET_FILTER);
    }

    /**
     * Create a <code>public.widget_filter</code> table reference
     */
    public JWidgetFilter() {
        this(DSL.name("widget_filter"), null);
    }

    public <O extends Record> JWidgetFilter(Table<O> path, ForeignKey<O, JWidgetFilterRecord> childPath, InverseForeignKey<O, JWidgetFilterRecord> parentPath) {
        super(path, childPath, parentPath, WIDGET_FILTER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JWidgetFilterPath extends JWidgetFilter implements Path<JWidgetFilterRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JWidgetFilterPath(Table<O> path, ForeignKey<O, JWidgetFilterRecord> childPath, InverseForeignKey<O, JWidgetFilterRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JWidgetFilterPath(Name alias, Table<JWidgetFilterRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JWidgetFilterPath as(String alias) {
            return new JWidgetFilterPath(DSL.name(alias), this);
        }

        @Override
        public JWidgetFilterPath as(Name alias) {
            return new JWidgetFilterPath(alias, this);
        }

        @Override
        public JWidgetFilterPath as(Table<?> alias) {
            return new JWidgetFilterPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JWidgetFilterRecord> getPrimaryKey() {
        return Keys.WIDGET_FILTER_PK;
    }

    @Override
    public List<ForeignKey<JWidgetFilterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WIDGET_FILTER__WIDGET_FILTER_FILTER_ID_FKEY, Keys.WIDGET_FILTER__WIDGET_FILTER_WIDGET_ID_FKEY);
    }

    private transient JFilterPath _filter;

    /**
     * Get the implicit join path to the <code>public.filter</code> table.
     */
    public JFilterPath filter() {
        if (_filter == null)
            _filter = new JFilterPath(this, Keys.WIDGET_FILTER__WIDGET_FILTER_FILTER_ID_FKEY, null);

        return _filter;
    }

    private transient JWidgetPath _widget;

    /**
     * Get the implicit join path to the <code>public.widget</code> table.
     */
    public JWidgetPath widget() {
        if (_widget == null)
            _widget = new JWidgetPath(this, Keys.WIDGET_FILTER__WIDGET_FILTER_WIDGET_ID_FKEY, null);

        return _widget;
    }

    @Override
    public JWidgetFilter as(String alias) {
        return new JWidgetFilter(DSL.name(alias), this);
    }

    @Override
    public JWidgetFilter as(Name alias) {
        return new JWidgetFilter(alias, this);
    }

    @Override
    public JWidgetFilter as(Table<?> alias) {
        return new JWidgetFilter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JWidgetFilter rename(String name) {
        return new JWidgetFilter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JWidgetFilter rename(Name name) {
        return new JWidgetFilter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JWidgetFilter rename(Table<?> name) {
        return new JWidgetFilter(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidgetFilter where(Condition condition) {
        return new JWidgetFilter(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidgetFilter where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidgetFilter where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidgetFilter where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidgetFilter where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidgetFilter where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidgetFilter where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JWidgetFilter where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidgetFilter whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JWidgetFilter whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
