/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.enums.JIntegrationAuthFlowEnum;
import com.epam.ta.reportportal.jooq.enums.JIntegrationGroupEnum;
import com.epam.ta.reportportal.jooq.tables.JIntegration.JIntegrationPath;
import com.epam.ta.reportportal.jooq.tables.records.JIntegrationTypeRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JIntegrationType extends TableImpl<JIntegrationTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.integration_type</code>
     */
    public static final JIntegrationType INTEGRATION_TYPE = new JIntegrationType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JIntegrationTypeRecord> getRecordType() {
        return JIntegrationTypeRecord.class;
    }

    /**
     * The column <code>public.integration_type.id</code>.
     */
    public final TableField<JIntegrationTypeRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.integration_type.name</code>.
     */
    public final TableField<JIntegrationTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.integration_type.auth_flow</code>.
     */
    public final TableField<JIntegrationTypeRecord, JIntegrationAuthFlowEnum> AUTH_FLOW = createField(DSL.name("auth_flow"), SQLDataType.VARCHAR.asEnumDataType(JIntegrationAuthFlowEnum.class), this, "");

    /**
     * The column <code>public.integration_type.creation_date</code>.
     */
    public final TableField<JIntegrationTypeRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.integration_type.group_type</code>.
     */
    public final TableField<JIntegrationTypeRecord, JIntegrationGroupEnum> GROUP_TYPE = createField(DSL.name("group_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(JIntegrationGroupEnum.class), this, "");

    /**
     * The column <code>public.integration_type.enabled</code>.
     */
    public final TableField<JIntegrationTypeRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.integration_type.details</code>.
     */
    public final TableField<JIntegrationTypeRecord, JSONB> DETAILS = createField(DSL.name("details"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.integration_type.plugin_type</code>.
     */
    public final TableField<JIntegrationTypeRecord, String> PLUGIN_TYPE = createField(DSL.name("plugin_type"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'EXTENSION'::character varying"), SQLDataType.VARCHAR)), this, "");

    private JIntegrationType(Name alias, Table<JIntegrationTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JIntegrationType(Name alias, Table<JIntegrationTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.integration_type</code> table reference
     */
    public JIntegrationType(String alias) {
        this(DSL.name(alias), INTEGRATION_TYPE);
    }

    /**
     * Create an aliased <code>public.integration_type</code> table reference
     */
    public JIntegrationType(Name alias) {
        this(alias, INTEGRATION_TYPE);
    }

    /**
     * Create a <code>public.integration_type</code> table reference
     */
    public JIntegrationType() {
        this(DSL.name("integration_type"), null);
    }

    public <O extends Record> JIntegrationType(Table<O> path, ForeignKey<O, JIntegrationTypeRecord> childPath, InverseForeignKey<O, JIntegrationTypeRecord> parentPath) {
        super(path, childPath, parentPath, INTEGRATION_TYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JIntegrationTypePath extends JIntegrationType implements Path<JIntegrationTypeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JIntegrationTypePath(Table<O> path, ForeignKey<O, JIntegrationTypeRecord> childPath, InverseForeignKey<O, JIntegrationTypeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JIntegrationTypePath(Name alias, Table<JIntegrationTypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JIntegrationTypePath as(String alias) {
            return new JIntegrationTypePath(DSL.name(alias), this);
        }

        @Override
        public JIntegrationTypePath as(Name alias) {
            return new JIntegrationTypePath(alias, this);
        }

        @Override
        public JIntegrationTypePath as(Table<?> alias) {
            return new JIntegrationTypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public Identity<JIntegrationTypeRecord, Integer> getIdentity() {
        return (Identity<JIntegrationTypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JIntegrationTypeRecord> getPrimaryKey() {
        return Keys.INTEGRATION_TYPE_PK;
    }

    @Override
    public List<UniqueKey<JIntegrationTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.INTEGRATION_TYPE_NAME_KEY);
    }

    private transient JIntegrationPath _integration;

    /**
     * Get the implicit to-many join path to the <code>public.integration</code>
     * table
     */
    public JIntegrationPath integration() {
        if (_integration == null)
            _integration = new JIntegrationPath(this, null, Keys.INTEGRATION__INTEGRATION_TYPE_FKEY.getInverseKey());

        return _integration;
    }

    @Override
    public JIntegrationType as(String alias) {
        return new JIntegrationType(DSL.name(alias), this);
    }

    @Override
    public JIntegrationType as(Name alias) {
        return new JIntegrationType(alias, this);
    }

    @Override
    public JIntegrationType as(Table<?> alias) {
        return new JIntegrationType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JIntegrationType rename(String name) {
        return new JIntegrationType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIntegrationType rename(Name name) {
        return new JIntegrationType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIntegrationType rename(Table<?> name) {
        return new JIntegrationType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegrationType where(Condition condition) {
        return new JIntegrationType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegrationType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegrationType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegrationType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegrationType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegrationType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegrationType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIntegrationType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegrationType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIntegrationType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
