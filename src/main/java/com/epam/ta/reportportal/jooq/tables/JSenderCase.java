/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.enums.JLogicalOperatorEnum;
import com.epam.ta.reportportal.jooq.tables.JLaunchAttributeRules.JLaunchAttributeRulesPath;
import com.epam.ta.reportportal.jooq.tables.JLaunchNames.JLaunchNamesPath;
import com.epam.ta.reportportal.jooq.tables.JProject.JProjectPath;
import com.epam.ta.reportportal.jooq.tables.JRecipients.JRecipientsPath;
import com.epam.ta.reportportal.jooq.tables.records.JSenderCaseRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JSenderCase extends TableImpl<JSenderCaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sender_case</code>
     */
    public static final JSenderCase SENDER_CASE = new JSenderCase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JSenderCaseRecord> getRecordType() {
        return JSenderCaseRecord.class;
    }

    /**
     * The column <code>public.sender_case.id</code>.
     */
    public final TableField<JSenderCaseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sender_case.send_case</code>.
     */
    public final TableField<JSenderCaseRecord, String> SEND_CASE = createField(DSL.name("send_case"), SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>public.sender_case.project_id</code>.
     */
    public final TableField<JSenderCaseRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sender_case.enabled</code>.
     */
    public final TableField<JSenderCaseRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.sender_case.attributes_operator</code>.
     */
    public final TableField<JSenderCaseRecord, JLogicalOperatorEnum> ATTRIBUTES_OPERATOR = createField(DSL.name("attributes_operator"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'AND'::logical_operator_enum"), SQLDataType.VARCHAR)).asEnumDataType(JLogicalOperatorEnum.class), this, "");

    /**
     * The column <code>public.sender_case.rule_name</code>.
     */
    public final TableField<JSenderCaseRecord, String> RULE_NAME = createField(DSL.name("rule_name"), SQLDataType.VARCHAR(55).nullable(false), this, "");

    /**
     * The column <code>public.sender_case.rule_type</code>.
     */
    public final TableField<JSenderCaseRecord, String> RULE_TYPE = createField(DSL.name("rule_type"), SQLDataType.VARCHAR(55).nullable(false).defaultValue(DSL.field(DSL.raw("'email'::character varying"), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.sender_case.rule_details</code>.
     */
    public final TableField<JSenderCaseRecord, JSONB> RULE_DETAILS = createField(DSL.name("rule_details"), SQLDataType.JSONB, this, "");

    private JSenderCase(Name alias, Table<JSenderCaseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JSenderCase(Name alias, Table<JSenderCaseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.sender_case</code> table reference
     */
    public JSenderCase(String alias) {
        this(DSL.name(alias), SENDER_CASE);
    }

    /**
     * Create an aliased <code>public.sender_case</code> table reference
     */
    public JSenderCase(Name alias) {
        this(alias, SENDER_CASE);
    }

    /**
     * Create a <code>public.sender_case</code> table reference
     */
    public JSenderCase() {
        this(DSL.name("sender_case"), null);
    }

    public <O extends Record> JSenderCase(Table<O> path, ForeignKey<O, JSenderCaseRecord> childPath, InverseForeignKey<O, JSenderCaseRecord> parentPath) {
        super(path, childPath, parentPath, SENDER_CASE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JSenderCasePath extends JSenderCase implements Path<JSenderCaseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JSenderCasePath(Table<O> path, ForeignKey<O, JSenderCaseRecord> childPath, InverseForeignKey<O, JSenderCaseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JSenderCasePath(Name alias, Table<JSenderCaseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JSenderCasePath as(String alias) {
            return new JSenderCasePath(DSL.name(alias), this);
        }

        @Override
        public JSenderCasePath as(Name alias) {
            return new JSenderCasePath(alias, this);
        }

        @Override
        public JSenderCasePath as(Table<?> alias) {
            return new JSenderCasePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.SENDER_CASE_PROJECT_IDX, Indexes.UNIQUE_RULE_NAME_PER_PROJECT_RULE_TYPE);
    }

    @Override
    public Identity<JSenderCaseRecord, Long> getIdentity() {
        return (Identity<JSenderCaseRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JSenderCaseRecord> getPrimaryKey() {
        return Keys.SENDER_CASE_PK;
    }

    @Override
    public List<ForeignKey<JSenderCaseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SENDER_CASE__SENDER_CASE_PROJECT_ID_FKEY);
    }

    private transient JProjectPath _project;

    /**
     * Get the implicit join path to the <code>public.project</code> table.
     */
    public JProjectPath project() {
        if (_project == null)
            _project = new JProjectPath(this, Keys.SENDER_CASE__SENDER_CASE_PROJECT_ID_FKEY, null);

        return _project;
    }

    private transient JLaunchAttributeRulesPath _launchAttributeRules;

    /**
     * Get the implicit to-many join path to the
     * <code>public.launch_attribute_rules</code> table
     */
    public JLaunchAttributeRulesPath launchAttributeRules() {
        if (_launchAttributeRules == null)
            _launchAttributeRules = new JLaunchAttributeRulesPath(this, null, Keys.LAUNCH_ATTRIBUTE_RULES__LAUNCH_ATTRIBUTE_RULES_SENDER_CASE_ID_FKEY.getInverseKey());

        return _launchAttributeRules;
    }

    private transient JLaunchNamesPath _launchNames;

    /**
     * Get the implicit to-many join path to the
     * <code>public.launch_names</code> table
     */
    public JLaunchNamesPath launchNames() {
        if (_launchNames == null)
            _launchNames = new JLaunchNamesPath(this, null, Keys.LAUNCH_NAMES__LAUNCH_NAMES_SENDER_CASE_ID_FKEY.getInverseKey());

        return _launchNames;
    }

    private transient JRecipientsPath _recipients;

    /**
     * Get the implicit to-many join path to the <code>public.recipients</code>
     * table
     */
    public JRecipientsPath recipients() {
        if (_recipients == null)
            _recipients = new JRecipientsPath(this, null, Keys.RECIPIENTS__RECIPIENTS_SENDER_CASE_ID_FKEY.getInverseKey());

        return _recipients;
    }

    @Override
    public JSenderCase as(String alias) {
        return new JSenderCase(DSL.name(alias), this);
    }

    @Override
    public JSenderCase as(Name alias) {
        return new JSenderCase(alias, this);
    }

    @Override
    public JSenderCase as(Table<?> alias) {
        return new JSenderCase(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JSenderCase rename(String name) {
        return new JSenderCase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSenderCase rename(Name name) {
        return new JSenderCase(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JSenderCase rename(Table<?> name) {
        return new JSenderCase(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSenderCase where(Condition condition) {
        return new JSenderCase(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSenderCase where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSenderCase where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSenderCase where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSenderCase where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSenderCase where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSenderCase where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JSenderCase where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSenderCase whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JSenderCase whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
