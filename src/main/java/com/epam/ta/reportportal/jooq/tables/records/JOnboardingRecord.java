/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables.records;


import com.epam.ta.reportportal.jooq.tables.JOnboarding;

import java.time.Instant;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JOnboardingRecord extends UpdatableRecordImpl<JOnboardingRecord> implements Record5<Short, String, String, Instant, Instant> {

    private static final long serialVersionUID = -1587023310;

    /**
     * Setter for <code>public.onboarding.id</code>.
     */
    public void setId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.onboarding.id</code>.
     */
    public Short getId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>public.onboarding.data</code>.
     */
    public void setData(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.onboarding.data</code>.
     */
    public String getData() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.onboarding.page</code>.
     */
    public void setPage(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.onboarding.page</code>.
     */
    public String getPage() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.onboarding.available_from</code>.
     */
    public void setAvailableFrom(Instant value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.onboarding.available_from</code>.
     */
    public Instant getAvailableFrom() {
        return (Instant) get(3);
    }

    /**
     * Setter for <code>public.onboarding.available_to</code>.
     */
    public void setAvailableTo(Instant value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.onboarding.available_to</code>.
     */
    public Instant getAvailableTo() {
        return (Instant) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Short, String, String, Instant, Instant> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Short, String, String, Instant, Instant> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return JOnboarding.ONBOARDING.ID;
    }

    @Override
    public Field<String> field2() {
        return JOnboarding.ONBOARDING.DATA;
    }

    @Override
    public Field<String> field3() {
        return JOnboarding.ONBOARDING.PAGE;
    }

    @Override
    public Field<Instant> field4() {
        return JOnboarding.ONBOARDING.AVAILABLE_FROM;
    }

    @Override
    public Field<Instant> field5() {
        return JOnboarding.ONBOARDING.AVAILABLE_TO;
    }

    @Override
    public Short component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getData();
    }

    @Override
    public String component3() {
        return getPage();
    }

    @Override
    public Instant component4() {
        return getAvailableFrom();
    }

    @Override
    public Instant component5() {
        return getAvailableTo();
    }

    @Override
    public Short value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getData();
    }

    @Override
    public String value3() {
        return getPage();
    }

    @Override
    public Instant value4() {
        return getAvailableFrom();
    }

    @Override
    public Instant value5() {
        return getAvailableTo();
    }

    @Override
    public JOnboardingRecord value1(Short value) {
        setId(value);
        return this;
    }

    @Override
    public JOnboardingRecord value2(String value) {
        setData(value);
        return this;
    }

    @Override
    public JOnboardingRecord value3(String value) {
        setPage(value);
        return this;
    }

    @Override
    public JOnboardingRecord value4(Instant value) {
        setAvailableFrom(value);
        return this;
    }

    @Override
    public JOnboardingRecord value5(Instant value) {
        setAvailableTo(value);
        return this;
    }

    @Override
    public JOnboardingRecord values(Short value1, String value2, String value3, Instant value4, Instant value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JOnboardingRecord
     */
    public JOnboardingRecord() {
        super(JOnboarding.ONBOARDING);
    }

    /**
     * Create a detached, initialised JOnboardingRecord
     */
    public JOnboardingRecord(Short id, String data, String page, Instant availableFrom, Instant availableTo) {
        super(JOnboarding.ONBOARDING);

        set(0, id);
        set(1, data);
        set(2, page);
        set(3, availableFrom);
        set(4, availableTo);
    }
}
