/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JClustersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JClusters extends TableImpl<JClustersRecord> {

    private static final long serialVersionUID = -1432286641;

    /**
     * The reference instance of <code>public.clusters</code>
     */
    public static final JClusters CLUSTERS = new JClusters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JClustersRecord> getRecordType() {
        return JClustersRecord.class;
    }

    /**
     * The column <code>public.clusters.id</code>.
     */
    public final TableField<JClustersRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('clusters_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.clusters.index_id</code>.
     */
    public final TableField<JClustersRecord, Long> INDEX_ID = createField(DSL.name("index_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.clusters.project_id</code>.
     */
    public final TableField<JClustersRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.clusters.launch_id</code>.
     */
    public final TableField<JClustersRecord, Long> LAUNCH_ID = createField(DSL.name("launch_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.clusters.message</code>.
     */
    public final TableField<JClustersRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.clusters</code> table reference
     */
    public JClusters() {
        this(DSL.name("clusters"), null);
    }

    /**
     * Create an aliased <code>public.clusters</code> table reference
     */
    public JClusters(String alias) {
        this(DSL.name(alias), CLUSTERS);
    }

    /**
     * Create an aliased <code>public.clusters</code> table reference
     */
    public JClusters(Name alias) {
        this(alias, CLUSTERS);
    }

    private JClusters(Name alias, Table<JClustersRecord> aliased) {
        this(alias, aliased, null);
    }

    private JClusters(Name alias, Table<JClustersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JClusters(Table<O> child, ForeignKey<O, JClustersRecord> key) {
        super(child, key, CLUSTERS);
    }

    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLUSTER_INDEX_ID_IDX, Indexes.CLUSTER_LAUNCH_IDX, Indexes.CLUSTER_PROJECT_IDX, Indexes.CLUSTERS_PK, Indexes.INDEX_ID_LAUNCH_ID_UNQ);
    }

    @Override
    public Identity<JClustersRecord, Long> getIdentity() {
        return Keys.IDENTITY_CLUSTERS;
    }

    @Override
    public UniqueKey<JClustersRecord> getPrimaryKey() {
        return Keys.CLUSTERS_PK;
    }

    @Override
    public List<UniqueKey<JClustersRecord>> getKeys() {
        return Arrays.<UniqueKey<JClustersRecord>>asList(Keys.CLUSTERS_PK, Keys.INDEX_ID_LAUNCH_ID_UNQ);
    }

    @Override
    public JClusters as(String alias) {
        return new JClusters(DSL.name(alias), this);
    }

    @Override
    public JClusters as(Name alias) {
        return new JClusters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JClusters rename(String name) {
        return new JClusters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JClusters rename(Name name) {
        return new JClusters(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, Long, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
