/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.records.JRestorePasswordBidRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JRestorePasswordBid extends TableImpl<JRestorePasswordBidRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.restore_password_bid</code>
     */
    public static final JRestorePasswordBid RESTORE_PASSWORD_BID = new JRestorePasswordBid();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JRestorePasswordBidRecord> getRecordType() {
        return JRestorePasswordBidRecord.class;
    }

    /**
     * The column <code>public.restore_password_bid.uuid</code>.
     */
    public final TableField<JRestorePasswordBidRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.restore_password_bid.last_modified</code>.
     */
    public final TableField<JRestorePasswordBidRecord, Instant> LAST_MODIFIED = createField(DSL.name("last_modified"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.restore_password_bid.email</code>.
     */
    public final TableField<JRestorePasswordBidRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR.nullable(false), this, "");

    private JRestorePasswordBid(Name alias, Table<JRestorePasswordBidRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JRestorePasswordBid(Name alias, Table<JRestorePasswordBidRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.restore_password_bid</code> table
     * reference
     */
    public JRestorePasswordBid(String alias) {
        this(DSL.name(alias), RESTORE_PASSWORD_BID);
    }

    /**
     * Create an aliased <code>public.restore_password_bid</code> table
     * reference
     */
    public JRestorePasswordBid(Name alias) {
        this(alias, RESTORE_PASSWORD_BID);
    }

    /**
     * Create a <code>public.restore_password_bid</code> table reference
     */
    public JRestorePasswordBid() {
        this(DSL.name("restore_password_bid"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JRestorePasswordBidRecord> getPrimaryKey() {
        return Keys.RESTORE_PASSWORD_BID_PK;
    }

    @Override
    public List<UniqueKey<JRestorePasswordBidRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.RESTORE_PASSWORD_BID_EMAIL_KEY);
    }

    @Override
    public JRestorePasswordBid as(String alias) {
        return new JRestorePasswordBid(DSL.name(alias), this);
    }

    @Override
    public JRestorePasswordBid as(Name alias) {
        return new JRestorePasswordBid(alias, this);
    }

    @Override
    public JRestorePasswordBid as(Table<?> alias) {
        return new JRestorePasswordBid(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JRestorePasswordBid rename(String name) {
        return new JRestorePasswordBid(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JRestorePasswordBid rename(Name name) {
        return new JRestorePasswordBid(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JRestorePasswordBid rename(Table<?> name) {
        return new JRestorePasswordBid(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRestorePasswordBid where(Condition condition) {
        return new JRestorePasswordBid(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRestorePasswordBid where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRestorePasswordBid where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRestorePasswordBid where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRestorePasswordBid where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRestorePasswordBid where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRestorePasswordBid where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JRestorePasswordBid where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRestorePasswordBid whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JRestorePasswordBid whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
