/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.dao.converters.JooqInstantConverter;
import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JLog.JLogPath;
import com.epam.ta.reportportal.jooq.tables.records.JAttachmentRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JAttachment extends TableImpl<JAttachmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.attachment</code>
     */
    public static final JAttachment ATTACHMENT = new JAttachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JAttachmentRecord> getRecordType() {
        return JAttachmentRecord.class;
    }

    /**
     * The column <code>public.attachment.id</code>.
     */
    public final TableField<JAttachmentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.attachment.file_id</code>.
     */
    public final TableField<JAttachmentRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.attachment.thumbnail_id</code>.
     */
    public final TableField<JAttachmentRecord, String> THUMBNAIL_ID = createField(DSL.name("thumbnail_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.attachment.content_type</code>.
     */
    public final TableField<JAttachmentRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.attachment.project_id</code>.
     */
    public final TableField<JAttachmentRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.attachment.launch_id</code>.
     */
    public final TableField<JAttachmentRecord, Long> LAUNCH_ID = createField(DSL.name("launch_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.attachment.item_id</code>.
     */
    public final TableField<JAttachmentRecord, Long> ITEM_ID = createField(DSL.name("item_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.attachment.file_size</code>.
     */
    public final TableField<JAttachmentRecord, Long> FILE_SIZE = createField(DSL.name("file_size"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.attachment.creation_date</code>.
     */
    public final TableField<JAttachmentRecord, Instant> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "", new JooqInstantConverter());

    /**
     * The column <code>public.attachment.file_name</code>.
     */
    public final TableField<JAttachmentRecord, String> FILE_NAME = createField(DSL.name("file_name"), SQLDataType.VARCHAR(512), this, "");

    private JAttachment(Name alias, Table<JAttachmentRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JAttachment(Name alias, Table<JAttachmentRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.attachment</code> table reference
     */
    public JAttachment(String alias) {
        this(DSL.name(alias), ATTACHMENT);
    }

    /**
     * Create an aliased <code>public.attachment</code> table reference
     */
    public JAttachment(Name alias) {
        this(alias, ATTACHMENT);
    }

    /**
     * Create a <code>public.attachment</code> table reference
     */
    public JAttachment() {
        this(DSL.name("attachment"), null);
    }

    public <O extends Record> JAttachment(Table<O> path, ForeignKey<O, JAttachmentRecord> childPath, InverseForeignKey<O, JAttachmentRecord> parentPath) {
        super(path, childPath, parentPath, ATTACHMENT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JAttachmentPath extends JAttachment implements Path<JAttachmentRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JAttachmentPath(Table<O> path, ForeignKey<O, JAttachmentRecord> childPath, InverseForeignKey<O, JAttachmentRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JAttachmentPath(Name alias, Table<JAttachmentRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JAttachmentPath as(String alias) {
            return new JAttachmentPath(DSL.name(alias), this);
        }

        @Override
        public JAttachmentPath as(Name alias) {
            return new JAttachmentPath(alias, this);
        }

        @Override
        public JAttachmentPath as(Table<?> alias) {
            return new JAttachmentPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ATT_ITEM_IDX, Indexes.ATT_LAUNCH_IDX, Indexes.ATT_PROJECT_IDX, Indexes.ATTACHMENT_PROJECT_ID_CREATION_TIME_IDX);
    }

    @Override
    public Identity<JAttachmentRecord, Long> getIdentity() {
        return (Identity<JAttachmentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JAttachmentRecord> getPrimaryKey() {
        return Keys.ATTACHMENT_PK;
    }

    private transient JLogPath _log;

    /**
     * Get the implicit to-many join path to the <code>public.log</code> table
     */
    public JLogPath log() {
        if (_log == null)
            _log = new JLogPath(this, null, Keys.LOG__LOG_ATTACHMENT_ID_FKEY.getInverseKey());

        return _log;
    }

    @Override
    public JAttachment as(String alias) {
        return new JAttachment(DSL.name(alias), this);
    }

    @Override
    public JAttachment as(Name alias) {
        return new JAttachment(alias, this);
    }

    @Override
    public JAttachment as(Table<?> alias) {
        return new JAttachment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAttachment rename(String name) {
        return new JAttachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAttachment rename(Name name) {
        return new JAttachment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAttachment rename(Table<?> name) {
        return new JAttachment(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachment where(Condition condition) {
        return new JAttachment(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachment where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachment where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachment where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachment where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachment where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachment where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAttachment where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachment whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAttachment whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
