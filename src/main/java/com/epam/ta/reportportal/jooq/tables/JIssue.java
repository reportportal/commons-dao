/*
 * This file is generated by jOOQ.
 */
package com.epam.ta.reportportal.jooq.tables;


import com.epam.ta.reportportal.jooq.Indexes;
import com.epam.ta.reportportal.jooq.JPublic;
import com.epam.ta.reportportal.jooq.Keys;
import com.epam.ta.reportportal.jooq.tables.JIssueTicket.JIssueTicketPath;
import com.epam.ta.reportportal.jooq.tables.JIssueType.JIssueTypePath;
import com.epam.ta.reportportal.jooq.tables.JTestItemResults.JTestItemResultsPath;
import com.epam.ta.reportportal.jooq.tables.JTicket.JTicketPath;
import com.epam.ta.reportportal.jooq.tables.records.JIssueRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class JIssue extends TableImpl<JIssueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.issue</code>
     */
    public static final JIssue ISSUE = new JIssue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JIssueRecord> getRecordType() {
        return JIssueRecord.class;
    }

    /**
     * The column <code>public.issue.issue_id</code>.
     */
    public final TableField<JIssueRecord, Long> ISSUE_ID = createField(DSL.name("issue_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.issue.issue_type</code>.
     */
    public final TableField<JIssueRecord, Long> ISSUE_TYPE = createField(DSL.name("issue_type"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.issue.issue_description</code>.
     */
    public final TableField<JIssueRecord, String> ISSUE_DESCRIPTION = createField(DSL.name("issue_description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.issue.auto_analyzed</code>.
     */
    public final TableField<JIssueRecord, Boolean> AUTO_ANALYZED = createField(DSL.name("auto_analyzed"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.issue.ignore_analyzer</code>.
     */
    public final TableField<JIssueRecord, Boolean> IGNORE_ANALYZER = createField(DSL.name("ignore_analyzer"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private JIssue(Name alias, Table<JIssueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JIssue(Name alias, Table<JIssueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public JIssue(String alias) {
        this(DSL.name(alias), ISSUE);
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public JIssue(Name alias) {
        this(alias, ISSUE);
    }

    /**
     * Create a <code>public.issue</code> table reference
     */
    public JIssue() {
        this(DSL.name("issue"), null);
    }

    public <O extends Record> JIssue(Table<O> path, ForeignKey<O, JIssueRecord> childPath, InverseForeignKey<O, JIssueRecord> parentPath) {
        super(path, childPath, parentPath, ISSUE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class JIssuePath extends JIssue implements Path<JIssueRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> JIssuePath(Table<O> path, ForeignKey<O, JIssueRecord> childPath, InverseForeignKey<O, JIssueRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private JIssuePath(Name alias, Table<JIssueRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public JIssuePath as(String alias) {
            return new JIssuePath(DSL.name(alias), this);
        }

        @Override
        public JIssuePath as(Name alias) {
            return new JIssuePath(alias, this);
        }

        @Override
        public JIssuePath as(Table<?> alias) {
            return new JIssuePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ISSUE_IT_IDX);
    }

    @Override
    public UniqueKey<JIssueRecord> getPrimaryKey() {
        return Keys.ISSUE_PK;
    }

    @Override
    public List<ForeignKey<JIssueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ISSUE__ISSUE_ISSUE_ID_FKEY, Keys.ISSUE__ISSUE_ISSUE_TYPE_FKEY);
    }

    private transient JTestItemResultsPath _testItemResults;

    /**
     * Get the implicit join path to the <code>public.test_item_results</code>
     * table.
     */
    public JTestItemResultsPath testItemResults() {
        if (_testItemResults == null)
            _testItemResults = new JTestItemResultsPath(this, Keys.ISSUE__ISSUE_ISSUE_ID_FKEY, null);

        return _testItemResults;
    }

    private transient JIssueTypePath _issueType;

    /**
     * Get the implicit join path to the <code>public.issue_type</code> table.
     */
    public JIssueTypePath issueType() {
        if (_issueType == null)
            _issueType = new JIssueTypePath(this, Keys.ISSUE__ISSUE_ISSUE_TYPE_FKEY, null);

        return _issueType;
    }

    private transient JIssueTicketPath _issueTicket;

    /**
     * Get the implicit to-many join path to the
     * <code>public.issue_ticket</code> table
     */
    public JIssueTicketPath issueTicket() {
        if (_issueTicket == null)
            _issueTicket = new JIssueTicketPath(this, null, Keys.ISSUE_TICKET__ISSUE_TICKET_ISSUE_ID_FKEY.getInverseKey());

        return _issueTicket;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.ticket</code>
     * table
     */
    public JTicketPath ticket() {
        return issueTicket().ticket();
    }

    @Override
    public JIssue as(String alias) {
        return new JIssue(DSL.name(alias), this);
    }

    @Override
    public JIssue as(Name alias) {
        return new JIssue(alias, this);
    }

    @Override
    public JIssue as(Table<?> alias) {
        return new JIssue(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssue rename(String name) {
        return new JIssue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssue rename(Name name) {
        return new JIssue(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JIssue rename(Table<?> name) {
        return new JIssue(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssue where(Condition condition) {
        return new JIssue(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssue where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssue where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssue where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssue where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssue where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssue where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JIssue where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssue whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JIssue whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
