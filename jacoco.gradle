/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

build.dependsOn jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled true
    }
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            'com/epam/ta/reportportal/jooq/**',
                            'com/epam/ta/reportportal/config/**',
                            'com/epam/ta/reportportal/commons/accessible',
                            'com/epam/ta/reportportal/commons/querygen/constant',
                            'com/epam/ta/reportportal/exception',
                            'com/epam/ta/reportportal/entity/oauth',
                            'com/epam/ta/reportportal/entity/bts',
                            'com/epam/ta/reportportal/entity/ldap',
                            'com/epam/ta/reportportal/entity/widget/content/**'
                    ])
        }))
    }
    doLast {
        def report = file("${reportsDir}/jacoco/test/jacocoTestReport.xml" as Object)
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser() as Object
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { (it.'@type' == 'INSTRUCTION') }),
                'branch'     : percentage(counters.find { (it.'@type' == 'BRANCH') }),
                'line'       : percentage(counters.find { (it.'@type' == 'LINE') }),
                'complexity' : percentage(counters.find { (it.'@type' == 'COMPLEXITY') }),
                'method'     : percentage(counters.find { (it.'@type' == 'METHOD') }),
                'class'      : percentage(counters.find { (it.'@type' == 'CLASS') })
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else {
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}